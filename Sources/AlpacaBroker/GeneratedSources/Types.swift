// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get all accounts
    ///
    /// Retrieves all accounts found by the query'
    ///
    /// - Remark: HTTP `GET /v1/accounts`.
    /// - Remark: Generated from `#/paths//v1/accounts/get(getAllAccounts)`.
    func getAllAccounts(_ input: Operations.getAllAccounts.Input) async throws -> Operations.getAllAccounts.Output
    /// Create an account
    ///
    /// Submit an account application with KYC information. This will create a trading account for the end user. The account status may or may not be ACTIVE immediately and you will receive account status updates on the event API. 
    ///
    /// - Remark: HTTP `POST /v1/accounts`.
    /// - Remark: Generated from `#/paths//v1/accounts/post(createAccount)`.
    func createAccount(_ input: Operations.createAccount.Input) async throws -> Operations.createAccount.Output
    /// Get an account by Id.
    ///
    /// You can query a specific account that you submitted to Alpaca by passing into the query the account_id associated with the account you’re retrieving.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/get(getAccount)`.
    func getAccount(_ input: Operations.getAccount.Input) async throws -> Operations.getAccount.Output
    /// Update an account
    ///
    /// This operation updates account information.
    ///
    /// If all parameters are valid and updates have been made, it returns with status code 200. The response is the account model.
    ///
    /// - Remark: HTTP `PATCH /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/patch(patchAccount)`.
    func patchAccount(_ input: Operations.patchAccount.Input) async throws -> Operations.patchAccount.Output
    /// Request to close an account
    ///
    /// This operation closes an active account.
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/delete(deleteAccount)`.
    func deleteAccount(_ input: Operations.deleteAccount.Input) async throws -> Operations.deleteAccount.Output
    /// Return a list of account documents.
    ///
    /// This endpoint allows you to query all the documents that belong to a certain account. You can filter by date, or type of document.
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/documents`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/get(getDocsForAccount)`.
    func getDocsForAccount(_ input: Operations.getDocsForAccount.Input) async throws -> Operations.getDocsForAccount.Output
    /// Upload a document to an already existing account
    ///
    /// Upload a document to be attached to an account.
    ///
    /// Documents are binary objects whose contents are encoded in base64. Each encoded content size is limited to 10MB if you use Alpaca for KYCaaS. If you perform your own KYC there are no document size limitations.
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/documents/upload`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/upload/post(uploadDocToAccount)`.
    func uploadDocToAccount(_ input: Operations.uploadDocToAccount.Input) async throws -> Operations.uploadDocToAccount.Output
    /// Download a document file that belongs to an account.
    ///
    /// This endpoint allows you to download a document identified by the document_id passed in the header. The returned document is in PDF format.
    ///
    /// The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/documents/{document_id}/download`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/{document_id}/download/get(downloadDocFromAccount)`.
    func downloadDocFromAccount(_ input: Operations.downloadDocFromAccount.Input) async throws -> Operations.downloadDocFromAccount.Output
    /// Download a document file directly
    ///
    /// The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found.
    ///
    ///
    /// - Remark: HTTP `GET /v1/documents/{document_id}`.
    /// - Remark: Generated from `#/paths//v1/documents/{document_id}/get(downloadDocumentById)`.
    func downloadDocumentById(_ input: Operations.downloadDocumentById.Input) async throws -> Operations.downloadDocumentById.Output
    /// Retrieve bank relationships for an account
    ///
    /// Retrieves Bank Relationships for an account
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/recipient_banks`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/get(getRecipientBanks)`.
    func getRecipientBanks(_ input: Operations.getRecipientBanks.Input) async throws -> Operations.getRecipientBanks.Output
    /// Create a Bank Relationship for an account
    ///
    /// If successful, retrieves Bank Relationships for an account
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/recipient_banks`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/post(createRecipientBank)`.
    func createRecipientBank(_ input: Operations.createRecipientBank.Input) async throws -> Operations.createRecipientBank.Output
    /// Delete a Bank Relationship for an account
    ///
    /// If successful, deletes Bank Relationship for an account
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/recipient_banks/{bank_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/{bank_id}/delete(deleteRecipientBank)`.
    func deleteRecipientBank(_ input: Operations.deleteRecipientBank.Input) async throws -> Operations.deleteRecipientBank.Output
    /// Return a list of transfers for an account.
    ///
    /// You can query a list of transfers for an account.
    ///
    ///
    /// You can filter requested transfers by values such as direction and status.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/transfers`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/get(getTransfersForAccount)`.
    func getTransfersForAccount(_ input: Operations.getTransfersForAccount.Input) async throws -> Operations.getTransfersForAccount.Output
    /// Request a new transfer
    ///
    /// Create a new transfer to an account to fund it.
    ///
    /// In the sandbox environment, you can instantly deposit to or withdraw from an account with a virtual money amount. In the production environment, this endpoint is used only for requesting an outgoing (withdrawal) wire transfer at this moment. For the wire transfer (in production), you need to create a bank resource first using the Bank API. For more on how to fund an account in sandbox please check out this tutorial [here](https://alpaca.markets/learn/fund-broker-api/).
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/transfers`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/post(createTransferForAccount)`.
    func createTransferForAccount(_ input: Operations.createTransferForAccount.Input) async throws -> Operations.createTransferForAccount.Output
    /// Request to close a transfer
    ///
    /// Request to close a transfer
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/transfers/{transfer_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/{transfer_id}/delete(deleteTransfer)`.
    func deleteTransfer(_ input: Operations.deleteTransfer.Input) async throws -> Operations.deleteTransfer.Output
    /// Retrieve account activities
    ///
    /// Returns an array of Activities
    ///
    /// Notes:
    /// * Pagination is handled using the `page_token` and `page_size` parameters.
    /// * `page_token` represents the ID of the end of your current page of results.
    ///   for example if in your first response the id of the last Activiy item returned in the array was `20220203000000000::045b3b8d-c566-4bef-b741-2bf598dd6ae7`, you'd pass that value as `page_token` to get the next page of results
    ///
    /// * If specified with a `direction` of `desc`, for example, the results will end before the activity with the specified ID.
    /// * If specified with a `direction` of `asc`, results will begin with the activity immediately after the one specified.
    /// * `page_size` is the maximum number of entries to return in the response.
    /// * If `date` is not specified, the default and maximum value is 100.
    /// * If `date` is specified, the default behavior is to return all results, and there is no maximum page size.
    ///
    /// - Remark: HTTP `GET /v1/accounts/activities`.
    /// - Remark: Generated from `#/paths//v1/accounts/activities/get(getAccountActivities)`.
    func getAccountActivities(_ input: Operations.getAccountActivities.Input) async throws -> Operations.getAccountActivities.Output
    /// Retrieve specific account activities
    ///
    /// Retrieves an Array of Activies by type
    ///
    /// Notes:
    /// * Pagination is handled using the `page_token` and `page_size` parameters.
    /// * `page_token` represents the ID of the end of your current page of results.
    ///   for example if in your first response the id of the last Activiy item returned in the array was `20220203000000000::045b3b8d-c566-4bef-b741-2bf598dd6ae7`, you'd pass that value as `page_token` to get the next page of results
    ///
    /// * If specified with a `direction` of `desc`, for example, the results will end before the activity with the specified ID.
    /// * If specified with a `direction` of `asc`, results will begin with the activity immediately after the one specified.
    /// * `page_size` is the maximum number of entries to return in the response.
    /// * If `date` is not specified, the default and maximum value is 100.
    /// * If `date` is specified, the default behavior is to return all results, and there is no maximum page size.
    ///
    /// - Remark: HTTP `GET /v1/accounts/activities/{activity_type}`.
    /// - Remark: Generated from `#/paths//v1/accounts/activities/{activity_type}/get(getAccountActivitiesByType)`.
    func getAccountActivitiesByType(_ input: Operations.getAccountActivitiesByType.Input) async throws -> Operations.getAccountActivitiesByType.Output
    /// Retrieve ACH Relationships for an account
    ///
    /// Returns a list of ACH Relationships for an account
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/ach_relationships`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/get(getAccountACHRelationships)`.
    func getAccountACHRelationships(_ input: Operations.getAccountACHRelationships.Input) async throws -> Operations.getAccountACHRelationships.Output
    /// Create an ACH Relationship
    ///
    /// Create a new ACHRelationship for an account
    ///
    /// If successful, will return 200 code with a newly created ACH Relationship entity.
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/ach_relationships`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/post(createACHRelationshipForAccount)`.
    func createACHRelationshipForAccount(_ input: Operations.createACHRelationshipForAccount.Input) async throws -> Operations.createACHRelationshipForAccount.Output
    /// Delete an existing ACH relationship
    ///
    /// Delete an existing ACH relationship for an account
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/delete(deleteACHRelationshipFromAccount)`.
    func deleteACHRelationshipFromAccount(_ input: Operations.deleteACHRelationshipFromAccount.Input) async throws -> Operations.deleteACHRelationshipFromAccount.Output
    /// Retrieve trading details for an account.
    ///
    /// As a broker you can view more trading details about your users.
    ///
    /// The response is a Trading Account model.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/account`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/account/get(getTradingAccount)`.
    func getTradingAccount(_ input: Operations.getTradingAccount.Input) async throws -> Operations.getTradingAccount.Output
    /// List open positions for an account
    ///
    /// List open positions for an account
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/positions`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/get(getPositionsForAccount)`.
    func getPositionsForAccount(_ input: Operations.getPositionsForAccount.Input) async throws -> Operations.getPositionsForAccount.Output
    /// Close All Positions for an Account
    ///
    /// Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/positions`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/delete(closeAllPositionsForAccount)`.
    func closeAllPositionsForAccount(_ input: Operations.closeAllPositionsForAccount.Input) async throws -> Operations.closeAllPositionsForAccount.Output
    /// Get an Open Position for account by Symbol or AssetId
    ///
    /// Retrieves the account’s open position for the given symbol or asset_id.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/get(getPositionsForAccountBySymbol)`.
    func getPositionsForAccountBySymbol(_ input: Operations.getPositionsForAccountBySymbol.Input) async throws -> Operations.getPositionsForAccountBySymbol.Output
    /// Close a Position for an Account
    ///
    /// Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/delete(closePositionForAccountBySymbol)`.
    func closePositionForAccountBySymbol(_ input: Operations.closePositionForAccountBySymbol.Input) async throws -> Operations.closePositionForAccountBySymbol.Output
    /// Retrieves a single order for the given order_id.
    ///
    /// Retrieves a single order for the given order_id.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/get(getOrderForAccount)`.
    func getOrderForAccount(_ input: Operations.getOrderForAccount.Input) async throws -> Operations.getOrderForAccount.Output
    /// Replaces a single order with updated parameters
    ///
    /// Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.
    ///
    /// A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel found [here in the market data api](https://alpaca.markets/docs/api-references/market-data-api/#order-updates).
    ///
    /// While an order is being replaced, the account's buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.
    ///
    /// - Remark: HTTP `PATCH /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/patch(replaceOrderForAccount)`.
    func replaceOrderForAccount(_ input: Operations.replaceOrderForAccount.Input) async throws -> Operations.replaceOrderForAccount.Output
    /// Attempts to cancel an open order.
    ///
    /// Attempts to cancel an open order. If the order is no longer cancelable (for example if the status is "filled"), the server will respond with status 422, and reject the request.
    ///
    /// Upon acceptance of the cancel request, it returns status 204.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/delete(deleteOrderForAccount)`.
    func deleteOrderForAccount(_ input: Operations.deleteOrderForAccount.Input) async throws -> Operations.deleteOrderForAccount.Output
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// Endpoint defaults to open orders if no parameters are provided.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/get(getAllOrdersForAccount)`.
    func getAllOrdersForAccount(_ input: Operations.getAllOrdersForAccount.Input) async throws -> Operations.getAllOrdersForAccount.Output
    /// Create an order for an account.
    ///
    /// Create an order for an account.
    ///
    /// - Remark: HTTP `POST /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/post(createOrderForAccount)`.
    func createOrderForAccount(_ input: Operations.createOrderForAccount.Input) async throws -> Operations.createOrderForAccount.Output
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
    ///
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/delete(deleteAllOrdersForAccount)`.
    func deleteAllOrdersForAccount(_ input: Operations.deleteAllOrdersForAccount.Input) async throws -> Operations.deleteAllOrdersForAccount.Output
    /// Retrieve all assets
    ///
    /// Returns all assets
    ///
    /// - Remark: HTTP `GET /v1/assets`.
    /// - Remark: Generated from `#/paths//v1/assets/get(getAssets)`.
    func getAssets(_ input: Operations.getAssets.Input) async throws -> Operations.getAssets.Output
    /// Retrieve an asset by UUID
    ///
    /// Returns the requested asset, if found
    ///
    /// - Remark: HTTP `GET /v1/assets/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/assets/{symbol_or_asset_id}/get(getAssetBySymbolOrId)`.
    func getAssetBySymbolOrId(_ input: Operations.getAssetBySymbolOrId.Input) async throws -> Operations.getAssetBySymbolOrId.Output
    /// Query market calendar
    ///
    /// The calendar API serves the full list of market days from 1970 to 2029. It can also be queried by specifying a start and/or end time to narrow down the results. In addition to the dates, the response also contains the specific open and close times for the market days, taking into account early closures.
    ///
    /// - Remark: HTTP `GET /v1/calendar`.
    /// - Remark: Generated from `#/paths//v1/calendar/get(queryMarketCalendar)`.
    func queryMarketCalendar(_ input: Operations.queryMarketCalendar.Input) async throws -> Operations.queryMarketCalendar.Output
    /// Query market clock
    ///
    /// The Clock API serves the current market timestamp, whether or not the market is currently open, as well as the times of the next market open and close.
    ///
    /// - Remark: HTTP `GET /v1/clock`.
    /// - Remark: Generated from `#/paths//v1/clock/get(queryMarketClock)`.
    func queryMarketClock(_ input: Operations.queryMarketClock.Input) async throws -> Operations.queryMarketClock.Output
    /// Subscribe to account status events (SSE).
    ///
    /// Events API provide event push as well as historical queries via SSE (server sent events).
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    ///
    /// - Remark: HTTP `GET /v1/events/accounts/status`.
    /// - Remark: Generated from `#/paths//v1/events/accounts/status/get(suscribeToAccountStatusSSE)`.
    func suscribeToAccountStatusSSE(_ input: Operations.suscribeToAccountStatusSSE.Input) async throws -> Operations.suscribeToAccountStatusSSE.Output
    /// Subscribe to journal events (SSE).
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to journal status updates as they get processed by our backoffice.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/journals/status`.
    /// - Remark: Generated from `#/paths//v1/events/journals/status/get(subscribeToJournalStatusSSE)`.
    func subscribeToJournalStatusSSE(_ input: Operations.subscribeToJournalStatusSSE.Input) async throws -> Operations.subscribeToJournalStatusSSE.Output
    /// Subscribe to Transfer Events (SSE)
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to transfer status updates as they get processed by our backoffice, for both end-user and firm accounts.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/transfers/status`.
    /// - Remark: Generated from `#/paths//v1/events/transfers/status/get(subscribeToTransferStatusSSE)`.
    func subscribeToTransferStatusSSE(_ input: Operations.subscribeToTransferStatusSSE.Input) async throws -> Operations.subscribeToTransferStatusSSE.Output
    /// Subscribe to Trade Events (SSE)
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to events related to trade updates. Most market trades sent during market hours are filled instantly; you can listen to limit order updates through this endpoint.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/trades`.
    /// - Remark: Generated from `#/paths//v1/events/trades/get(subscribeToTradeSSE)`.
    func subscribeToTradeSSE(_ input: Operations.subscribeToTradeSSE.Input) async throws -> Operations.subscribeToTradeSSE.Output
    /// Return a list of requested journals.
    ///
    /// Returns an array of journal objects.
    ///
    /// - Remark: HTTP `GET /v1/journals`.
    /// - Remark: Generated from `#/paths//v1/journals/get(getAllJournals)`.
    func getAllJournals(_ input: Operations.getAllJournals.Input) async throws -> Operations.getAllJournals.Output
    /// Create a Journal.
    ///
    /// A journal can be JNLC (move cash) or JNLS (move shares), dictated by `entry_type`. Generally, journal requests are subject to approval and starts from the `pending` status. The status changes are propagated through the Event API. Under certain conditions agreed for the partner, such journal transactions that meet the criteria are executed right away.
    ///
    ///
    /// - Remark: HTTP `POST /v1/journals`.
    /// - Remark: Generated from `#/paths//v1/journals/post(createJournal)`.
    func createJournal(_ input: Operations.createJournal.Input) async throws -> Operations.createJournal.Output
    /// Cancel a pending journal.
    ///
    /// You can only delete a journal if the journal is still in a pending state, if a journal is executed you will not be able to delete. The alternative is to create a mirror journal entry to reverse the flow of funds.
    ///
    /// - Remark: HTTP `DELETE /v1/journals/{journal_id}`.
    /// - Remark: Generated from `#/paths//v1/journals/{journal_id}/delete(deleteJournalById)`.
    func deleteJournalById(_ input: Operations.deleteJournalById.Input) async throws -> Operations.deleteJournalById.Output
    /// Create a Batch Journal Transaction (One-to-Many)
    ///
    /// You can create a batch of journal requests by using this endpoint. This is enabled on JNLC type Journals for now only.
    ///
    /// Every single request must be valid for the entire batch operation to succeed.
    ///
    /// In the case of a successful request, the response will contain an array of journal objects with an extra attribute error_message in the case when a specific account fails to receive a journal.
    ///
    /// - Remark: HTTP `POST /v1/journals/batch`.
    /// - Remark: Generated from `#/paths//v1/journals/batch/post(createBatchJournal)`.
    func createBatchJournal(_ input: Operations.createBatchJournal.Input) async throws -> Operations.createBatchJournal.Output
    /// Get an OAuth client
    ///
    /// The endpoint returns the details of OAuth client to display in the authorization page.
    ///
    ///
    /// - Remark: HTTP `GET /v1/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//v1/oauth/clients/{client_id}/get(getOAuthClient)`.
    func getOAuthClient(_ input: Operations.getOAuthClient.Input) async throws -> Operations.getOAuthClient.Output
    /// Issue an OAuth token.
    ///
    /// The operation issues an OAuth code which can be used in the OAuth code flow.
    ///
    ///
    /// - Remark: HTTP `POST /v1/oauth/token`.
    /// - Remark: Generated from `#/paths//v1/oauth/token/post(issueOAuthToken)`.
    func issueOAuthToken(_ input: Operations.issueOAuthToken.Input) async throws -> Operations.issueOAuthToken.Output
    /// Authorize an OAuth Token
    ///
    /// The operation issues an OAuth code which can be used in the OAuth code flow.
    ///
    ///
    /// - Remark: HTTP `POST /v1/oauth/authorize`.
    /// - Remark: Generated from `#/paths//v1/oauth/authorize/post(authorizeOAuthToken)`.
    func authorizeOAuthToken(_ input: Operations.authorizeOAuthToken.Input) async throws -> Operations.authorizeOAuthToken.Output
    /// Retrieve all watchlists
    ///
    /// Fetch a list of all watchlists currently in an account.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/watchlists`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/get(getAllWatchlistsForAccount)`.
    func getAllWatchlistsForAccount(_ input: Operations.getAllWatchlistsForAccount.Input) async throws -> Operations.getAllWatchlistsForAccount.Output
    /// Create a new watchlist
    ///
    /// Returns the watchlist object
    ///
    /// - Remark: HTTP `POST /v1/trading/accounts/{account_id}/watchlists`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/post(createWatchlistForAccount)`.
    func createWatchlistForAccount(_ input: Operations.createWatchlistForAccount.Input) async throws -> Operations.createWatchlistForAccount.Output
    /// Manage watchlists
    ///
    /// Fetch a single watchlist by identifier.
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/get(getWatchlistForAccountById)`.
    func getWatchlistForAccountById(_ input: Operations.getWatchlistForAccountById.Input) async throws -> Operations.getWatchlistForAccountById.Output
    /// Update an existing watchlist
    ///
    /// Replace entirely the set of securities contained in the watchlist while optionally renaming it. Destructive operation.
    ///
    /// - Remark: HTTP `PUT /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/put(replaceWatchlistForAccountById)`.
    func replaceWatchlistForAccountById(_ input: Operations.replaceWatchlistForAccountById.Input) async throws -> Operations.replaceWatchlistForAccountById.Output
    /// Remove a watchlist
    ///
    /// Irrevocably delete a watchlist.
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/delete(deleteWatchlistFromAccountById)`.
    func deleteWatchlistFromAccountById(_ input: Operations.deleteWatchlistFromAccountById.Input) async throws -> Operations.deleteWatchlistFromAccountById.Output
    /// Retrieving Announcements
    ///
    /// This enables searching for an array of corporate action announcements based on criteria.
    ///
    /// - Remark: HTTP `GET /v1/corporate_actions/announcements`.
    /// - Remark: Generated from `#/paths//v1/corporate_actions/announcements/get(getCorporateAnnouncements)`.
    func getCorporateAnnouncements(_ input: Operations.getCorporateAnnouncements.Input) async throws -> Operations.getCorporateAnnouncements.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get all accounts
    ///
    /// Retrieves all accounts found by the query'
    ///
    /// - Remark: HTTP `GET /v1/accounts`.
    /// - Remark: Generated from `#/paths//v1/accounts/get(getAllAccounts)`.
    public func getAllAccounts(
        query: Operations.getAllAccounts.Input.Query = .init(),
        headers: Operations.getAllAccounts.Input.Headers = .init()
    ) async throws -> Operations.getAllAccounts.Output {
        try await getAllAccounts(Operations.getAllAccounts.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create an account
    ///
    /// Submit an account application with KYC information. This will create a trading account for the end user. The account status may or may not be ACTIVE immediately and you will receive account status updates on the event API. 
    ///
    /// - Remark: HTTP `POST /v1/accounts`.
    /// - Remark: Generated from `#/paths//v1/accounts/post(createAccount)`.
    public func createAccount(
        headers: Operations.createAccount.Input.Headers = .init(),
        body: Operations.createAccount.Input.Body
    ) async throws -> Operations.createAccount.Output {
        try await createAccount(Operations.createAccount.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get an account by Id.
    ///
    /// You can query a specific account that you submitted to Alpaca by passing into the query the account_id associated with the account you’re retrieving.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/get(getAccount)`.
    public func getAccount(
        path: Operations.getAccount.Input.Path,
        headers: Operations.getAccount.Input.Headers = .init()
    ) async throws -> Operations.getAccount.Output {
        try await getAccount(Operations.getAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an account
    ///
    /// This operation updates account information.
    ///
    /// If all parameters are valid and updates have been made, it returns with status code 200. The response is the account model.
    ///
    /// - Remark: HTTP `PATCH /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/patch(patchAccount)`.
    public func patchAccount(
        path: Operations.patchAccount.Input.Path,
        headers: Operations.patchAccount.Input.Headers = .init(),
        body: Operations.patchAccount.Input.Body
    ) async throws -> Operations.patchAccount.Output {
        try await patchAccount(Operations.patchAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Request to close an account
    ///
    /// This operation closes an active account.
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/delete(deleteAccount)`.
    public func deleteAccount(path: Operations.deleteAccount.Input.Path) async throws -> Operations.deleteAccount.Output {
        try await deleteAccount(Operations.deleteAccount.Input(path: path))
    }
    /// Return a list of account documents.
    ///
    /// This endpoint allows you to query all the documents that belong to a certain account. You can filter by date, or type of document.
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/documents`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/get(getDocsForAccount)`.
    public func getDocsForAccount(
        path: Operations.getDocsForAccount.Input.Path,
        query: Operations.getDocsForAccount.Input.Query = .init(),
        headers: Operations.getDocsForAccount.Input.Headers = .init()
    ) async throws -> Operations.getDocsForAccount.Output {
        try await getDocsForAccount(Operations.getDocsForAccount.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Upload a document to an already existing account
    ///
    /// Upload a document to be attached to an account.
    ///
    /// Documents are binary objects whose contents are encoded in base64. Each encoded content size is limited to 10MB if you use Alpaca for KYCaaS. If you perform your own KYC there are no document size limitations.
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/documents/upload`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/upload/post(uploadDocToAccount)`.
    public func uploadDocToAccount(
        path: Operations.uploadDocToAccount.Input.Path,
        headers: Operations.uploadDocToAccount.Input.Headers = .init(),
        body: Operations.uploadDocToAccount.Input.Body
    ) async throws -> Operations.uploadDocToAccount.Output {
        try await uploadDocToAccount(Operations.uploadDocToAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Download a document file that belongs to an account.
    ///
    /// This endpoint allows you to download a document identified by the document_id passed in the header. The returned document is in PDF format.
    ///
    /// The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/documents/{document_id}/download`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/{document_id}/download/get(downloadDocFromAccount)`.
    public func downloadDocFromAccount(path: Operations.downloadDocFromAccount.Input.Path) async throws -> Operations.downloadDocFromAccount.Output {
        try await downloadDocFromAccount(Operations.downloadDocFromAccount.Input(path: path))
    }
    /// Download a document file directly
    ///
    /// The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found.
    ///
    ///
    /// - Remark: HTTP `GET /v1/documents/{document_id}`.
    /// - Remark: Generated from `#/paths//v1/documents/{document_id}/get(downloadDocumentById)`.
    public func downloadDocumentById(path: Operations.downloadDocumentById.Input.Path) async throws -> Operations.downloadDocumentById.Output {
        try await downloadDocumentById(Operations.downloadDocumentById.Input(path: path))
    }
    /// Retrieve bank relationships for an account
    ///
    /// Retrieves Bank Relationships for an account
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/recipient_banks`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/get(getRecipientBanks)`.
    public func getRecipientBanks(
        path: Operations.getRecipientBanks.Input.Path,
        query: Operations.getRecipientBanks.Input.Query = .init(),
        headers: Operations.getRecipientBanks.Input.Headers = .init()
    ) async throws -> Operations.getRecipientBanks.Output {
        try await getRecipientBanks(Operations.getRecipientBanks.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a Bank Relationship for an account
    ///
    /// If successful, retrieves Bank Relationships for an account
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/recipient_banks`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/post(createRecipientBank)`.
    public func createRecipientBank(
        path: Operations.createRecipientBank.Input.Path,
        headers: Operations.createRecipientBank.Input.Headers = .init(),
        body: Operations.createRecipientBank.Input.Body
    ) async throws -> Operations.createRecipientBank.Output {
        try await createRecipientBank(Operations.createRecipientBank.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a Bank Relationship for an account
    ///
    /// If successful, deletes Bank Relationship for an account
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/recipient_banks/{bank_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/{bank_id}/delete(deleteRecipientBank)`.
    public func deleteRecipientBank(path: Operations.deleteRecipientBank.Input.Path) async throws -> Operations.deleteRecipientBank.Output {
        try await deleteRecipientBank(Operations.deleteRecipientBank.Input(path: path))
    }
    /// Return a list of transfers for an account.
    ///
    /// You can query a list of transfers for an account.
    ///
    ///
    /// You can filter requested transfers by values such as direction and status.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/transfers`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/get(getTransfersForAccount)`.
    public func getTransfersForAccount(
        path: Operations.getTransfersForAccount.Input.Path,
        query: Operations.getTransfersForAccount.Input.Query = .init(),
        headers: Operations.getTransfersForAccount.Input.Headers = .init()
    ) async throws -> Operations.getTransfersForAccount.Output {
        try await getTransfersForAccount(Operations.getTransfersForAccount.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Request a new transfer
    ///
    /// Create a new transfer to an account to fund it.
    ///
    /// In the sandbox environment, you can instantly deposit to or withdraw from an account with a virtual money amount. In the production environment, this endpoint is used only for requesting an outgoing (withdrawal) wire transfer at this moment. For the wire transfer (in production), you need to create a bank resource first using the Bank API. For more on how to fund an account in sandbox please check out this tutorial [here](https://alpaca.markets/learn/fund-broker-api/).
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/transfers`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/post(createTransferForAccount)`.
    public func createTransferForAccount(
        path: Operations.createTransferForAccount.Input.Path,
        headers: Operations.createTransferForAccount.Input.Headers = .init(),
        body: Operations.createTransferForAccount.Input.Body
    ) async throws -> Operations.createTransferForAccount.Output {
        try await createTransferForAccount(Operations.createTransferForAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Request to close a transfer
    ///
    /// Request to close a transfer
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/transfers/{transfer_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/{transfer_id}/delete(deleteTransfer)`.
    public func deleteTransfer(
        path: Operations.deleteTransfer.Input.Path,
        headers: Operations.deleteTransfer.Input.Headers = .init()
    ) async throws -> Operations.deleteTransfer.Output {
        try await deleteTransfer(Operations.deleteTransfer.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve account activities
    ///
    /// Returns an array of Activities
    ///
    /// Notes:
    /// * Pagination is handled using the `page_token` and `page_size` parameters.
    /// * `page_token` represents the ID of the end of your current page of results.
    ///   for example if in your first response the id of the last Activiy item returned in the array was `20220203000000000::045b3b8d-c566-4bef-b741-2bf598dd6ae7`, you'd pass that value as `page_token` to get the next page of results
    ///
    /// * If specified with a `direction` of `desc`, for example, the results will end before the activity with the specified ID.
    /// * If specified with a `direction` of `asc`, results will begin with the activity immediately after the one specified.
    /// * `page_size` is the maximum number of entries to return in the response.
    /// * If `date` is not specified, the default and maximum value is 100.
    /// * If `date` is specified, the default behavior is to return all results, and there is no maximum page size.
    ///
    /// - Remark: HTTP `GET /v1/accounts/activities`.
    /// - Remark: Generated from `#/paths//v1/accounts/activities/get(getAccountActivities)`.
    public func getAccountActivities(
        query: Operations.getAccountActivities.Input.Query = .init(),
        headers: Operations.getAccountActivities.Input.Headers = .init()
    ) async throws -> Operations.getAccountActivities.Output {
        try await getAccountActivities(Operations.getAccountActivities.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieve specific account activities
    ///
    /// Retrieves an Array of Activies by type
    ///
    /// Notes:
    /// * Pagination is handled using the `page_token` and `page_size` parameters.
    /// * `page_token` represents the ID of the end of your current page of results.
    ///   for example if in your first response the id of the last Activiy item returned in the array was `20220203000000000::045b3b8d-c566-4bef-b741-2bf598dd6ae7`, you'd pass that value as `page_token` to get the next page of results
    ///
    /// * If specified with a `direction` of `desc`, for example, the results will end before the activity with the specified ID.
    /// * If specified with a `direction` of `asc`, results will begin with the activity immediately after the one specified.
    /// * `page_size` is the maximum number of entries to return in the response.
    /// * If `date` is not specified, the default and maximum value is 100.
    /// * If `date` is specified, the default behavior is to return all results, and there is no maximum page size.
    ///
    /// - Remark: HTTP `GET /v1/accounts/activities/{activity_type}`.
    /// - Remark: Generated from `#/paths//v1/accounts/activities/{activity_type}/get(getAccountActivitiesByType)`.
    public func getAccountActivitiesByType(
        path: Operations.getAccountActivitiesByType.Input.Path,
        query: Operations.getAccountActivitiesByType.Input.Query = .init(),
        headers: Operations.getAccountActivitiesByType.Input.Headers = .init()
    ) async throws -> Operations.getAccountActivitiesByType.Output {
        try await getAccountActivitiesByType(Operations.getAccountActivitiesByType.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Retrieve ACH Relationships for an account
    ///
    /// Returns a list of ACH Relationships for an account
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/ach_relationships`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/get(getAccountACHRelationships)`.
    public func getAccountACHRelationships(
        path: Operations.getAccountACHRelationships.Input.Path,
        query: Operations.getAccountACHRelationships.Input.Query = .init(),
        headers: Operations.getAccountACHRelationships.Input.Headers = .init()
    ) async throws -> Operations.getAccountACHRelationships.Output {
        try await getAccountACHRelationships(Operations.getAccountACHRelationships.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an ACH Relationship
    ///
    /// Create a new ACHRelationship for an account
    ///
    /// If successful, will return 200 code with a newly created ACH Relationship entity.
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/ach_relationships`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/post(createACHRelationshipForAccount)`.
    public func createACHRelationshipForAccount(
        path: Operations.createACHRelationshipForAccount.Input.Path,
        headers: Operations.createACHRelationshipForAccount.Input.Headers = .init(),
        body: Operations.createACHRelationshipForAccount.Input.Body
    ) async throws -> Operations.createACHRelationshipForAccount.Output {
        try await createACHRelationshipForAccount(Operations.createACHRelationshipForAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an existing ACH relationship
    ///
    /// Delete an existing ACH relationship for an account
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/delete(deleteACHRelationshipFromAccount)`.
    public func deleteACHRelationshipFromAccount(
        path: Operations.deleteACHRelationshipFromAccount.Input.Path,
        headers: Operations.deleteACHRelationshipFromAccount.Input.Headers = .init()
    ) async throws -> Operations.deleteACHRelationshipFromAccount.Output {
        try await deleteACHRelationshipFromAccount(Operations.deleteACHRelationshipFromAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve trading details for an account.
    ///
    /// As a broker you can view more trading details about your users.
    ///
    /// The response is a Trading Account model.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/account`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/account/get(getTradingAccount)`.
    public func getTradingAccount(
        path: Operations.getTradingAccount.Input.Path,
        headers: Operations.getTradingAccount.Input.Headers = .init()
    ) async throws -> Operations.getTradingAccount.Output {
        try await getTradingAccount(Operations.getTradingAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// List open positions for an account
    ///
    /// List open positions for an account
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/positions`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/get(getPositionsForAccount)`.
    public func getPositionsForAccount(
        path: Operations.getPositionsForAccount.Input.Path,
        headers: Operations.getPositionsForAccount.Input.Headers = .init()
    ) async throws -> Operations.getPositionsForAccount.Output {
        try await getPositionsForAccount(Operations.getPositionsForAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Close All Positions for an Account
    ///
    /// Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/positions`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/delete(closeAllPositionsForAccount)`.
    public func closeAllPositionsForAccount(
        path: Operations.closeAllPositionsForAccount.Input.Path,
        query: Operations.closeAllPositionsForAccount.Input.Query = .init(),
        headers: Operations.closeAllPositionsForAccount.Input.Headers = .init()
    ) async throws -> Operations.closeAllPositionsForAccount.Output {
        try await closeAllPositionsForAccount(Operations.closeAllPositionsForAccount.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an Open Position for account by Symbol or AssetId
    ///
    /// Retrieves the account’s open position for the given symbol or asset_id.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/get(getPositionsForAccountBySymbol)`.
    public func getPositionsForAccountBySymbol(
        path: Operations.getPositionsForAccountBySymbol.Input.Path,
        headers: Operations.getPositionsForAccountBySymbol.Input.Headers = .init()
    ) async throws -> Operations.getPositionsForAccountBySymbol.Output {
        try await getPositionsForAccountBySymbol(Operations.getPositionsForAccountBySymbol.Input(
            path: path,
            headers: headers
        ))
    }
    /// Close a Position for an Account
    ///
    /// Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/delete(closePositionForAccountBySymbol)`.
    public func closePositionForAccountBySymbol(
        path: Operations.closePositionForAccountBySymbol.Input.Path,
        query: Operations.closePositionForAccountBySymbol.Input.Query = .init(),
        headers: Operations.closePositionForAccountBySymbol.Input.Headers = .init()
    ) async throws -> Operations.closePositionForAccountBySymbol.Output {
        try await closePositionForAccountBySymbol(Operations.closePositionForAccountBySymbol.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a single order for the given order_id.
    ///
    /// Retrieves a single order for the given order_id.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/get(getOrderForAccount)`.
    public func getOrderForAccount(
        path: Operations.getOrderForAccount.Input.Path,
        headers: Operations.getOrderForAccount.Input.Headers = .init()
    ) async throws -> Operations.getOrderForAccount.Output {
        try await getOrderForAccount(Operations.getOrderForAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Replaces a single order with updated parameters
    ///
    /// Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.
    ///
    /// A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel found [here in the market data api](https://alpaca.markets/docs/api-references/market-data-api/#order-updates).
    ///
    /// While an order is being replaced, the account's buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.
    ///
    /// - Remark: HTTP `PATCH /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/patch(replaceOrderForAccount)`.
    public func replaceOrderForAccount(
        path: Operations.replaceOrderForAccount.Input.Path,
        headers: Operations.replaceOrderForAccount.Input.Headers = .init(),
        body: Operations.replaceOrderForAccount.Input.Body
    ) async throws -> Operations.replaceOrderForAccount.Output {
        try await replaceOrderForAccount(Operations.replaceOrderForAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Attempts to cancel an open order.
    ///
    /// Attempts to cancel an open order. If the order is no longer cancelable (for example if the status is "filled"), the server will respond with status 422, and reject the request.
    ///
    /// Upon acceptance of the cancel request, it returns status 204.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/delete(deleteOrderForAccount)`.
    public func deleteOrderForAccount(
        path: Operations.deleteOrderForAccount.Input.Path,
        headers: Operations.deleteOrderForAccount.Input.Headers = .init()
    ) async throws -> Operations.deleteOrderForAccount.Output {
        try await deleteOrderForAccount(Operations.deleteOrderForAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// Endpoint defaults to open orders if no parameters are provided.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/get(getAllOrdersForAccount)`.
    public func getAllOrdersForAccount(
        path: Operations.getAllOrdersForAccount.Input.Path,
        query: Operations.getAllOrdersForAccount.Input.Query = .init(),
        headers: Operations.getAllOrdersForAccount.Input.Headers = .init()
    ) async throws -> Operations.getAllOrdersForAccount.Output {
        try await getAllOrdersForAccount(Operations.getAllOrdersForAccount.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an order for an account.
    ///
    /// Create an order for an account.
    ///
    /// - Remark: HTTP `POST /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/post(createOrderForAccount)`.
    public func createOrderForAccount(
        path: Operations.createOrderForAccount.Input.Path,
        headers: Operations.createOrderForAccount.Input.Headers = .init(),
        body: Operations.createOrderForAccount.Input.Body
    ) async throws -> Operations.createOrderForAccount.Output {
        try await createOrderForAccount(Operations.createOrderForAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
    ///
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/delete(deleteAllOrdersForAccount)`.
    public func deleteAllOrdersForAccount(
        path: Operations.deleteAllOrdersForAccount.Input.Path,
        headers: Operations.deleteAllOrdersForAccount.Input.Headers = .init()
    ) async throws -> Operations.deleteAllOrdersForAccount.Output {
        try await deleteAllOrdersForAccount(Operations.deleteAllOrdersForAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve all assets
    ///
    /// Returns all assets
    ///
    /// - Remark: HTTP `GET /v1/assets`.
    /// - Remark: Generated from `#/paths//v1/assets/get(getAssets)`.
    public func getAssets(
        query: Operations.getAssets.Input.Query = .init(),
        headers: Operations.getAssets.Input.Headers = .init()
    ) async throws -> Operations.getAssets.Output {
        try await getAssets(Operations.getAssets.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieve an asset by UUID
    ///
    /// Returns the requested asset, if found
    ///
    /// - Remark: HTTP `GET /v1/assets/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/assets/{symbol_or_asset_id}/get(getAssetBySymbolOrId)`.
    public func getAssetBySymbolOrId(
        path: Operations.getAssetBySymbolOrId.Input.Path,
        headers: Operations.getAssetBySymbolOrId.Input.Headers = .init()
    ) async throws -> Operations.getAssetBySymbolOrId.Output {
        try await getAssetBySymbolOrId(Operations.getAssetBySymbolOrId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Query market calendar
    ///
    /// The calendar API serves the full list of market days from 1970 to 2029. It can also be queried by specifying a start and/or end time to narrow down the results. In addition to the dates, the response also contains the specific open and close times for the market days, taking into account early closures.
    ///
    /// - Remark: HTTP `GET /v1/calendar`.
    /// - Remark: Generated from `#/paths//v1/calendar/get(queryMarketCalendar)`.
    public func queryMarketCalendar(
        query: Operations.queryMarketCalendar.Input.Query = .init(),
        headers: Operations.queryMarketCalendar.Input.Headers = .init()
    ) async throws -> Operations.queryMarketCalendar.Output {
        try await queryMarketCalendar(Operations.queryMarketCalendar.Input(
            query: query,
            headers: headers
        ))
    }
    /// Query market clock
    ///
    /// The Clock API serves the current market timestamp, whether or not the market is currently open, as well as the times of the next market open and close.
    ///
    /// - Remark: HTTP `GET /v1/clock`.
    /// - Remark: Generated from `#/paths//v1/clock/get(queryMarketClock)`.
    public func queryMarketClock(headers: Operations.queryMarketClock.Input.Headers = .init()) async throws -> Operations.queryMarketClock.Output {
        try await queryMarketClock(Operations.queryMarketClock.Input(headers: headers))
    }
    /// Subscribe to account status events (SSE).
    ///
    /// Events API provide event push as well as historical queries via SSE (server sent events).
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    ///
    /// - Remark: HTTP `GET /v1/events/accounts/status`.
    /// - Remark: Generated from `#/paths//v1/events/accounts/status/get(suscribeToAccountStatusSSE)`.
    public func suscribeToAccountStatusSSE(
        query: Operations.suscribeToAccountStatusSSE.Input.Query = .init(),
        headers: Operations.suscribeToAccountStatusSSE.Input.Headers = .init()
    ) async throws -> Operations.suscribeToAccountStatusSSE.Output {
        try await suscribeToAccountStatusSSE(Operations.suscribeToAccountStatusSSE.Input(
            query: query,
            headers: headers
        ))
    }
    /// Subscribe to journal events (SSE).
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to journal status updates as they get processed by our backoffice.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/journals/status`.
    /// - Remark: Generated from `#/paths//v1/events/journals/status/get(subscribeToJournalStatusSSE)`.
    public func subscribeToJournalStatusSSE(
        query: Operations.subscribeToJournalStatusSSE.Input.Query = .init(),
        headers: Operations.subscribeToJournalStatusSSE.Input.Headers = .init()
    ) async throws -> Operations.subscribeToJournalStatusSSE.Output {
        try await subscribeToJournalStatusSSE(Operations.subscribeToJournalStatusSSE.Input(
            query: query,
            headers: headers
        ))
    }
    /// Subscribe to Transfer Events (SSE)
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to transfer status updates as they get processed by our backoffice, for both end-user and firm accounts.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/transfers/status`.
    /// - Remark: Generated from `#/paths//v1/events/transfers/status/get(subscribeToTransferStatusSSE)`.
    public func subscribeToTransferStatusSSE(
        query: Operations.subscribeToTransferStatusSSE.Input.Query = .init(),
        headers: Operations.subscribeToTransferStatusSSE.Input.Headers = .init()
    ) async throws -> Operations.subscribeToTransferStatusSSE.Output {
        try await subscribeToTransferStatusSSE(Operations.subscribeToTransferStatusSSE.Input(
            query: query,
            headers: headers
        ))
    }
    /// Subscribe to Trade Events (SSE)
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to events related to trade updates. Most market trades sent during market hours are filled instantly; you can listen to limit order updates through this endpoint.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/trades`.
    /// - Remark: Generated from `#/paths//v1/events/trades/get(subscribeToTradeSSE)`.
    public func subscribeToTradeSSE(
        query: Operations.subscribeToTradeSSE.Input.Query = .init(),
        headers: Operations.subscribeToTradeSSE.Input.Headers = .init()
    ) async throws -> Operations.subscribeToTradeSSE.Output {
        try await subscribeToTradeSSE(Operations.subscribeToTradeSSE.Input(
            query: query,
            headers: headers
        ))
    }
    /// Return a list of requested journals.
    ///
    /// Returns an array of journal objects.
    ///
    /// - Remark: HTTP `GET /v1/journals`.
    /// - Remark: Generated from `#/paths//v1/journals/get(getAllJournals)`.
    public func getAllJournals(
        query: Operations.getAllJournals.Input.Query = .init(),
        headers: Operations.getAllJournals.Input.Headers = .init()
    ) async throws -> Operations.getAllJournals.Output {
        try await getAllJournals(Operations.getAllJournals.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a Journal.
    ///
    /// A journal can be JNLC (move cash) or JNLS (move shares), dictated by `entry_type`. Generally, journal requests are subject to approval and starts from the `pending` status. The status changes are propagated through the Event API. Under certain conditions agreed for the partner, such journal transactions that meet the criteria are executed right away.
    ///
    ///
    /// - Remark: HTTP `POST /v1/journals`.
    /// - Remark: Generated from `#/paths//v1/journals/post(createJournal)`.
    public func createJournal(
        headers: Operations.createJournal.Input.Headers = .init(),
        body: Operations.createJournal.Input.Body
    ) async throws -> Operations.createJournal.Output {
        try await createJournal(Operations.createJournal.Input(
            headers: headers,
            body: body
        ))
    }
    /// Cancel a pending journal.
    ///
    /// You can only delete a journal if the journal is still in a pending state, if a journal is executed you will not be able to delete. The alternative is to create a mirror journal entry to reverse the flow of funds.
    ///
    /// - Remark: HTTP `DELETE /v1/journals/{journal_id}`.
    /// - Remark: Generated from `#/paths//v1/journals/{journal_id}/delete(deleteJournalById)`.
    public func deleteJournalById(path: Operations.deleteJournalById.Input.Path) async throws -> Operations.deleteJournalById.Output {
        try await deleteJournalById(Operations.deleteJournalById.Input(path: path))
    }
    /// Create a Batch Journal Transaction (One-to-Many)
    ///
    /// You can create a batch of journal requests by using this endpoint. This is enabled on JNLC type Journals for now only.
    ///
    /// Every single request must be valid for the entire batch operation to succeed.
    ///
    /// In the case of a successful request, the response will contain an array of journal objects with an extra attribute error_message in the case when a specific account fails to receive a journal.
    ///
    /// - Remark: HTTP `POST /v1/journals/batch`.
    /// - Remark: Generated from `#/paths//v1/journals/batch/post(createBatchJournal)`.
    public func createBatchJournal(
        headers: Operations.createBatchJournal.Input.Headers = .init(),
        body: Operations.createBatchJournal.Input.Body
    ) async throws -> Operations.createBatchJournal.Output {
        try await createBatchJournal(Operations.createBatchJournal.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get an OAuth client
    ///
    /// The endpoint returns the details of OAuth client to display in the authorization page.
    ///
    ///
    /// - Remark: HTTP `GET /v1/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//v1/oauth/clients/{client_id}/get(getOAuthClient)`.
    public func getOAuthClient(
        path: Operations.getOAuthClient.Input.Path,
        query: Operations.getOAuthClient.Input.Query = .init(),
        headers: Operations.getOAuthClient.Input.Headers = .init()
    ) async throws -> Operations.getOAuthClient.Output {
        try await getOAuthClient(Operations.getOAuthClient.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Issue an OAuth token.
    ///
    /// The operation issues an OAuth code which can be used in the OAuth code flow.
    ///
    ///
    /// - Remark: HTTP `POST /v1/oauth/token`.
    /// - Remark: Generated from `#/paths//v1/oauth/token/post(issueOAuthToken)`.
    public func issueOAuthToken(
        headers: Operations.issueOAuthToken.Input.Headers = .init(),
        body: Operations.issueOAuthToken.Input.Body
    ) async throws -> Operations.issueOAuthToken.Output {
        try await issueOAuthToken(Operations.issueOAuthToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// Authorize an OAuth Token
    ///
    /// The operation issues an OAuth code which can be used in the OAuth code flow.
    ///
    ///
    /// - Remark: HTTP `POST /v1/oauth/authorize`.
    /// - Remark: Generated from `#/paths//v1/oauth/authorize/post(authorizeOAuthToken)`.
    public func authorizeOAuthToken(
        headers: Operations.authorizeOAuthToken.Input.Headers = .init(),
        body: Operations.authorizeOAuthToken.Input.Body
    ) async throws -> Operations.authorizeOAuthToken.Output {
        try await authorizeOAuthToken(Operations.authorizeOAuthToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve all watchlists
    ///
    /// Fetch a list of all watchlists currently in an account.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/watchlists`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/get(getAllWatchlistsForAccount)`.
    public func getAllWatchlistsForAccount(
        path: Operations.getAllWatchlistsForAccount.Input.Path,
        headers: Operations.getAllWatchlistsForAccount.Input.Headers = .init()
    ) async throws -> Operations.getAllWatchlistsForAccount.Output {
        try await getAllWatchlistsForAccount(Operations.getAllWatchlistsForAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a new watchlist
    ///
    /// Returns the watchlist object
    ///
    /// - Remark: HTTP `POST /v1/trading/accounts/{account_id}/watchlists`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/post(createWatchlistForAccount)`.
    public func createWatchlistForAccount(
        path: Operations.createWatchlistForAccount.Input.Path,
        headers: Operations.createWatchlistForAccount.Input.Headers = .init(),
        body: Operations.createWatchlistForAccount.Input.Body? = nil
    ) async throws -> Operations.createWatchlistForAccount.Output {
        try await createWatchlistForAccount(Operations.createWatchlistForAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Manage watchlists
    ///
    /// Fetch a single watchlist by identifier.
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/get(getWatchlistForAccountById)`.
    public func getWatchlistForAccountById(
        path: Operations.getWatchlistForAccountById.Input.Path,
        headers: Operations.getWatchlistForAccountById.Input.Headers = .init()
    ) async throws -> Operations.getWatchlistForAccountById.Output {
        try await getWatchlistForAccountById(Operations.getWatchlistForAccountById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an existing watchlist
    ///
    /// Replace entirely the set of securities contained in the watchlist while optionally renaming it. Destructive operation.
    ///
    /// - Remark: HTTP `PUT /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/put(replaceWatchlistForAccountById)`.
    public func replaceWatchlistForAccountById(
        path: Operations.replaceWatchlistForAccountById.Input.Path,
        headers: Operations.replaceWatchlistForAccountById.Input.Headers = .init(),
        body: Operations.replaceWatchlistForAccountById.Input.Body? = nil
    ) async throws -> Operations.replaceWatchlistForAccountById.Output {
        try await replaceWatchlistForAccountById(Operations.replaceWatchlistForAccountById.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a watchlist
    ///
    /// Irrevocably delete a watchlist.
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/delete(deleteWatchlistFromAccountById)`.
    public func deleteWatchlistFromAccountById(path: Operations.deleteWatchlistFromAccountById.Input.Path) async throws -> Operations.deleteWatchlistFromAccountById.Output {
        try await deleteWatchlistFromAccountById(Operations.deleteWatchlistFromAccountById.Input(path: path))
    }
    /// Retrieving Announcements
    ///
    /// This enables searching for an array of corporate action announcements based on criteria.
    ///
    /// - Remark: HTTP `GET /v1/corporate_actions/announcements`.
    /// - Remark: Generated from `#/paths//v1/corporate_actions/announcements/get(getCorporateAnnouncements)`.
    public func getCorporateAnnouncements(
        query: Operations.getCorporateAnnouncements.Input.Query,
        headers: Operations.getCorporateAnnouncements.Input.Headers = .init()
    ) async throws -> Operations.getCorporateAnnouncements.Output {
        try await getCorporateAnnouncements(Operations.getCorporateAnnouncements.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Sandbox endpoint
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://broker-api.sandbox.alpaca.markets",
            variables: []
        )
    }
    /// Production endpoint
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://broker-api.alpaca.markets",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Represents high level account info. Used when returning entire account information would not be useful like the getAllAccounts operation
        ///
        /// - Remark: Generated from `#/components/schemas/Account`.
        public struct Account: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Account/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/account_number`.
            public var account_number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/status`.
            public var status: Components.Schemas.AccountStatus
            /// - Remark: Generated from `#/components/schemas/Account/crypto_status`.
            public var crypto_status: Components.Schemas.AccountStatus?
            /// Always "USD"
            ///
            /// - Remark: Generated from `#/components/schemas/Account/currency`.
            public var currency: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Account/last_equity`.
            public var last_equity: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/kyc_results`.
            public var kyc_results: Components.Schemas.KYCResult?
            /// - Remark: Generated from `#/components/schemas/Account/account_type`.
            public var account_type: Components.Schemas.AccountType?
            /// Creates a new `Account`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - account_number:
            ///   - status:
            ///   - crypto_status:
            ///   - currency: Always "USD"
            ///   - created_at:
            ///   - last_equity:
            ///   - kyc_results:
            ///   - account_type:
            public init(
                id: Swift.String,
                account_number: Swift.String? = nil,
                status: Components.Schemas.AccountStatus,
                crypto_status: Components.Schemas.AccountStatus? = nil,
                currency: Swift.String,
                created_at: Foundation.Date,
                last_equity: Swift.String,
                kyc_results: Components.Schemas.KYCResult? = nil,
                account_type: Components.Schemas.AccountType? = nil
            ) {
                self.id = id
                self.account_number = account_number
                self.status = status
                self.crypto_status = crypto_status
                self.currency = currency
                self.created_at = created_at
                self.last_equity = last_equity
                self.kyc_results = kyc_results
                self.account_type = account_type
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account_number
                case status
                case crypto_status
                case currency
                case created_at
                case last_equity
                case kyc_results
                case account_type
            }
        }
        /// This is an extended version of the Account model found [in the trading api](https://alpaca.markets/docs/api-references/trading-api/account/#account-entity).
        ///
        /// Extra data has been added that would be useful for brokers.
        ///
        /// - Remark: Generated from `#/components/schemas/TradeAccount`.
        public struct TradeAccount: Codable, Hashable, Sendable {
            /// The account ID
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/id`.
            public var id: Swift.String
            /// The account number
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/account_number`.
            public var account_number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TradeAccount/status`.
            public var status: Components.Schemas.AccountStatus
            /// Always USD
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/currency`.
            public var currency: Swift.String
            /// Current available cash buying power. If multiplier = 2 then buying_power = max(equity-initial_margin(0) * 2). If multiplier = 1 then buying_power = cash.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/buying_power`.
            public var buying_power: Swift.String
            /// User’s buying power under Regulation T (excess equity - (equity - margin value) - * margin multiplier)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/regt_buying_power`.
            public var regt_buying_power: Swift.String?
            /// Your buying power for day trades (continuously updated value)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/daytrading_buying_power`.
            public var daytrading_buying_power: Swift.String?
            /// Cash balance
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/cash`.
            public var cash: Swift.String
            /// Cash available for withdrawl
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/cash_withdrawable`.
            public var cash_withdrawable: Swift.String?
            /// Cash available for transfer (JNLC)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/cash_transferable`.
            public var cash_transferable: Swift.String?
            /// Cash pending transfer out
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/pending_transfer_out`.
            public var pending_transfer_out: Swift.String?
            /// Total value of cash + holding positions. (This field is deprecated. It is equivalent to the equity field.)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/portfolio_value`.
            public var portfolio_value: Swift.String?
            /// Whether account is flagged as pattern day trader or not
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/pattern_day_trader`.
            public var pattern_day_trader: Swift.Bool?
            /// If true, the account is not allowed to place orders.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/trading_blocked`.
            public var trading_blocked: Swift.Bool?
            /// If true, the account is not allowed to request money transfers.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/transfers_blocked`.
            public var transfers_blocked: Swift.Bool?
            /// If true, the account activity by user is prohibited.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/account_blocked`.
            public var account_blocked: Swift.Bool?
            /// Timestamp this account was created at
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/created_at`.
            public var created_at: Swift.String
            /// If true, the account is not allowed to place orders.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/trade_suspended_by_user`.
            public var trade_suspended_by_user: Swift.Bool?
            /// “1”, “2”, "3", or "4"
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/multiplier`.
            public var multiplier: Swift.String?
            /// Flag to denote whether or not the account is permitted to short
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/shorting_enabled`.
            public var shorting_enabled: Swift.Bool?
            /// cash + long_market_value + short_market_value
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/equity`.
            public var equity: Swift.String
            /// Equity as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_equity`.
            public var last_equity: Swift.String
            /// Real-time MtM value of all long positions held in the account
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/long_market_value`.
            public var long_market_value: Swift.String?
            /// Real-time MtM value of all short positions held in the account
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/short_market_value`.
            public var short_market_value: Swift.String?
            /// Reg T initial margin requirement (continuously updated value)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/initial_margin`.
            public var initial_margin: Swift.String?
            /// Maintenance margin requirement (continuously updated value)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/maintenance_margin`.
            public var maintenance_margin: Swift.String?
            /// Maintenance margin requirement on the previous trading day
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_maintenance_margin`.
            public var last_maintenance_margin: Swift.String?
            /// Value of Special Memorandum Account (will be used at a later date to provide additional buying_power)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/sma`.
            public var sma: Swift.String?
            /// The current number of daytrades that have been made in the last 5 trading days (inclusive of today)
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/daytrade_count`.
            public var daytrade_count: Swift.Int?
            /// Previous sessions close time
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/previous_close`.
            public var previous_close: Swift.String?
            /// Value of all long positions as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_long_market_value`.
            public var last_long_market_value: Swift.String?
            /// Value of all short positions as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_short_market_value`.
            public var last_short_market_value: Swift.String?
            /// Value of all cash as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_cash`.
            public var last_cash: Swift.String?
            /// Value of Reg T margin as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_initial_margin`.
            public var last_initial_margin: Swift.String?
            /// Value of Reg T buying power as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_regt_buying_power`.
            public var last_regt_buying_power: Swift.String?
            /// Value of daytrading buying power as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_daytrading_buying_power`.
            public var last_daytrading_buying_power: Swift.String?
            /// Value of buying_power as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_buying_power`.
            public var last_buying_power: Swift.String?
            /// Value of daytrade count as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/last_daytrade_count`.
            public var last_daytrade_count: Swift.Int?
            /// Clearing broker
            ///
            /// - Remark: Generated from `#/components/schemas/TradeAccount/clearing_broker`.
            public var clearing_broker: Swift.String?
            /// Creates a new `TradeAccount`.
            ///
            /// - Parameters:
            ///   - id: The account ID
            ///   - account_number: The account number
            ///   - status:
            ///   - currency: Always USD
            ///   - buying_power: Current available cash buying power. If multiplier = 2 then buying_power = max(equity-initial_margin(0) * 2). If multiplier = 1 then buying_power = cash.
            ///   - regt_buying_power: User’s buying power under Regulation T (excess equity - (equity - margin value) - * margin multiplier)
            ///   - daytrading_buying_power: Your buying power for day trades (continuously updated value)
            ///   - cash: Cash balance
            ///   - cash_withdrawable: Cash available for withdrawl
            ///   - cash_transferable: Cash available for transfer (JNLC)
            ///   - pending_transfer_out: Cash pending transfer out
            ///   - portfolio_value: Total value of cash + holding positions. (This field is deprecated. It is equivalent to the equity field.)
            ///   - pattern_day_trader: Whether account is flagged as pattern day trader or not
            ///   - trading_blocked: If true, the account is not allowed to place orders.
            ///   - transfers_blocked: If true, the account is not allowed to request money transfers.
            ///   - account_blocked: If true, the account activity by user is prohibited.
            ///   - created_at: Timestamp this account was created at
            ///   - trade_suspended_by_user: If true, the account is not allowed to place orders.
            ///   - multiplier: “1”, “2”, "3", or "4"
            ///   - shorting_enabled: Flag to denote whether or not the account is permitted to short
            ///   - equity: cash + long_market_value + short_market_value
            ///   - last_equity: Equity as of previous trading day at 16:00:00 ET
            ///   - long_market_value: Real-time MtM value of all long positions held in the account
            ///   - short_market_value: Real-time MtM value of all short positions held in the account
            ///   - initial_margin: Reg T initial margin requirement (continuously updated value)
            ///   - maintenance_margin: Maintenance margin requirement (continuously updated value)
            ///   - last_maintenance_margin: Maintenance margin requirement on the previous trading day
            ///   - sma: Value of Special Memorandum Account (will be used at a later date to provide additional buying_power)
            ///   - daytrade_count: The current number of daytrades that have been made in the last 5 trading days (inclusive of today)
            ///   - previous_close: Previous sessions close time
            ///   - last_long_market_value: Value of all long positions as of previous trading day at 16:00:00 ET
            ///   - last_short_market_value: Value of all short positions as of previous trading day at 16:00:00 ET
            ///   - last_cash: Value of all cash as of previous trading day at 16:00:00 ET
            ///   - last_initial_margin: Value of Reg T margin as of previous trading day at 16:00:00 ET
            ///   - last_regt_buying_power: Value of Reg T buying power as of previous trading day at 16:00:00 ET
            ///   - last_daytrading_buying_power: Value of daytrading buying power as of previous trading day at 16:00:00 ET
            ///   - last_buying_power: Value of buying_power as of previous trading day at 16:00:00 ET
            ///   - last_daytrade_count: Value of daytrade count as of previous trading day at 16:00:00 ET
            ///   - clearing_broker: Clearing broker
            public init(
                id: Swift.String,
                account_number: Swift.String? = nil,
                status: Components.Schemas.AccountStatus,
                currency: Swift.String,
                buying_power: Swift.String,
                regt_buying_power: Swift.String? = nil,
                daytrading_buying_power: Swift.String? = nil,
                cash: Swift.String,
                cash_withdrawable: Swift.String? = nil,
                cash_transferable: Swift.String? = nil,
                pending_transfer_out: Swift.String? = nil,
                portfolio_value: Swift.String? = nil,
                pattern_day_trader: Swift.Bool? = nil,
                trading_blocked: Swift.Bool? = nil,
                transfers_blocked: Swift.Bool? = nil,
                account_blocked: Swift.Bool? = nil,
                created_at: Swift.String,
                trade_suspended_by_user: Swift.Bool? = nil,
                multiplier: Swift.String? = nil,
                shorting_enabled: Swift.Bool? = nil,
                equity: Swift.String,
                last_equity: Swift.String,
                long_market_value: Swift.String? = nil,
                short_market_value: Swift.String? = nil,
                initial_margin: Swift.String? = nil,
                maintenance_margin: Swift.String? = nil,
                last_maintenance_margin: Swift.String? = nil,
                sma: Swift.String? = nil,
                daytrade_count: Swift.Int? = nil,
                previous_close: Swift.String? = nil,
                last_long_market_value: Swift.String? = nil,
                last_short_market_value: Swift.String? = nil,
                last_cash: Swift.String? = nil,
                last_initial_margin: Swift.String? = nil,
                last_regt_buying_power: Swift.String? = nil,
                last_daytrading_buying_power: Swift.String? = nil,
                last_buying_power: Swift.String? = nil,
                last_daytrade_count: Swift.Int? = nil,
                clearing_broker: Swift.String? = nil
            ) {
                self.id = id
                self.account_number = account_number
                self.status = status
                self.currency = currency
                self.buying_power = buying_power
                self.regt_buying_power = regt_buying_power
                self.daytrading_buying_power = daytrading_buying_power
                self.cash = cash
                self.cash_withdrawable = cash_withdrawable
                self.cash_transferable = cash_transferable
                self.pending_transfer_out = pending_transfer_out
                self.portfolio_value = portfolio_value
                self.pattern_day_trader = pattern_day_trader
                self.trading_blocked = trading_blocked
                self.transfers_blocked = transfers_blocked
                self.account_blocked = account_blocked
                self.created_at = created_at
                self.trade_suspended_by_user = trade_suspended_by_user
                self.multiplier = multiplier
                self.shorting_enabled = shorting_enabled
                self.equity = equity
                self.last_equity = last_equity
                self.long_market_value = long_market_value
                self.short_market_value = short_market_value
                self.initial_margin = initial_margin
                self.maintenance_margin = maintenance_margin
                self.last_maintenance_margin = last_maintenance_margin
                self.sma = sma
                self.daytrade_count = daytrade_count
                self.previous_close = previous_close
                self.last_long_market_value = last_long_market_value
                self.last_short_market_value = last_short_market_value
                self.last_cash = last_cash
                self.last_initial_margin = last_initial_margin
                self.last_regt_buying_power = last_regt_buying_power
                self.last_daytrading_buying_power = last_daytrading_buying_power
                self.last_buying_power = last_buying_power
                self.last_daytrade_count = last_daytrade_count
                self.clearing_broker = clearing_broker
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account_number
                case status
                case currency
                case buying_power
                case regt_buying_power
                case daytrading_buying_power
                case cash
                case cash_withdrawable
                case cash_transferable
                case pending_transfer_out
                case portfolio_value
                case pattern_day_trader
                case trading_blocked
                case transfers_blocked
                case account_blocked
                case created_at
                case trade_suspended_by_user
                case multiplier
                case shorting_enabled
                case equity
                case last_equity
                case long_market_value
                case short_market_value
                case initial_margin
                case maintenance_margin
                case last_maintenance_margin
                case sma
                case daytrade_count
                case previous_close
                case last_long_market_value
                case last_short_market_value
                case last_cash
                case last_initial_margin
                case last_regt_buying_power
                case last_daytrading_buying_power
                case last_buying_power
                case last_daytrade_count
                case clearing_broker
            }
        }
        /// Designates the current status of this account
        ///
        /// Possible Values:
        /// - **ONBOARDING**
        /// An application is expected for this user, but has not been submitted yet.
        /// - **SUBMITTED**
        /// The application has been submitted and in process.
        /// - **RESUBMITTED**
        /// Resubmitted is used to display when request has been re-submitted to Apex after account update
        /// - **SUBMISSION_FAILED**
        /// Used to display if failure on submission
        /// - **ACTION_REQUIRED**
        /// The application requires manual action.
        /// - **EDITED**
        /// Application was edited (e.g. to match info from uploaded docs). This is a transient status.
        /// - **ACCOUNT_UPDATED**
        /// Used to display when Account has been modified by user
        /// - **APPROVAL_PENDING**
        /// Initial value. The application approval process is in process.
        /// - **REAPPROVAL_PENDING**
        /// This is a transient status used to display once apex approves a re-submission
        /// - **SIGNED_UP**
        /// Users who were directed to and competed the [first stage](https://app.alpaca.markets/signup) of v2 registration
        /// - **KYC_SUBMITTED**
        /// Users that have had their KYC submitted to the routed KYC Provider
        /// - **LIMITED**
        /// Limited Users that pass KYC but are missing financial_information and employment_details
        /// - **AML_REVIEW**
        /// Users that pass KYC but from a restricted/high risk country and need manual AML approval
        /// - **APPROVED**
        /// The account application has been approved, and waiting to be ACTIVE
        /// - **REJECTED**
        /// The account application is rejected for some reason
        /// - **ACTIVE**
        /// The account is fully active. Trading and funding are processed under this status.
        /// - **DISABLED**
        /// The account is disabled after ACTIVE status.
        /// - **DISABLE_PENDING**
        /// DisablePending is used for accounts which requested to be disabled, but have not been processed yet.
        /// - **ACCOUNT_CLOSED**
        /// The account is closed.
        /// - **PAPER_ONLY**
        /// Used to display when only paper trading is allowed for this account
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AccountStatus`.
        @frozen public enum AccountStatus: String, Codable, Hashable, Sendable {
            case ONBOARDING = "ONBOARDING"
            case SUBMITTED = "SUBMITTED"
            case RESUBMITTED = "RESUBMITTED"
            case SUBMISSION_FAILED = "SUBMISSION_FAILED"
            case ACTION_REQUIRED = "ACTION_REQUIRED"
            case EDITED = "EDITED"
            case ACCOUNT_UPDATED = "ACCOUNT_UPDATED"
            case APPROVAL_PENDING = "APPROVAL_PENDING"
            case REAPPROVAL_PENDING = "REAPPROVAL_PENDING"
            case SIGNED_UP = "SIGNED_UP"
            case KYC_SUBMITTED = "KYC_SUBMITTED"
            case LIMITED = "LIMITED"
            case AML_REVIEW = "AML_REVIEW"
            case APPROVED = "APPROVED"
            case REJECTED = "REJECTED"
            case ACTIVE = "ACTIVE"
            case DISABLED = "DISABLED"
            case DISABLE_PENDING = "DISABLE_PENDING"
            case ACCOUNT_CLOSED = "ACCOUNT_CLOSED"
            case PAPER_ONLY = "PAPER_ONLY"
        }
        /// Possible values are:
        ///
        /// - trading
        /// - custodial
        /// - donor_advised
        ///
        /// - Remark: Generated from `#/components/schemas/AccountType`.
        @frozen public enum AccountType: String, Codable, Hashable, Sendable {
            case trading = "trading"
            case custodial = "custodial"
            case donor_advised = "donor_advised"
        }
        /// Represents an account with all data available. If your api response is missing some of these fields, there is a good chance you are using a route that returns `Account` instances instead of these.
        ///
        /// - Remark: Generated from `#/components/schemas/AccountExtended`.
        public struct AccountExtended: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountExtended/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountExtended/account_number`.
            public var account_number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/status`.
            public var status: Components.Schemas.AccountStatus
            /// - Remark: Generated from `#/components/schemas/AccountExtended/crypto_status`.
            public var crypto_status: Components.Schemas.AccountStatus?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/kyc_result`.
            public var kyc_result: Components.Schemas.KYCResult?
            /// Always "USD"
            ///
            /// - Remark: Generated from `#/components/schemas/AccountExtended/currency`.
            public var currency: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountExtended/last_equity`.
            public var last_equity: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountExtended/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/AccountExtended/contact`.
            public var contact: Components.Schemas.Contact?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/identity`.
            public var identity: Components.Schemas.Identity?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/disclosures`.
            public var disclosures: Components.Schemas.Disclosures?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/agreements`.
            public var agreements: [Components.Schemas.Agreement]?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/documents`.
            public var documents: [Components.Schemas.ApplicationDocument]?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/trusted_contact`.
            public var trusted_contact: Components.Schemas.TrustedContact?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/account_name`.
            public var account_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/account_type`.
            public var account_type: Components.Schemas.AccountType
            /// "UGMA" or "UTMA" only used when account_type is "custodial"
            ///
            /// - Remark: Generated from `#/components/schemas/AccountExtended/custodial_account_type`.
            @frozen public enum custodial_account_typePayload: String, Codable, Hashable, Sendable {
                case UTMA = "UTMA"
                case UGMA = "UGMA"
            }
            /// "UGMA" or "UTMA" only used when account_type is "custodial"
            ///
            /// - Remark: Generated from `#/components/schemas/AccountExtended/custodial_account_type`.
            public var custodial_account_type: Components.Schemas.AccountExtended.custodial_account_typePayload?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/minor_identity`.
            public var minor_identity: Components.Schemas.CustodialAccountMinorIdentity?
            /// - Remark: Generated from `#/components/schemas/AccountExtended/trading_configurations`.
            public var trading_configurations: Components.Schemas.AccountConfigurations?
            /// Creates a new `AccountExtended`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - account_number:
            ///   - status:
            ///   - crypto_status:
            ///   - kyc_result:
            ///   - currency: Always "USD"
            ///   - last_equity:
            ///   - created_at:
            ///   - contact:
            ///   - identity:
            ///   - disclosures:
            ///   - agreements:
            ///   - documents:
            ///   - trusted_contact:
            ///   - account_name:
            ///   - account_type:
            ///   - custodial_account_type: "UGMA" or "UTMA" only used when account_type is "custodial"
            ///   - minor_identity:
            ///   - trading_configurations:
            public init(
                id: Swift.String,
                account_number: Swift.String? = nil,
                status: Components.Schemas.AccountStatus,
                crypto_status: Components.Schemas.AccountStatus? = nil,
                kyc_result: Components.Schemas.KYCResult? = nil,
                currency: Swift.String,
                last_equity: Swift.String,
                created_at: Foundation.Date,
                contact: Components.Schemas.Contact? = nil,
                identity: Components.Schemas.Identity? = nil,
                disclosures: Components.Schemas.Disclosures? = nil,
                agreements: [Components.Schemas.Agreement]? = nil,
                documents: [Components.Schemas.ApplicationDocument]? = nil,
                trusted_contact: Components.Schemas.TrustedContact? = nil,
                account_name: Swift.String? = nil,
                account_type: Components.Schemas.AccountType,
                custodial_account_type: Components.Schemas.AccountExtended.custodial_account_typePayload? = nil,
                minor_identity: Components.Schemas.CustodialAccountMinorIdentity? = nil,
                trading_configurations: Components.Schemas.AccountConfigurations? = nil
            ) {
                self.id = id
                self.account_number = account_number
                self.status = status
                self.crypto_status = crypto_status
                self.kyc_result = kyc_result
                self.currency = currency
                self.last_equity = last_equity
                self.created_at = created_at
                self.contact = contact
                self.identity = identity
                self.disclosures = disclosures
                self.agreements = agreements
                self.documents = documents
                self.trusted_contact = trusted_contact
                self.account_name = account_name
                self.account_type = account_type
                self.custodial_account_type = custodial_account_type
                self.minor_identity = minor_identity
                self.trading_configurations = trading_configurations
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account_number
                case status
                case crypto_status
                case kyc_result
                case currency
                case last_equity
                case created_at
                case contact
                case identity
                case disclosures
                case agreements
                case documents
                case trusted_contact
                case account_name
                case account_type
                case custodial_account_type
                case minor_identity
                case trading_configurations
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccountUpdateRequest`.
        public struct AccountUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountUpdateRequest/contact`.
            public var contact: Components.Schemas.Contact?
            /// - Remark: Generated from `#/components/schemas/AccountUpdateRequest/identity`.
            public var identity: Components.Schemas.Identity?
            /// - Remark: Generated from `#/components/schemas/AccountUpdateRequest/disclosures`.
            public var disclosures: Components.Schemas.Disclosures?
            /// - Remark: Generated from `#/components/schemas/AccountUpdateRequest/trustedContact`.
            public var trustedContact: Components.Schemas.TrustedContact?
            /// Creates a new `AccountUpdateRequest`.
            ///
            /// - Parameters:
            ///   - contact:
            ///   - identity:
            ///   - disclosures:
            ///   - trustedContact:
            public init(
                contact: Components.Schemas.Contact? = nil,
                identity: Components.Schemas.Identity? = nil,
                disclosures: Components.Schemas.Disclosures? = nil,
                trustedContact: Components.Schemas.TrustedContact? = nil
            ) {
                self.contact = contact
                self.identity = identity
                self.disclosures = disclosures
                self.trustedContact = trustedContact
            }
            public enum CodingKeys: String, CodingKey {
                case contact
                case identity
                case disclosures
                case trustedContact
            }
        }
        /// If an account has documents on the application submission,
        /// it has the ApplicationDocument model in exchange with
        /// DocumentUploadRequest.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AccountDocument`.
        public struct AccountDocument: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountDocument/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountDocument/document_type`.
            public var document_type: Components.Schemas.DocumentType
            /// - Remark: Generated from `#/components/schemas/AccountDocument/document_sub_type`.
            public var document_sub_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountDocument/mime_type`.
            public var mime_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountDocument/created_at`.
            public var created_at: Foundation.Date
            /// Creates a new `AccountDocument`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - document_type:
            ///   - document_sub_type:
            ///   - mime_type:
            ///   - created_at:
            public init(
                id: Swift.String,
                document_type: Components.Schemas.DocumentType,
                document_sub_type: Swift.String? = nil,
                mime_type: Swift.String? = nil,
                created_at: Foundation.Date
            ) {
                self.id = id
                self.document_type = document_type
                self.document_sub_type = document_sub_type
                self.mime_type = mime_type
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case document_type
                case document_sub_type
                case mime_type
                case created_at
            }
        }
        /// Represents Identity information for a minor that an account of type "custodial" is for
        ///
        /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity`.
        public struct CustodialAccountMinorIdentity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/given_name`.
            public var given_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/family_name`.
            public var family_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/date_of_birth`.
            public var date_of_birth: Swift.String
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/tax_id`.
            public var tax_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/tax_id_type`.
            public var tax_id_type: Components.Schemas.TaxIdType?
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/country_of_citizenship`.
            public var country_of_citizenship: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/country_of_birth`.
            public var country_of_birth: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/country_of_tax_residence`.
            public var country_of_tax_residence: Swift.String
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/CustodialAccountMinorIdentity/email`.
            public var email: Swift.String
            /// Creates a new `CustodialAccountMinorIdentity`.
            ///
            /// - Parameters:
            ///   - given_name:
            ///   - family_name:
            ///   - date_of_birth:
            ///   - tax_id:
            ///   - tax_id_type:
            ///   - country_of_citizenship:
            ///   - country_of_birth:
            ///   - country_of_tax_residence:
            ///   - state:
            ///   - email:
            public init(
                given_name: Swift.String,
                family_name: Swift.String,
                date_of_birth: Swift.String,
                tax_id: Swift.String? = nil,
                tax_id_type: Components.Schemas.TaxIdType? = nil,
                country_of_citizenship: Swift.String? = nil,
                country_of_birth: Swift.String? = nil,
                country_of_tax_residence: Swift.String,
                state: Swift.String,
                email: Swift.String
            ) {
                self.given_name = given_name
                self.family_name = family_name
                self.date_of_birth = date_of_birth
                self.tax_id = tax_id
                self.tax_id_type = tax_id_type
                self.country_of_citizenship = country_of_citizenship
                self.country_of_birth = country_of_birth
                self.country_of_tax_residence = country_of_tax_residence
                self.state = state
                self.email = email
            }
            public enum CodingKeys: String, CodingKey {
                case given_name
                case family_name
                case date_of_birth
                case tax_id
                case tax_id_type
                case country_of_citizenship
                case country_of_birth
                case country_of_tax_residence
                case state
                case email
            }
        }
        /// Represents additional configuration settings for an account
        ///
        /// - Remark: Generated from `#/components/schemas/AccountConfigurations`.
        public struct AccountConfigurations: Codable, Hashable, Sendable {
            /// both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/dtbp_check`.
            @frozen public enum dtbp_checkPayload: String, Codable, Hashable, Sendable {
                case both = "both"
                case entry = "entry"
                case exit = "exit"
            }
            /// both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/dtbp_check`.
            public var dtbp_check: Components.Schemas.AccountConfigurations.dtbp_checkPayload
            /// all or none. If none, emails for order fills are not sent.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/trade_confirm_email`.
            @frozen public enum trade_confirm_emailPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case none = "none"
            }
            /// all or none. If none, emails for order fills are not sent.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/trade_confirm_email`.
            public var trade_confirm_email: Components.Schemas.AccountConfigurations.trade_confirm_emailPayload
            /// If true, new orders are blocked.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/suspend_trade`.
            public var suspend_trade: Swift.Bool
            /// If true, account becomes long-only mode.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/no_shorting`.
            public var no_shorting: Swift.Bool
            /// If true, account is able to participate in fractional trading
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/fractional_trading`.
            public var fractional_trading: Swift.Bool
            /// Can be "1" or "2"
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/max_margin_multiplier`.
            public var max_margin_multiplier: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/pdt_check`.
            public var pdt_check: Swift.String
            /// Creates a new `AccountConfigurations`.
            ///
            /// - Parameters:
            ///   - dtbp_check: both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.
            ///   - trade_confirm_email: all or none. If none, emails for order fills are not sent.
            ///   - suspend_trade: If true, new orders are blocked.
            ///   - no_shorting: If true, account becomes long-only mode.
            ///   - fractional_trading: If true, account is able to participate in fractional trading
            ///   - max_margin_multiplier: Can be "1" or "2"
            ///   - pdt_check:
            public init(
                dtbp_check: Components.Schemas.AccountConfigurations.dtbp_checkPayload,
                trade_confirm_email: Components.Schemas.AccountConfigurations.trade_confirm_emailPayload,
                suspend_trade: Swift.Bool,
                no_shorting: Swift.Bool,
                fractional_trading: Swift.Bool,
                max_margin_multiplier: Swift.String,
                pdt_check: Swift.String
            ) {
                self.dtbp_check = dtbp_check
                self.trade_confirm_email = trade_confirm_email
                self.suspend_trade = suspend_trade
                self.no_shorting = no_shorting
                self.fractional_trading = fractional_trading
                self.max_margin_multiplier = max_margin_multiplier
                self.pdt_check = pdt_check
            }
            public enum CodingKeys: String, CodingKey {
                case dtbp_check
                case trade_confirm_email
                case suspend_trade
                case no_shorting
                case fractional_trading
                case max_margin_multiplier
                case pdt_check
            }
        }
        /// Represents the fields required to create a new account
        ///
        /// - Remark: Generated from `#/components/schemas/AccountCreationRequest`.
        public struct AccountCreationRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountCreationRequest/contact`.
            public var contact: Components.Schemas.Contact
            /// - Remark: Generated from `#/components/schemas/AccountCreationRequest/identity`.
            public var identity: Components.Schemas.Identity
            /// - Remark: Generated from `#/components/schemas/AccountCreationRequest/disclosures`.
            public var disclosures: Components.Schemas.Disclosures
            /// The client has to present the Alpaca Account and Margin Agreements to the end user, and have them read full sentences.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountCreationRequest/agreements`.
            public var agreements: [Components.Schemas.Agreement]
            /// - Remark: Generated from `#/components/schemas/AccountCreationRequest/documents`.
            public var documents: [Components.Schemas.DocumentUploadRequest]?
            /// - Remark: Generated from `#/components/schemas/AccountCreationRequest/trusted_contact`.
            public var trusted_contact: Components.Schemas.TrustedContact?
            /// Creates a new `AccountCreationRequest`.
            ///
            /// - Parameters:
            ///   - contact:
            ///   - identity:
            ///   - disclosures:
            ///   - agreements: The client has to present the Alpaca Account and Margin Agreements to the end user, and have them read full sentences.
            ///   - documents:
            ///   - trusted_contact:
            public init(
                contact: Components.Schemas.Contact,
                identity: Components.Schemas.Identity,
                disclosures: Components.Schemas.Disclosures,
                agreements: [Components.Schemas.Agreement],
                documents: [Components.Schemas.DocumentUploadRequest]? = nil,
                trusted_contact: Components.Schemas.TrustedContact? = nil
            ) {
                self.contact = contact
                self.identity = identity
                self.disclosures = disclosures
                self.agreements = agreements
                self.documents = documents
                self.trusted_contact = trusted_contact
            }
            public enum CodingKeys: String, CodingKey {
                case contact
                case identity
                case disclosures
                case agreements
                case documents
                case trusted_contact
            }
        }
        /// An Enum of the various kinds of Tax ID formats Alpaca supports.
        ///
        /// Possible Values are:
        ///
        ///
        /// - **USA_SSN**
        /// USA Social Security Number
        ///
        /// - **ARG_AR_CUIT**
        /// Argentina CUIT
        ///
        /// - **AUS_TFN**
        /// Australian Tax File Number
        ///
        /// - **AUS_ABN**
        /// Australian Business Number
        ///
        /// - **BOL_NIT**
        /// Bolivia NIT
        ///
        /// - **BRA_CPF**
        /// Brazil CPF
        ///
        /// - **CHL_RUT**
        /// Chile RUT
        ///
        /// - **COL_NIT**
        /// Colombia NIT
        ///
        /// - **CRI_NITE**
        /// Costa Rica NITE
        ///
        /// - **DEU_TAX_ID**
        /// Germany Tax ID (Identifikationsnummer)
        ///
        /// - **DOM_RNC**
        /// Dominican Republic RNC
        ///
        /// - **ECU_RUC**
        /// Ecuador RUC
        ///
        /// - **FRA_SPI**
        /// France SPI (Reference Tax Number)
        ///
        /// - **GBR_UTR**
        /// UK UTR (Unique Taxpayer Reference)
        ///
        /// - **GBR_NINO**
        /// UK NINO (National Insurance Number)
        ///
        /// - **GTM_NIT**
        /// Guatemala NIT
        ///
        /// - **HND_RTN**
        /// Honduras RTN
        ///
        /// - **HUN_TIN**
        /// Hungary TIN Number
        ///
        /// - **IDN_KTP**
        /// Indonesia KTP
        ///
        /// - **IND_PAN**
        /// India PAN Number
        ///
        /// - **ISR_TAX_ID**
        /// Israel Tax ID (Teudat Zehut)
        ///
        /// - **ITA_TAX_ID**
        /// Italy Tax ID (Codice Fiscale)
        ///
        /// - **JPN_TAX_ID**
        /// Japan Tax ID (Koijin Bango)
        ///
        /// - **MEX_RFC**
        /// Mexico RFC
        ///
        /// - **NIC_RUC**
        /// Nicaragua RUC
        ///
        /// - **NLD_TIN**
        /// Netherlands TIN Number
        ///
        /// - **PAN_RUC**
        /// Panama RUC
        ///
        /// - **PER_RUC**
        /// Peru RUC
        ///
        /// - **PRY_RUC**
        /// Paraguay RUC
        ///
        /// - **SGP_NRIC**
        /// Singapore NRIC
        ///
        /// - **SGP_FIN**
        /// Singapore FIN
        ///
        /// - **SGP_ASGD**
        /// Singapore ASGD
        ///
        /// - **SGP_ITR**
        /// Singapore ITR
        ///
        /// - **SLV_NIT**
        /// El Salvador NIT
        ///
        /// - **SWE_TAX_ID**
        /// Sweden Tax ID (Personnummer)
        ///
        /// - **URY_RUT**
        /// Uruguay RUT
        ///
        /// - **VEN_RIF**
        /// Venezuela RIF
        ///
        /// - **NOT_SPECIFIED**
        /// Other Tax IDs
        ///
        /// - Remark: Generated from `#/components/schemas/TaxIdType`.
        @frozen public enum TaxIdType: String, Codable, Hashable, Sendable {
            case NOT_SPECIFIED = "NOT_SPECIFIED"
            case USA_SSN = "USA_SSN"
            case ARG_AG_CUIT = "ARG_AG_CUIT"
            case AUS_TFN = "AUS_TFN"
            case AUS_ABN = "AUS_ABN"
            case BOL_NIT = "BOL_NIT"
            case BRA_CPF = "BRA_CPF"
            case CHL_RUT = "CHL_RUT"
            case COL_NIT = "COL_NIT"
            case CRI_NITE = "CRI_NITE"
            case DEU_TAX_ID = "DEU_TAX_ID"
            case DOM_RNC = "DOM_RNC"
            case ECU_RUC = "ECU_RUC"
            case FRA_SPI = "FRA_SPI"
            case GBR_UTR = "GBR_UTR"
            case GBR_NINO = "GBR_NINO"
            case GTM_NIT = "GTM_NIT"
            case HND_RTN = "HND_RTN"
            case HUN_TIN = "HUN_TIN"
            case IDN_KTP = "IDN_KTP"
            case IND_PAN = "IND_PAN"
            case ISR_TAX_ID = "ISR_TAX_ID"
            case ITA_TAX_ID = "ITA_TAX_ID"
            case JPN_TAX_ID = "JPN_TAX_ID"
            case MEX_RFC = "MEX_RFC"
            case NIC_RUC = "NIC_RUC"
            case NLD_TIN = "NLD_TIN"
            case PAN_RUC = "PAN_RUC"
            case PER_RUC = "PER_RUC"
            case PRY_RUC = "PRY_RUC"
            case SGP_NRIC = "SGP_NRIC"
            case SGP_FIN = "SGP_FIN"
            case SGP_ASGD = "SGP_ASGD"
            case SGP_ITR = "SGP_ITR"
            case SLV_NIT = "SLV_NIT"
            case SWE_TAX_ID = "SWE_TAX_ID"
            case URY_RUT = "URY_RUT"
            case VEN_RIF = "VEN_RIF"
        }
        /// If an account has documents on the application submission,
        /// it has the ApplicationDocument model in exchange with
        /// DocumentUpload.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ApplicationDocument`.
        public struct ApplicationDocument: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ApplicationDocument/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ApplicationDocument/document_type`.
            public var document_type: Components.Schemas.DocumentType
            /// - Remark: Generated from `#/components/schemas/ApplicationDocument/document_sub_type`.
            public var document_sub_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ApplicationDocument/mime_type`.
            public var mime_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ApplicationDocument/created_at`.
            public var created_at: Foundation.Date
            /// Creates a new `ApplicationDocument`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - document_type:
            ///   - document_sub_type:
            ///   - mime_type:
            ///   - created_at:
            public init(
                id: Swift.String,
                document_type: Components.Schemas.DocumentType,
                document_sub_type: Swift.String? = nil,
                mime_type: Swift.String? = nil,
                created_at: Foundation.Date
            ) {
                self.id = id
                self.document_type = document_type
                self.document_sub_type = document_sub_type
                self.mime_type = mime_type
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case document_type
                case document_sub_type
                case mime_type
                case created_at
            }
        }
        /// If an account has documents after the submission, it has
        /// the Document model in exchange with DocumentUpload.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/DocumentUpload`.
        public struct DocumentUpload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DocumentUpload/document_type`.
            public var document_type: Components.Schemas.DocumentType
            /// - Remark: Generated from `#/components/schemas/DocumentUpload/document_sub_type`.
            public var document_sub_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DocumentUpload/content`.
            public var content: Swift.String
            /// - Remark: Generated from `#/components/schemas/DocumentUpload/mime_type`.
            public var mime_type: Swift.String
            /// Creates a new `DocumentUpload`.
            ///
            /// - Parameters:
            ///   - document_type:
            ///   - document_sub_type:
            ///   - content:
            ///   - mime_type:
            public init(
                document_type: Components.Schemas.DocumentType,
                document_sub_type: Swift.String? = nil,
                content: Swift.String,
                mime_type: Swift.String
            ) {
                self.document_type = document_type
                self.document_sub_type = document_sub_type
                self.content = content
                self.mime_type = mime_type
            }
            public enum CodingKeys: String, CodingKey {
                case document_type
                case document_sub_type
                case content
                case mime_type
            }
        }
        /// Base for activity types
        ///
        /// - Remark: Generated from `#/components/schemas/Activity`.
        public struct Activity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Activity/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Activity/value1/id`.
                public var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Activity/value1/account_id`.
                public var account_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Activity/value1/activity_type`.
                public var activity_type: Components.Schemas.ActivityType?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - account_id:
                ///   - activity_type:
                public init(
                    id: Swift.String? = nil,
                    account_id: Swift.String? = nil,
                    activity_type: Components.Schemas.ActivityType? = nil
                ) {
                    self.id = id
                    self.account_id = account_id
                    self.activity_type = activity_type
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case account_id
                    case activity_type
                }
            }
            /// - Remark: Generated from `#/components/schemas/Activity/value1`.
            public var value1: Components.Schemas.Activity.Value1Payload
            /// - Remark: Generated from `#/components/schemas/Activity/value2`.
            @frozen public enum Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Activity/value2/case1`.
                case TradeActivity(Components.Schemas.TradeActivity)
                /// - Remark: Generated from `#/components/schemas/Activity/value2/case2`.
                case NonTradeActivity(Components.Schemas.NonTradeActivity)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .TradeActivity(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .NonTradeActivity(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .TradeActivity(value):
                        try value.encode(to: encoder)
                    case let .NonTradeActivity(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/Activity/value2`.
            public var value2: Components.Schemas.Activity.Value2Payload
            /// Creates a new `Activity`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.Activity.Value1Payload,
                value2: Components.Schemas.Activity.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// Represents the various kinds of activity.
        ///
        /// TradeActivity's will always have the type `FILL`
        ///
        /// - **FILL**
        ///   Order Fills (Partial/Full)
        /// - **ACATC**
        ///   ACATS IN/OUT (Cash)
        /// - **ACATS**
        ///   ACATS IN/OUT (Securities)
        /// - **CIL**
        ///   Cash in Lieu of Stock
        /// - **CSD**
        ///   Cash Disbursement (+)
        /// - **CSW**
        ///   Cash Withdrawable
        /// - **DIV**
        ///   Dividend
        /// - **DIVCGL**
        ///   Dividend (Capital Gain Long Term)
        /// - **DIVCGS**
        ///   Dividend (Capital Gain Short Term)
        /// - **DIVNRA**
        ///   Dividend Adjusted (NRA Withheld)
        /// - **DIVROC**
        ///   Dividend Return of Capital
        /// - **DIVTXEX**
        ///   Dividend (Tax Exempt)
        /// - **FEE**
        ///   REG and TAF Fees
        /// - **INT**
        ///   Interest (Credit/Margin)
        /// - **JNLC**
        ///   Journal Entry (Cash)
        /// - **JNLS**
        ///   Journal Entry (Stock)
        /// - **MA**
        ///   Merger/Acquisition
        /// - **PTC**
        ///   Pass Thru Change
        /// - **REORG**
        ///   Reorg CA
        /// - **SPIN**
        ///   Stock Spinoff
        /// - **SPLIT**
        ///   Stock Split
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityType`.
        @frozen public enum ActivityType: String, Codable, Hashable, Sendable {
            case FILL = "FILL"
            case ACATC = "ACATC"
            case ACATS = "ACATS"
            case CIL = "CIL"
            case CSD = "CSD"
            case CSW = "CSW"
            case DIV = "DIV"
            case DIVCGL = "DIVCGL"
            case DIVCGS = "DIVCGS"
            case DIVNRA = "DIVNRA"
            case DIVROC = "DIVROC"
            case DIVTXEX = "DIVTXEX"
            case FEE = "FEE"
            case INT = "INT"
            case JNLC = "JNLC"
            case JNLS = "JNLS"
            case MA = "MA"
            case PTC = "PTC"
            case REORG = "REORG"
            case SPIN = "SPIN"
            case SPLIT = "SPLIT"
        }
        /// - Remark: Generated from `#/components/schemas/TradeActivity`.
        public struct TradeActivity: Codable, Hashable, Sendable {
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/transaction_time`.
            public var transaction_time: Foundation.Date?
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case fill = "fill"
                case partial_fill = "partial_fill"
            }
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/type`.
            public var _type: Components.Schemas.TradeActivity._typePayload?
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/price`.
            public var price: Swift.String?
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/qty`.
            public var qty: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TradeActivity/side`.
            public var side: Components.Schemas.OrderSide?
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/symbol`.
            public var symbol: Swift.String?
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/leaves_qty`.
            public var leaves_qty: Swift.String?
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/order_id`.
            public var order_id: Swift.String?
            /// Valid only for trading activity types. Null for non-trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeActivity/cum_qty`.
            public var cum_qty: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TradeActivity/order_status`.
            public var order_status: Components.Schemas.OrderStatus?
            /// Creates a new `TradeActivity`.
            ///
            /// - Parameters:
            ///   - transaction_time: Valid only for trading activity types. Null for non-trading activites.
            ///   - _type: Valid only for trading activity types. Null for non-trading activites.
            ///   - price: Valid only for trading activity types. Null for non-trading activites.
            ///   - qty: Valid only for trading activity types. Null for non-trading activites.
            ///   - side:
            ///   - symbol: Valid only for trading activity types. Null for non-trading activites.
            ///   - leaves_qty: Valid only for trading activity types. Null for non-trading activites.
            ///   - order_id: Valid only for trading activity types. Null for non-trading activites.
            ///   - cum_qty: Valid only for trading activity types. Null for non-trading activites.
            ///   - order_status:
            public init(
                transaction_time: Foundation.Date? = nil,
                _type: Components.Schemas.TradeActivity._typePayload? = nil,
                price: Swift.String? = nil,
                qty: Swift.String? = nil,
                side: Components.Schemas.OrderSide? = nil,
                symbol: Swift.String? = nil,
                leaves_qty: Swift.String? = nil,
                order_id: Swift.String? = nil,
                cum_qty: Swift.String? = nil,
                order_status: Components.Schemas.OrderStatus? = nil
            ) {
                self.transaction_time = transaction_time
                self._type = _type
                self.price = price
                self.qty = qty
                self.side = side
                self.symbol = symbol
                self.leaves_qty = leaves_qty
                self.order_id = order_id
                self.cum_qty = cum_qty
                self.order_status = order_status
            }
            public enum CodingKeys: String, CodingKey {
                case transaction_time
                case _type = "type"
                case price
                case qty
                case side
                case symbol
                case leaves_qty
                case order_id
                case cum_qty
                case order_status
            }
        }
        /// - Remark: Generated from `#/components/schemas/NonTradeActivity`.
        public struct NonTradeActivity: Codable, Hashable, Sendable {
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/date`.
            public var date: Swift.String?
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/net_amount`.
            public var net_amount: Swift.String?
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/description`.
            public var description: Swift.String?
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case executed = "executed"
                case correct = "correct"
                case canceled = "canceled"
            }
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/status`.
            public var status: Components.Schemas.NonTradeActivity.statusPayload?
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/symbol`.
            public var symbol: Swift.String?
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/qty`.
            public var qty: Swift.String?
            /// Valid only for non-trading activity types. Null for trading activites.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivity/per_share_amount`.
            public var per_share_amount: Swift.String?
            /// Creates a new `NonTradeActivity`.
            ///
            /// - Parameters:
            ///   - date: Valid only for non-trading activity types. Null for trading activites.
            ///   - net_amount: Valid only for non-trading activity types. Null for trading activites.
            ///   - description: Valid only for non-trading activity types. Null for trading activites.
            ///   - status: Valid only for non-trading activity types. Null for trading activites.
            ///   - symbol: Valid only for non-trading activity types. Null for trading activites.
            ///   - qty: Valid only for non-trading activity types. Null for trading activites.
            ///   - per_share_amount: Valid only for non-trading activity types. Null for trading activites.
            public init(
                date: Swift.String? = nil,
                net_amount: Swift.String? = nil,
                description: Swift.String? = nil,
                status: Components.Schemas.NonTradeActivity.statusPayload? = nil,
                symbol: Swift.String? = nil,
                qty: Swift.String? = nil,
                per_share_amount: Swift.String? = nil
            ) {
                self.date = date
                self.net_amount = net_amount
                self.description = description
                self.status = status
                self.symbol = symbol
                self.qty = qty
                self.per_share_amount = per_share_amount
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case net_amount
                case description
                case status
                case symbol
                case qty
                case per_share_amount
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActivityItem`.
        public struct ActivityItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityItem/value1`.
            public var value1: Components.Schemas.TradeActivity?
            /// - Remark: Generated from `#/components/schemas/ActivityItem/value2`.
            public var value2: Components.Schemas.NonTradeActivity?
            /// Creates a new `ActivityItem`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.TradeActivity? = nil,
                value2: Components.Schemas.NonTradeActivity? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
            }
        }
        /// - identity_verification:
        ///   identity verification document
        ///
        /// - address_verification:
        ///   address verification document
        ///
        /// - date_of_birth_verification:
        ///   date of birth verification document
        ///
        /// - tax_id_verification:
        ///   tax ID verification document
        ///
        /// - account_approval_letter:
        ///   407 approval letter
        ///
        /// - cip_result:
        ///   initial CIP result
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/DocumentType`.
        @frozen public enum DocumentType: String, Codable, Hashable, Sendable {
            case identity_verification = "identity_verification"
            case address_verification = "address_verification"
            case date_of_birth_verification = "date_of_birth_verification"
            case tax_id_verification = "tax_id_verification"
            case account_approval_letter = "account_approval_letter"
            case cip_result = "cip_result"
        }
        /// If an account has documents after the submission, it has
        /// the Document model in exchange with DocumentUploadRequest.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/DocumentUploadRequest`.
        public struct DocumentUploadRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DocumentUploadRequest/document_type`.
            public var document_type: Components.Schemas.DocumentType
            /// - Remark: Generated from `#/components/schemas/DocumentUploadRequest/document_sub_type`.
            public var document_sub_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DocumentUploadRequest/content`.
            public var content: Swift.String
            /// - Remark: Generated from `#/components/schemas/DocumentUploadRequest/mime_type`.
            public var mime_type: Swift.String
            /// Creates a new `DocumentUploadRequest`.
            ///
            /// - Parameters:
            ///   - document_type:
            ///   - document_sub_type:
            ///   - content:
            ///   - mime_type:
            public init(
                document_type: Components.Schemas.DocumentType,
                document_sub_type: Swift.String? = nil,
                content: Swift.String,
                mime_type: Swift.String
            ) {
                self.document_type = document_type
                self.document_sub_type = document_sub_type
                self.content = content
                self.mime_type = mime_type
            }
            public enum CodingKeys: String, CodingKey {
                case document_type
                case document_sub_type
                case content
                case mime_type
            }
        }
        /// Hold information about the result of KYC. Please see the documentation [here](https://alpaca.markets/docs/api-references/broker-api/events/#kyc-results) for more indepth details
        ///
        /// - Remark: Generated from `#/components/schemas/KYCResult`.
        public struct KYCResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/KYCResult/reject`.
            public var reject: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/KYCResult/accept`.
            public var accept: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/KYCResult/indeterminate`.
            public var indeterminate: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/KYCResult/addidional_information`.
            public var addidional_information: Swift.String?
            /// Creates a new `KYCResult`.
            ///
            /// - Parameters:
            ///   - reject:
            ///   - accept:
            ///   - indeterminate:
            ///   - addidional_information:
            public init(
                reject: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                accept: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                indeterminate: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                addidional_information: Swift.String? = nil
            ) {
                self.reject = reject
                self.accept = accept
                self.indeterminate = indeterminate
                self.addidional_information = addidional_information
            }
            public enum CodingKeys: String, CodingKey {
                case reject
                case accept
                case indeterminate
                case addidional_information
            }
        }
        /// - Remark: Generated from `#/components/schemas/StreetAddress`.
        public typealias StreetAddress = Swift.String
        /// Contact is the model for the account owner contact information.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Contact`.
        public struct Contact: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Contact/email_address`.
            public var email_address: Swift.String?
            /// with country code, no hyphen or space
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/phone_number`.
            public var phone_number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Contact/street_address`.
            public var street_address: [Components.Schemas.StreetAddress]?
            /// - Remark: Generated from `#/components/schemas/Contact/city`.
            public var city: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Contact/state`.
            public var state: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Contact/postal_code`.
            public var postal_code: Swift.String?
            /// Creates a new `Contact`.
            ///
            /// - Parameters:
            ///   - email_address:
            ///   - phone_number: with country code, no hyphen or space
            ///   - street_address:
            ///   - city:
            ///   - state:
            ///   - postal_code:
            public init(
                email_address: Swift.String? = nil,
                phone_number: Swift.String? = nil,
                street_address: [Components.Schemas.StreetAddress]? = nil,
                city: Swift.String? = nil,
                state: Swift.String? = nil,
                postal_code: Swift.String? = nil
            ) {
                self.email_address = email_address
                self.phone_number = phone_number
                self.street_address = street_address
                self.city = city
                self.state = state
                self.postal_code = postal_code
            }
            public enum CodingKeys: String, CodingKey {
                case email_address
                case phone_number
                case street_address
                case city
                case state
                case postal_code
            }
        }
        /// Identity is the model to provide account owner’s identity information.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Identity`.
        public struct Identity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Identity/given_name`.
            public var given_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Identity/family_name`.
            public var family_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Identity/date_of_birth`.
            public var date_of_birth: Swift.String
            /// - Remark: Generated from `#/components/schemas/Identity/tax_id`.
            public var tax_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Identity/tax_id_type`.
            public var tax_id_type: Components.Schemas.TaxIdType?
            /// [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Identity/country_of_citizenship`.
            public var country_of_citizenship: Swift.String?
            /// [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Identity/country_of_birth`.
            public var country_of_birth: Swift.String?
            /// [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Identity/country_of_tax_residence`.
            public var country_of_tax_residence: Swift.String
            /// - Remark: Generated from `#/components/schemas/Identity/funding_sourcePayload`.
            @frozen public enum funding_sourcePayloadPayload: String, Codable, Hashable, Sendable {
                case employment_income = "employment_income"
                case investments = "investments"
                case inheritance = "inheritance"
                case business_income = "business_income"
                case savings = "savings"
                case family = "family"
            }
            /// - Remark: Generated from `#/components/schemas/Identity/funding_source`.
            public typealias funding_sourcePayload = [Components.Schemas.Identity.funding_sourcePayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Identity/funding_source`.
            public var funding_source: Components.Schemas.Identity.funding_sourcePayload
            /// - Remark: Generated from `#/components/schemas/Identity/annual_income_min`.
            public var annual_income_min: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Identity/annual_income_max`.
            public var annual_income_max: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Identity/liquid_net_worth_min`.
            public var liquid_net_worth_min: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Identity/liquid_net_worth_max`.
            public var liquid_net_worth_max: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Identity/total_net_worth_min`.
            public var total_net_worth_min: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Identity/total_net_worth_max`.
            public var total_net_worth_max: Swift.Double?
            /// any extra information used for KYC purposes
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Identity/extra`.
            public var extra: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `Identity`.
            ///
            /// - Parameters:
            ///   - given_name:
            ///   - family_name:
            ///   - date_of_birth:
            ///   - tax_id:
            ///   - tax_id_type:
            ///   - country_of_citizenship: [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            ///   - country_of_birth: [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            ///   - country_of_tax_residence: [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            ///   - funding_source:
            ///   - annual_income_min:
            ///   - annual_income_max:
            ///   - liquid_net_worth_min:
            ///   - liquid_net_worth_max:
            ///   - total_net_worth_min:
            ///   - total_net_worth_max:
            ///   - extra: any extra information used for KYC purposes
            public init(
                given_name: Swift.String,
                family_name: Swift.String,
                date_of_birth: Swift.String,
                tax_id: Swift.String? = nil,
                tax_id_type: Components.Schemas.TaxIdType? = nil,
                country_of_citizenship: Swift.String? = nil,
                country_of_birth: Swift.String? = nil,
                country_of_tax_residence: Swift.String,
                funding_source: Components.Schemas.Identity.funding_sourcePayload,
                annual_income_min: Swift.Double? = nil,
                annual_income_max: Swift.Double? = nil,
                liquid_net_worth_min: Swift.Double? = nil,
                liquid_net_worth_max: Swift.Double? = nil,
                total_net_worth_min: Swift.Double? = nil,
                total_net_worth_max: Swift.Double? = nil,
                extra: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.given_name = given_name
                self.family_name = family_name
                self.date_of_birth = date_of_birth
                self.tax_id = tax_id
                self.tax_id_type = tax_id_type
                self.country_of_citizenship = country_of_citizenship
                self.country_of_birth = country_of_birth
                self.country_of_tax_residence = country_of_tax_residence
                self.funding_source = funding_source
                self.annual_income_min = annual_income_min
                self.annual_income_max = annual_income_max
                self.liquid_net_worth_min = liquid_net_worth_min
                self.liquid_net_worth_max = liquid_net_worth_max
                self.total_net_worth_min = total_net_worth_min
                self.total_net_worth_max = total_net_worth_max
                self.extra = extra
            }
            public enum CodingKeys: String, CodingKey {
                case given_name
                case family_name
                case date_of_birth
                case tax_id
                case tax_id_type
                case country_of_citizenship
                case country_of_birth
                case country_of_tax_residence
                case funding_source
                case annual_income_min
                case annual_income_max
                case liquid_net_worth_min
                case liquid_net_worth_max
                case total_net_worth_min
                case total_net_worth_max
                case extra
            }
        }
        /// Disclosures fields denote if the account owner falls under
        /// each category defined by FINRA rule. The client has to ask
        /// questions for the end user and the values should reflect
        /// their answers.
        /// If one of the answers is true (yes), the account goes into
        /// ACTION_REQUIRED status.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Disclosures`.
        public struct Disclosures: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Disclosures/employment_status`.
            @frozen public enum employment_statusPayload: String, Codable, Hashable, Sendable {
                case unemployed = "unemployed"
                case employed = "employed"
                case student = "student"
                case retired = "retired"
            }
            /// - Remark: Generated from `#/components/schemas/Disclosures/employment_status`.
            public var employment_status: Components.Schemas.Disclosures.employment_statusPayload?
            /// - Remark: Generated from `#/components/schemas/Disclosures/employer_name`.
            public var employer_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Disclosures/employer_address`.
            public var employer_address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Disclosures/employment_position`.
            public var employment_position: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Disclosures/is_control_person`.
            public var is_control_person: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Disclosures/is_affiliated_exchange_or_finra`.
            public var is_affiliated_exchange_or_finra: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Disclosures/is_politically_exposed`.
            public var is_politically_exposed: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Disclosures/immediate_family_exposed`.
            public var immediate_family_exposed: Swift.Bool
            /// Array of annotations describing the rational for marking `is_control_person`, `is_affiliated_exchange_or_finra`, and/or `immediate_family_exposed` as true
            ///
            /// - Remark: Generated from `#/components/schemas/Disclosures/context`.
            public var context: [Components.Schemas.DisclosureContextAnnotation]?
            /// Creates a new `Disclosures`.
            ///
            /// - Parameters:
            ///   - employment_status:
            ///   - employer_name:
            ///   - employer_address:
            ///   - employment_position:
            ///   - is_control_person:
            ///   - is_affiliated_exchange_or_finra:
            ///   - is_politically_exposed:
            ///   - immediate_family_exposed:
            ///   - context: Array of annotations describing the rational for marking `is_control_person`, `is_affiliated_exchange_or_finra`, and/or `immediate_family_exposed` as true
            public init(
                employment_status: Components.Schemas.Disclosures.employment_statusPayload? = nil,
                employer_name: Swift.String? = nil,
                employer_address: Swift.String? = nil,
                employment_position: Swift.String? = nil,
                is_control_person: Swift.Bool,
                is_affiliated_exchange_or_finra: Swift.Bool,
                is_politically_exposed: Swift.Bool,
                immediate_family_exposed: Swift.Bool,
                context: [Components.Schemas.DisclosureContextAnnotation]? = nil
            ) {
                self.employment_status = employment_status
                self.employer_name = employer_name
                self.employer_address = employer_address
                self.employment_position = employment_position
                self.is_control_person = is_control_person
                self.is_affiliated_exchange_or_finra = is_affiliated_exchange_or_finra
                self.is_politically_exposed = is_politically_exposed
                self.immediate_family_exposed = immediate_family_exposed
                self.context = context
            }
            public enum CodingKeys: String, CodingKey {
                case employment_status
                case employer_name
                case employer_address
                case employment_position
                case is_control_person
                case is_affiliated_exchange_or_finra
                case is_politically_exposed
                case immediate_family_exposed
                case context
            }
        }
        /// - Remark: Generated from `#/components/schemas/Agreement`.
        public struct Agreement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Agreement/agreement`.
            public var agreement: Components.Schemas.AgreementType
            /// - Remark: Generated from `#/components/schemas/Agreement/signed_at`.
            public var signed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Agreement/ip_address`.
            public var ip_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Agreement/revision`.
            public var revision: Swift.String?
            /// Creates a new `Agreement`.
            ///
            /// - Parameters:
            ///   - agreement:
            ///   - signed_at:
            ///   - ip_address:
            ///   - revision:
            public init(
                agreement: Components.Schemas.AgreementType,
                signed_at: Foundation.Date,
                ip_address: Swift.String,
                revision: Swift.String? = nil
            ) {
                self.agreement = agreement
                self.signed_at = signed_at
                self.ip_address = ip_address
                self.revision = revision
            }
            public enum CodingKeys: String, CodingKey {
                case agreement
                case signed_at
                case ip_address
                case revision
            }
        }
        /// - margin_agreement: Alpaca Margin Agreement
        /// - account_agreement: Alpaca Account Agreement
        /// - customer_agreement: Alpaca Customer Agreement
        /// - crypto_agreement: Alpaca Crypto agreement
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AgreementType`.
        @frozen public enum AgreementType: String, Codable, Hashable, Sendable {
            case margin_agreement = "margin_agreement"
            case account_agreement = "account_agreement"
            case customer_agreement = "customer_agreement"
            case crypto_agreement = "crypto_agreement"
        }
        /// The client has to present Alpaca Account Agreement and Margin Agreement to the end user, and have them read full sentences.
        ///
        /// - Remark: Generated from `#/components/schemas/Agreements`.
        public typealias Agreements = [Components.Schemas.Agreement]
        /// This model input is optional. However, the client should
        /// make reasonable effort to obtain the trusted contact information.
        /// See more details in [FINRA Notice 17-11](https://www.finra.org/sites/default/files/Regulatory-Notice-17-11.pdf)
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TrustedContact`.
        public struct TrustedContact: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TrustedContact/given_name`.
            public var given_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/TrustedContact/family_name`.
            public var family_name: Swift.String
            /// at least one of `email_address`, `phone_number` or
            /// `street_address` is required
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TrustedContact/email_address`.
            public var email_address: Swift.String?
            /// at least one of `email_address`, `phone_number` or
            /// `street_address` is required
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TrustedContact/phone_number`.
            public var phone_number: Swift.String?
            /// at least one of `email_address`, `phone_number` or
            /// `street_address` is required
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TrustedContact/street_address`.
            public var street_address: [Swift.String]?
            /// required if `street_address` is set
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TrustedContact/city`.
            public var city: Swift.String?
            /// required if `street_address` is set
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TrustedContact/state`.
            public var state: Swift.String?
            /// required if `street_address` is set
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TrustedContact/postal_code`.
            public var postal_code: Swift.String?
            /// [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            /// required if `street_address` is set
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TrustedContact/country`.
            public var country: Swift.String?
            /// Creates a new `TrustedContact`.
            ///
            /// - Parameters:
            ///   - given_name:
            ///   - family_name:
            ///   - email_address: at least one of `email_address`, `phone_number` or
            ///   - phone_number: at least one of `email_address`, `phone_number` or
            ///   - street_address: at least one of `email_address`, `phone_number` or
            ///   - city: required if `street_address` is set
            ///   - state: required if `street_address` is set
            ///   - postal_code: required if `street_address` is set
            ///   - country: [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
            public init(
                given_name: Swift.String,
                family_name: Swift.String,
                email_address: Swift.String? = nil,
                phone_number: Swift.String? = nil,
                street_address: [Swift.String]? = nil,
                city: Swift.String? = nil,
                state: Swift.String? = nil,
                postal_code: Swift.String? = nil,
                country: Swift.String? = nil
            ) {
                self.given_name = given_name
                self.family_name = family_name
                self.email_address = email_address
                self.phone_number = phone_number
                self.street_address = street_address
                self.city = city
                self.state = state
                self.postal_code = postal_code
                self.country = country
            }
            public enum CodingKeys: String, CodingKey {
                case given_name
                case family_name
                case email_address
                case phone_number
                case street_address
                case city
                case state
                case postal_code
                case country
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateOrderRequest`.
        public struct CreateOrderRequest: Codable, Hashable, Sendable {
            /// Symbol or asset ID to identify the asset to trade
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/symbol`.
            public var symbol: Swift.String
            /// Number of shares to trade. Can be fractionable for only market and day order types.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/qty`.
            public var qty: Swift.String?
            /// Dollar amount to trade. Cannot work with qty. Can only work for market order types and time_in_force = day.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/notional`.
            public var notional: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/side`.
            public var side: Components.Schemas.OrderSide
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/type`.
            public var _type: Components.Schemas.OrderType
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/time_in_force`.
            public var time_in_force: Components.Schemas.TimeInForce
            /// Required if type is limit or stop_limit
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/limit_price`.
            public var limit_price: Swift.String?
            /// Required if type is stop or stop_limit
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/stop_price`.
            public var stop_price: Swift.String?
            /// If type is trailing_stop, then one of trail_price or trail_percent is required
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/trail_price`.
            public var trail_price: Swift.String?
            /// If type is trailing_stop, then one of trail_price or trail_percent is required
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/trail_percent`.
            public var trail_percent: Swift.String?
            /// Defaults to false. If true, order will be eligible to execute in premarket/afterhours. Only works with type limit and time_in_force = day.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/extended_hours`.
            public var extended_hours: Swift.Bool?
            /// A unique identifier for the order. Automatically generated if not sent. (<= 48 characters)
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/client_order_id`.
            public var client_order_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/order_class`.
            public var order_class: Components.Schemas.OrderClass?
            /// Takes in a string/number value for limit_price
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/take_profit`.
            public struct take_profitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/take_profit/limit_price`.
                public var limit_price: Swift.String?
                /// Creates a new `take_profitPayload`.
                ///
                /// - Parameters:
                ///   - limit_price:
                public init(limit_price: Swift.String? = nil) {
                    self.limit_price = limit_price
                }
                public enum CodingKeys: String, CodingKey {
                    case limit_price
                }
            }
            /// Takes in a string/number value for limit_price
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/take_profit`.
            public var take_profit: Components.Schemas.CreateOrderRequest.take_profitPayload?
            /// Takes in a string/number values for stop_price and limit_price
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/stop_loss`.
            public struct stop_lossPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/stop_loss/stop_price`.
                public var stop_price: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/stop_loss/limit_price`.
                public var limit_price: Swift.String?
                /// Creates a new `stop_lossPayload`.
                ///
                /// - Parameters:
                ///   - stop_price:
                ///   - limit_price:
                public init(
                    stop_price: Swift.String? = nil,
                    limit_price: Swift.String? = nil
                ) {
                    self.stop_price = stop_price
                    self.limit_price = limit_price
                }
                public enum CodingKeys: String, CodingKey {
                    case stop_price
                    case limit_price
                }
            }
            /// Takes in a string/number values for stop_price and limit_price
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/stop_loss`.
            public var stop_loss: Components.Schemas.CreateOrderRequest.stop_lossPayload?
            /// The commission you want to collect from the user.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOrderRequest/commission`.
            public var commission: Swift.String?
            /// Creates a new `CreateOrderRequest`.
            ///
            /// - Parameters:
            ///   - symbol: Symbol or asset ID to identify the asset to trade
            ///   - qty: Number of shares to trade. Can be fractionable for only market and day order types.
            ///   - notional: Dollar amount to trade. Cannot work with qty. Can only work for market order types and time_in_force = day.
            ///   - side:
            ///   - _type:
            ///   - time_in_force:
            ///   - limit_price: Required if type is limit or stop_limit
            ///   - stop_price: Required if type is stop or stop_limit
            ///   - trail_price: If type is trailing_stop, then one of trail_price or trail_percent is required
            ///   - trail_percent: If type is trailing_stop, then one of trail_price or trail_percent is required
            ///   - extended_hours: Defaults to false. If true, order will be eligible to execute in premarket/afterhours. Only works with type limit and time_in_force = day.
            ///   - client_order_id: A unique identifier for the order. Automatically generated if not sent. (<= 48 characters)
            ///   - order_class:
            ///   - take_profit: Takes in a string/number value for limit_price
            ///   - stop_loss: Takes in a string/number values for stop_price and limit_price
            ///   - commission: The commission you want to collect from the user.
            public init(
                symbol: Swift.String,
                qty: Swift.String? = nil,
                notional: Swift.String? = nil,
                side: Components.Schemas.OrderSide,
                _type: Components.Schemas.OrderType,
                time_in_force: Components.Schemas.TimeInForce,
                limit_price: Swift.String? = nil,
                stop_price: Swift.String? = nil,
                trail_price: Swift.String? = nil,
                trail_percent: Swift.String? = nil,
                extended_hours: Swift.Bool? = nil,
                client_order_id: Swift.String? = nil,
                order_class: Components.Schemas.OrderClass? = nil,
                take_profit: Components.Schemas.CreateOrderRequest.take_profitPayload? = nil,
                stop_loss: Components.Schemas.CreateOrderRequest.stop_lossPayload? = nil,
                commission: Swift.String? = nil
            ) {
                self.symbol = symbol
                self.qty = qty
                self.notional = notional
                self.side = side
                self._type = _type
                self.time_in_force = time_in_force
                self.limit_price = limit_price
                self.stop_price = stop_price
                self.trail_price = trail_price
                self.trail_percent = trail_percent
                self.extended_hours = extended_hours
                self.client_order_id = client_order_id
                self.order_class = order_class
                self.take_profit = take_profit
                self.stop_loss = stop_loss
                self.commission = commission
            }
            public enum CodingKeys: String, CodingKey {
                case symbol
                case qty
                case notional
                case side
                case _type = "type"
                case time_in_force
                case limit_price
                case stop_price
                case trail_price
                case trail_percent
                case extended_hours
                case client_order_id
                case order_class
                case take_profit
                case stop_loss
                case commission
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssetClass`.
        @frozen public enum AssetClass: String, Codable, Hashable, Sendable {
            case us_equity = "us_equity"
            case crypto = "crypto"
        }
        /// - Remark: Generated from `#/components/schemas/OrderType`.
        @frozen public enum OrderType: String, Codable, Hashable, Sendable {
            case market = "market"
            case limit = "limit"
            case stop = "stop"
            case stop_limit = "stop_limit"
            case trailing_stop = "trailing_stop"
        }
        /// Represents what side of the transaction an order was on.
        ///
        /// - Remark: Generated from `#/components/schemas/OrderSide`.
        @frozen public enum OrderSide: String, Codable, Hashable, Sendable {
            case buy = "buy"
            case sell = "sell"
            case buy_minus = "buy_minus"
            case sell_plus = "sell_plus"
            case sell_short = "sell_short"
            case sell_short_exempt = "sell_short_exempt"
            case undisclosed = "undisclosed"
            case cross = "cross"
            case cross_short = "cross_short"
        }
        /// - Remark: Generated from `#/components/schemas/OrderClass`.
        @frozen public enum OrderClass: String, Codable, Hashable, Sendable {
            case simple = "simple"
            case bracket = "bracket"
            case oco = "oco"
            case oto = "oto"
        }
        /// - Remark: Generated from `#/components/schemas/TimeInForce`.
        @frozen public enum TimeInForce: String, Codable, Hashable, Sendable {
            case day = "day"
            case gtc = "gtc"
            case opg = "opg"
            case cls = "cls"
            case ioc = "ioc"
            case fok = "fok"
        }
        /// - Remark: Generated from `#/components/schemas/OrderStatus`.
        @frozen public enum OrderStatus: String, Codable, Hashable, Sendable {
            case new = "new"
            case partially_filled = "partially_filled"
            case filled = "filled"
            case done_for_day = "done_for_day"
            case canceled = "canceled"
            case expired = "expired"
            case replaced = "replaced"
            case pending_cancel = "pending_cancel"
            case pending_replace = "pending_replace"
            case accepted = "accepted"
            case pending_new = "pending_new"
            case accepted_for_bidding = "accepted_for_bidding"
            case stopped = "stopped"
            case rejected = "rejected"
            case suspended = "suspended"
            case calculated = "calculated"
        }
        /// - Remark: Generated from `#/components/schemas/Order`.
        public struct Order: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Order/id`.
            public var id: Swift.String {
                get  {
                    storage.value.id
                }
                _modify {
                    yield &storage.value.id
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/client_order_id`.
            public var client_order_id: Swift.String? {
                get  {
                    storage.value.client_order_id
                }
                _modify {
                    yield &storage.value.client_order_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/created_at`.
            public var created_at: Foundation.Date? {
                get  {
                    storage.value.created_at
                }
                _modify {
                    yield &storage.value.created_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/updated_at`.
            public var updated_at: Foundation.Date? {
                get  {
                    storage.value.updated_at
                }
                _modify {
                    yield &storage.value.updated_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/submitted_at`.
            public var submitted_at: Foundation.Date? {
                get  {
                    storage.value.submitted_at
                }
                _modify {
                    yield &storage.value.submitted_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/filled_at`.
            public var filled_at: Foundation.Date? {
                get  {
                    storage.value.filled_at
                }
                _modify {
                    yield &storage.value.filled_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/expired_at`.
            public var expired_at: Foundation.Date? {
                get  {
                    storage.value.expired_at
                }
                _modify {
                    yield &storage.value.expired_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/canceled_at`.
            public var canceled_at: Foundation.Date? {
                get  {
                    storage.value.canceled_at
                }
                _modify {
                    yield &storage.value.canceled_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/failed_at`.
            public var failed_at: Foundation.Date? {
                get  {
                    storage.value.failed_at
                }
                _modify {
                    yield &storage.value.failed_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/replaced_at`.
            public var replaced_at: Foundation.Date? {
                get  {
                    storage.value.replaced_at
                }
                _modify {
                    yield &storage.value.replaced_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/replaced_by`.
            public var replaced_by: Swift.String? {
                get  {
                    storage.value.replaced_by
                }
                _modify {
                    yield &storage.value.replaced_by
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/replaces`.
            public var replaces: Swift.String? {
                get  {
                    storage.value.replaces
                }
                _modify {
                    yield &storage.value.replaces
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/asset_id`.
            public var asset_id: Swift.String? {
                get  {
                    storage.value.asset_id
                }
                _modify {
                    yield &storage.value.asset_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/symbol`.
            public var symbol: Swift.String {
                get  {
                    storage.value.symbol
                }
                _modify {
                    yield &storage.value.symbol
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/asset_class`.
            public var asset_class: Components.Schemas.AssetClass? {
                get  {
                    storage.value.asset_class
                }
                _modify {
                    yield &storage.value.asset_class
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/notional`.
            public var notional: Swift.String? {
                get  {
                    storage.value.notional
                }
                _modify {
                    yield &storage.value.notional
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/qty`.
            public var qty: Swift.String? {
                get  {
                    storage.value.qty
                }
                _modify {
                    yield &storage.value.qty
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/filled_qty`.
            public var filled_qty: Swift.String? {
                get  {
                    storage.value.filled_qty
                }
                _modify {
                    yield &storage.value.filled_qty
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/filled_avg_price`.
            public var filled_avg_price: Swift.String? {
                get  {
                    storage.value.filled_avg_price
                }
                _modify {
                    yield &storage.value.filled_avg_price
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/order_class`.
            public var order_class: Components.Schemas.OrderClass? {
                get  {
                    storage.value.order_class
                }
                _modify {
                    yield &storage.value.order_class
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/order_type`.
            public var order_type: Components.Schemas.OrderType? {
                get  {
                    storage.value.order_type
                }
                _modify {
                    yield &storage.value.order_type
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/type`.
            public var _type: Components.Schemas.OrderType? {
                get  {
                    storage.value._type
                }
                _modify {
                    yield &storage.value._type
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/side`.
            public var side: Components.Schemas.OrderSide? {
                get  {
                    storage.value.side
                }
                _modify {
                    yield &storage.value.side
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/time_in_force`.
            public var time_in_force: Components.Schemas.TimeInForce? {
                get  {
                    storage.value.time_in_force
                }
                _modify {
                    yield &storage.value.time_in_force
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/limit_price`.
            public var limit_price: Swift.String? {
                get  {
                    storage.value.limit_price
                }
                _modify {
                    yield &storage.value.limit_price
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/stop_price`.
            public var stop_price: Swift.String? {
                get  {
                    storage.value.stop_price
                }
                _modify {
                    yield &storage.value.stop_price
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/status`.
            public var status: Components.Schemas.OrderStatus? {
                get  {
                    storage.value.status
                }
                _modify {
                    yield &storage.value.status
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/extended_hours`.
            public var extended_hours: Swift.Bool? {
                get  {
                    storage.value.extended_hours
                }
                _modify {
                    yield &storage.value.extended_hours
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/legs`.
            public var legs: [Components.Schemas.Order]? {
                get  {
                    storage.value.legs
                }
                _modify {
                    yield &storage.value.legs
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/trail_price`.
            public var trail_price: Swift.String? {
                get  {
                    storage.value.trail_price
                }
                _modify {
                    yield &storage.value.trail_price
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/trail_percent`.
            public var trail_percent: Swift.String? {
                get  {
                    storage.value.trail_percent
                }
                _modify {
                    yield &storage.value.trail_percent
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/hwm`.
            public var hwm: Swift.String? {
                get  {
                    storage.value.hwm
                }
                _modify {
                    yield &storage.value.hwm
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/commission`.
            public var commission: Swift.String? {
                get  {
                    storage.value.commission
                }
                _modify {
                    yield &storage.value.commission
                }
            }
            /// Creates a new `Order`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - client_order_id:
            ///   - created_at:
            ///   - updated_at:
            ///   - submitted_at:
            ///   - filled_at:
            ///   - expired_at:
            ///   - canceled_at:
            ///   - failed_at:
            ///   - replaced_at:
            ///   - replaced_by:
            ///   - replaces:
            ///   - asset_id:
            ///   - symbol:
            ///   - asset_class:
            ///   - notional:
            ///   - qty:
            ///   - filled_qty:
            ///   - filled_avg_price:
            ///   - order_class:
            ///   - order_type:
            ///   - _type:
            ///   - side:
            ///   - time_in_force:
            ///   - limit_price:
            ///   - stop_price:
            ///   - status:
            ///   - extended_hours:
            ///   - legs:
            ///   - trail_price:
            ///   - trail_percent:
            ///   - hwm:
            ///   - commission:
            public init(
                id: Swift.String,
                client_order_id: Swift.String? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                submitted_at: Foundation.Date? = nil,
                filled_at: Foundation.Date? = nil,
                expired_at: Foundation.Date? = nil,
                canceled_at: Foundation.Date? = nil,
                failed_at: Foundation.Date? = nil,
                replaced_at: Foundation.Date? = nil,
                replaced_by: Swift.String? = nil,
                replaces: Swift.String? = nil,
                asset_id: Swift.String? = nil,
                symbol: Swift.String,
                asset_class: Components.Schemas.AssetClass? = nil,
                notional: Swift.String? = nil,
                qty: Swift.String? = nil,
                filled_qty: Swift.String? = nil,
                filled_avg_price: Swift.String? = nil,
                order_class: Components.Schemas.OrderClass? = nil,
                order_type: Components.Schemas.OrderType? = nil,
                _type: Components.Schemas.OrderType? = nil,
                side: Components.Schemas.OrderSide? = nil,
                time_in_force: Components.Schemas.TimeInForce? = nil,
                limit_price: Swift.String? = nil,
                stop_price: Swift.String? = nil,
                status: Components.Schemas.OrderStatus? = nil,
                extended_hours: Swift.Bool? = nil,
                legs: [Components.Schemas.Order]? = nil,
                trail_price: Swift.String? = nil,
                trail_percent: Swift.String? = nil,
                hwm: Swift.String? = nil,
                commission: Swift.String? = nil
            ) {
                storage = .init(value: .init(
                    id: id,
                    client_order_id: client_order_id,
                    created_at: created_at,
                    updated_at: updated_at,
                    submitted_at: submitted_at,
                    filled_at: filled_at,
                    expired_at: expired_at,
                    canceled_at: canceled_at,
                    failed_at: failed_at,
                    replaced_at: replaced_at,
                    replaced_by: replaced_by,
                    replaces: replaces,
                    asset_id: asset_id,
                    symbol: symbol,
                    asset_class: asset_class,
                    notional: notional,
                    qty: qty,
                    filled_qty: filled_qty,
                    filled_avg_price: filled_avg_price,
                    order_class: order_class,
                    order_type: order_type,
                    _type: _type,
                    side: side,
                    time_in_force: time_in_force,
                    limit_price: limit_price,
                    stop_price: stop_price,
                    status: status,
                    extended_hours: extended_hours,
                    legs: legs,
                    trail_price: trail_price,
                    trail_percent: trail_percent,
                    hwm: hwm,
                    commission: commission
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case client_order_id
                case created_at
                case updated_at
                case submitted_at
                case filled_at
                case expired_at
                case canceled_at
                case failed_at
                case replaced_at
                case replaced_by
                case replaces
                case asset_id
                case symbol
                case asset_class
                case notional
                case qty
                case filled_qty
                case filled_avg_price
                case order_class
                case order_type
                case _type = "type"
                case side
                case time_in_force
                case limit_price
                case stop_price
                case status
                case extended_hours
                case legs
                case trail_price
                case trail_percent
                case hwm
                case commission
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Order/id`.
                var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/Order/client_order_id`.
                var client_order_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/created_at`.
                var created_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/updated_at`.
                var updated_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/submitted_at`.
                var submitted_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/filled_at`.
                var filled_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/expired_at`.
                var expired_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/canceled_at`.
                var canceled_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/failed_at`.
                var failed_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/replaced_at`.
                var replaced_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/replaced_by`.
                var replaced_by: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/replaces`.
                var replaces: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/asset_id`.
                var asset_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/symbol`.
                var symbol: Swift.String
                /// - Remark: Generated from `#/components/schemas/Order/asset_class`.
                var asset_class: Components.Schemas.AssetClass?
                /// - Remark: Generated from `#/components/schemas/Order/notional`.
                var notional: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/qty`.
                var qty: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/filled_qty`.
                var filled_qty: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/filled_avg_price`.
                var filled_avg_price: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/order_class`.
                var order_class: Components.Schemas.OrderClass?
                /// - Remark: Generated from `#/components/schemas/Order/order_type`.
                var order_type: Components.Schemas.OrderType?
                /// - Remark: Generated from `#/components/schemas/Order/type`.
                var _type: Components.Schemas.OrderType?
                /// - Remark: Generated from `#/components/schemas/Order/side`.
                var side: Components.Schemas.OrderSide?
                /// - Remark: Generated from `#/components/schemas/Order/time_in_force`.
                var time_in_force: Components.Schemas.TimeInForce?
                /// - Remark: Generated from `#/components/schemas/Order/limit_price`.
                var limit_price: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/stop_price`.
                var stop_price: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/status`.
                var status: Components.Schemas.OrderStatus?
                /// - Remark: Generated from `#/components/schemas/Order/extended_hours`.
                var extended_hours: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/Order/legs`.
                var legs: [Components.Schemas.Order]?
                /// - Remark: Generated from `#/components/schemas/Order/trail_price`.
                var trail_price: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/trail_percent`.
                var trail_percent: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/hwm`.
                var hwm: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/commission`.
                var commission: Swift.String?
                init(
                    id: Swift.String,
                    client_order_id: Swift.String? = nil,
                    created_at: Foundation.Date? = nil,
                    updated_at: Foundation.Date? = nil,
                    submitted_at: Foundation.Date? = nil,
                    filled_at: Foundation.Date? = nil,
                    expired_at: Foundation.Date? = nil,
                    canceled_at: Foundation.Date? = nil,
                    failed_at: Foundation.Date? = nil,
                    replaced_at: Foundation.Date? = nil,
                    replaced_by: Swift.String? = nil,
                    replaces: Swift.String? = nil,
                    asset_id: Swift.String? = nil,
                    symbol: Swift.String,
                    asset_class: Components.Schemas.AssetClass? = nil,
                    notional: Swift.String? = nil,
                    qty: Swift.String? = nil,
                    filled_qty: Swift.String? = nil,
                    filled_avg_price: Swift.String? = nil,
                    order_class: Components.Schemas.OrderClass? = nil,
                    order_type: Components.Schemas.OrderType? = nil,
                    _type: Components.Schemas.OrderType? = nil,
                    side: Components.Schemas.OrderSide? = nil,
                    time_in_force: Components.Schemas.TimeInForce? = nil,
                    limit_price: Swift.String? = nil,
                    stop_price: Swift.String? = nil,
                    status: Components.Schemas.OrderStatus? = nil,
                    extended_hours: Swift.Bool? = nil,
                    legs: [Components.Schemas.Order]? = nil,
                    trail_price: Swift.String? = nil,
                    trail_percent: Swift.String? = nil,
                    hwm: Swift.String? = nil,
                    commission: Swift.String? = nil
                ) {
                    self.id = id
                    self.client_order_id = client_order_id
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.submitted_at = submitted_at
                    self.filled_at = filled_at
                    self.expired_at = expired_at
                    self.canceled_at = canceled_at
                    self.failed_at = failed_at
                    self.replaced_at = replaced_at
                    self.replaced_by = replaced_by
                    self.replaces = replaces
                    self.asset_id = asset_id
                    self.symbol = symbol
                    self.asset_class = asset_class
                    self.notional = notional
                    self.qty = qty
                    self.filled_qty = filled_qty
                    self.filled_avg_price = filled_avg_price
                    self.order_class = order_class
                    self.order_type = order_type
                    self._type = _type
                    self.side = side
                    self.time_in_force = time_in_force
                    self.limit_price = limit_price
                    self.stop_price = stop_price
                    self.status = status
                    self.extended_hours = extended_hours
                    self.legs = legs
                    self.trail_price = trail_price
                    self.trail_percent = trail_percent
                    self.hwm = hwm
                    self.commission = commission
                }
                typealias CodingKeys = Components.Schemas.Order.CodingKeys
            }
        }
        /// Represents the fields that are editable in an order replace/update call.
        ///
        /// Note: client_order_id is currently not editable on its own, one of the other fields must be changed at the same time to effectively replace the order
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateOrderRequest`.
        public struct UpdateOrderRequest: Codable, Hashable, Sendable {
            /// You can only patch full shares for now
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateOrderRequest/qty`.
            public var qty: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateOrderRequest/time_in_force`.
            public var time_in_force: Components.Schemas.TimeInForce?
            /// Required if original order's `type` field was limit or stop_limit
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateOrderRequest/limit_price`.
            public var limit_price: Swift.String?
            /// Required if original order's `type` field was stop or stop_limit
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateOrderRequest/stop_price`.
            public var stop_price: Swift.String?
            /// The new value of the trail_price or trail_percent
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateOrderRequest/trail`.
            public var trail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateOrderRequest/client_order_id`.
            public var client_order_id: Swift.String?
            /// Creates a new `UpdateOrderRequest`.
            ///
            /// - Parameters:
            ///   - qty: You can only patch full shares for now
            ///   - time_in_force:
            ///   - limit_price: Required if original order's `type` field was limit or stop_limit
            ///   - stop_price: Required if original order's `type` field was stop or stop_limit
            ///   - trail: The new value of the trail_price or trail_percent
            ///   - client_order_id:
            public init(
                qty: Swift.String? = nil,
                time_in_force: Components.Schemas.TimeInForce? = nil,
                limit_price: Swift.String? = nil,
                stop_price: Swift.String? = nil,
                trail: Swift.String? = nil,
                client_order_id: Swift.String? = nil
            ) {
                self.qty = qty
                self.time_in_force = time_in_force
                self.limit_price = limit_price
                self.stop_price = stop_price
                self.trail = trail
                self.client_order_id = client_order_id
            }
            public enum CodingKeys: String, CodingKey {
                case qty
                case time_in_force
                case limit_price
                case stop_price
                case trail
                case client_order_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/Bank`.
        public struct Bank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Bank/id`.
            public var id: Swift.String
            /// Format: 2020-01-01T01:01:01Z
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/created_at`.
            public var created_at: Foundation.Date
            /// Format: 2020-01-01T01:01:01Z
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Bank/account_id`.
            public var account_id: Swift.String?
            /// QUEUED, SENT_TO_CLEARING, APPROVED, CANCELED
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case QUEUED = "QUEUED"
                case SENT_TO_CLEARING = "SENT_TO_CLEARING"
                case APPROVED = "APPROVED"
                case CANCELED = "CANCELED"
            }
            /// QUEUED, SENT_TO_CLEARING, APPROVED, CANCELED
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/status`.
            public var status: Components.Schemas.Bank.statusPayload?
            /// Name of recipient bank
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/name`.
            public var name: Swift.String
            /// 9-Digit ABA RTN (Routing Number) or BIC
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/bank_code`.
            public var bank_code: Swift.String
            /// ABA (Domestic) or BIC (International)
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/bank_code_type`.
            @frozen public enum bank_code_typePayload: String, Codable, Hashable, Sendable {
                case ABA = "ABA"
                case BIC = "BIC"
            }
            /// ABA (Domestic) or BIC (International)
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/bank_code_type`.
            public var bank_code_type: Components.Schemas.Bank.bank_code_typePayload
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/country`.
            public var country: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/state_province`.
            public var state_province: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/postal_code`.
            public var postal_code: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/city`.
            public var city: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/Bank/street_address`.
            public var street_address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bank/account_number`.
            public var account_number: Swift.String
            /// Creates a new `Bank`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created_at: Format: 2020-01-01T01:01:01Z
            ///   - updated_at: Format: 2020-01-01T01:01:01Z
            ///   - account_id:
            ///   - status: QUEUED, SENT_TO_CLEARING, APPROVED, CANCELED
            ///   - name: Name of recipient bank
            ///   - bank_code: 9-Digit ABA RTN (Routing Number) or BIC
            ///   - bank_code_type: ABA (Domestic) or BIC (International)
            ///   - country: Only for international banks
            ///   - state_province: Only for international banks
            ///   - postal_code: Only for international banks
            ///   - city: Only for international banks
            ///   - street_address: Only for international banks
            ///   - account_number:
            public init(
                id: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                account_id: Swift.String? = nil,
                status: Components.Schemas.Bank.statusPayload? = nil,
                name: Swift.String,
                bank_code: Swift.String,
                bank_code_type: Components.Schemas.Bank.bank_code_typePayload,
                country: Swift.String? = nil,
                state_province: Swift.String? = nil,
                postal_code: Swift.String? = nil,
                city: Swift.String? = nil,
                street_address: Swift.String? = nil,
                account_number: Swift.String
            ) {
                self.id = id
                self.created_at = created_at
                self.updated_at = updated_at
                self.account_id = account_id
                self.status = status
                self.name = name
                self.bank_code = bank_code
                self.bank_code_type = bank_code_type
                self.country = country
                self.state_province = state_province
                self.postal_code = postal_code
                self.city = city
                self.street_address = street_address
                self.account_number = account_number
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case updated_at
                case account_id
                case status
                case name
                case bank_code
                case bank_code_type
                case country
                case state_province
                case postal_code
                case city
                case street_address
                case account_number
            }
        }
        /// Represents the possible fields to send when creating a new associated Bank resource for an account
        ///
        /// - Remark: Generated from `#/components/schemas/CreateBankRequest`.
        public struct CreateBankRequest: Codable, Hashable, Sendable {
            /// Name of recipient bank
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/name`.
            public var name: Swift.String
            /// 9-Digit ABA RTN (Routing Number) or BIC
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/bank_code`.
            public var bank_code: Swift.String
            /// ABA (Domestic) or BIC (International)
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/bank_code_type`.
            @frozen public enum bank_code_typePayload: String, Codable, Hashable, Sendable {
                case ABA = "ABA"
                case BIC = "BIC"
            }
            /// ABA (Domestic) or BIC (International)
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/bank_code_type`.
            public var bank_code_type: Components.Schemas.CreateBankRequest.bank_code_typePayload
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/country`.
            public var country: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/state_province`.
            public var state_province: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/postal_code`.
            public var postal_code: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/city`.
            public var city: Swift.String?
            /// Only for international banks
            ///
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/street_address`.
            public var street_address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateBankRequest/account_number`.
            public var account_number: Swift.String
            /// Creates a new `CreateBankRequest`.
            ///
            /// - Parameters:
            ///   - name: Name of recipient bank
            ///   - bank_code: 9-Digit ABA RTN (Routing Number) or BIC
            ///   - bank_code_type: ABA (Domestic) or BIC (International)
            ///   - country: Only for international banks
            ///   - state_province: Only for international banks
            ///   - postal_code: Only for international banks
            ///   - city: Only for international banks
            ///   - street_address: Only for international banks
            ///   - account_number:
            public init(
                name: Swift.String,
                bank_code: Swift.String,
                bank_code_type: Components.Schemas.CreateBankRequest.bank_code_typePayload,
                country: Swift.String? = nil,
                state_province: Swift.String? = nil,
                postal_code: Swift.String? = nil,
                city: Swift.String? = nil,
                street_address: Swift.String? = nil,
                account_number: Swift.String
            ) {
                self.name = name
                self.bank_code = bank_code
                self.bank_code_type = bank_code_type
                self.country = country
                self.state_province = state_province
                self.postal_code = postal_code
                self.city = city
                self.street_address = street_address
                self.account_number = account_number
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case bank_code
                case bank_code_type
                case country
                case state_province
                case postal_code
                case city
                case street_address
                case account_number
            }
        }
        /// TODO: Remove this model
        ///
        /// - Remark: Generated from `#/components/schemas/IdentifiedResource`.
        public struct IdentifiedResource: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IdentifiedResource/id`.
            public var id: Swift.String
            /// Format: 2020-01-01T01:01:01Z
            ///
            /// - Remark: Generated from `#/components/schemas/IdentifiedResource/created_at`.
            public var created_at: Foundation.Date
            /// Format: 2020-01-01T01:01:01Z
            ///
            /// - Remark: Generated from `#/components/schemas/IdentifiedResource/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `IdentifiedResource`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created_at: Format: 2020-01-01T01:01:01Z
            ///   - updated_at: Format: 2020-01-01T01:01:01Z
            public init(
                id: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.id = id
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case updated_at
            }
        }
        /// - Remark: Generated from `#/components/schemas/ACHRelationship`.
        public struct ACHRelationship: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/id`.
            public var id: Swift.String
            /// Format: 2020-01-01T01:01:01Z
            ///
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/created_at`.
            public var created_at: Foundation.Date
            /// Format: 2020-01-01T01:01:01Z
            ///
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/account_id`.
            public var account_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case QUEUED = "QUEUED"
                case APPROVED = "APPROVED"
                case PENDING = "PENDING"
                case CANCEL_REQUESTED = "CANCEL_REQUESTED"
            }
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/status`.
            public var status: Components.Schemas.ACHRelationship.statusPayload
            /// Name of the account owner
            ///
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/account_owner_name`.
            public var account_owner_name: Swift.String
            /// Must be CHECKING or SAVINGS
            ///
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/bank_account_type`.
            @frozen public enum bank_account_typePayload: String, Codable, Hashable, Sendable {
                case CHECKING = "CHECKING"
                case SAVINGS = "SAVINGS"
            }
            /// Must be CHECKING or SAVINGS
            ///
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/bank_account_type`.
            public var bank_account_type: Components.Schemas.ACHRelationship.bank_account_typePayload?
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/bank_account_number`.
            public var bank_account_number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/bank_routing_number`.
            public var bank_routing_number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ACHRelationship/nickname`.
            public var nickname: Swift.String?
            /// Creates a new `ACHRelationship`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created_at: Format: 2020-01-01T01:01:01Z
            ///   - updated_at: Format: 2020-01-01T01:01:01Z
            ///   - account_id:
            ///   - status:
            ///   - account_owner_name: Name of the account owner
            ///   - bank_account_type: Must be CHECKING or SAVINGS
            ///   - bank_account_number:
            ///   - bank_routing_number:
            ///   - nickname:
            public init(
                id: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                account_id: Swift.String,
                status: Components.Schemas.ACHRelationship.statusPayload,
                account_owner_name: Swift.String,
                bank_account_type: Components.Schemas.ACHRelationship.bank_account_typePayload? = nil,
                bank_account_number: Swift.String? = nil,
                bank_routing_number: Swift.String? = nil,
                nickname: Swift.String? = nil
            ) {
                self.id = id
                self.created_at = created_at
                self.updated_at = updated_at
                self.account_id = account_id
                self.status = status
                self.account_owner_name = account_owner_name
                self.bank_account_type = bank_account_type
                self.bank_account_number = bank_account_number
                self.bank_routing_number = bank_routing_number
                self.nickname = nickname
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case updated_at
                case account_id
                case status
                case account_owner_name
                case bank_account_type
                case bank_account_number
                case bank_routing_number
                case nickname
            }
        }
        /// Represents the fields used in creation of a new ACHRelationship.
        ///
        /// You can create an ACHRelationship by passing the required fields here or if you have an account with Plaid you can use our integration with Plaid to create a relationship.
        ///
        /// Please see the documentation [here](https://alpaca.markets/docs/api-references/broker-api/funding/ach/#plaid-integration-for-bank-transfers) for more info on using Plaid with Alpaca
        ///
        /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest`.
        public struct CreateACHRelationshipRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest/account_owner_name`.
            public var account_owner_name: Swift.String
            /// Must be CHECKING or SAVINGS
            ///
            /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest/bank_account_type`.
            @frozen public enum bank_account_typePayload: String, Codable, Hashable, Sendable {
                case CHECKING = "CHECKING"
                case SAVINGS = "SAVINGS"
            }
            /// Must be CHECKING or SAVINGS
            ///
            /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest/bank_account_type`.
            public var bank_account_type: Components.Schemas.CreateACHRelationshipRequest.bank_account_typePayload
            /// In sandbox, this still must be a valid format
            ///
            /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest/bank_account_number`.
            public var bank_account_number: Swift.String
            /// In sandbox, this still must be a valid format
            ///
            /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest/bank_routing_number`.
            public var bank_routing_number: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest/nickname`.
            public var nickname: Swift.String?
            /// If using Plaid, you can specify a Plaid processor token here 
            ///
            /// - Remark: Generated from `#/components/schemas/CreateACHRelationshipRequest/processor_token`.
            public var processor_token: Swift.String?
            /// Creates a new `CreateACHRelationshipRequest`.
            ///
            /// - Parameters:
            ///   - account_owner_name:
            ///   - bank_account_type: Must be CHECKING or SAVINGS
            ///   - bank_account_number: In sandbox, this still must be a valid format
            ///   - bank_routing_number: In sandbox, this still must be a valid format
            ///   - nickname:
            ///   - processor_token: If using Plaid, you can specify a Plaid processor token here 
            public init(
                account_owner_name: Swift.String,
                bank_account_type: Components.Schemas.CreateACHRelationshipRequest.bank_account_typePayload,
                bank_account_number: Swift.String,
                bank_routing_number: Swift.String,
                nickname: Swift.String? = nil,
                processor_token: Swift.String? = nil
            ) {
                self.account_owner_name = account_owner_name
                self.bank_account_type = bank_account_type
                self.bank_account_number = bank_account_number
                self.bank_routing_number = bank_routing_number
                self.nickname = nickname
                self.processor_token = processor_token
            }
            public enum CodingKeys: String, CodingKey {
                case account_owner_name
                case bank_account_type
                case bank_account_number
                case bank_routing_number
                case nickname
                case processor_token
            }
        }
        /// - Remark: Generated from `#/components/schemas/UntypedACHTransferData`.
        public struct UntypedACHTransferData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UntypedACHTransferData/value1`.
            public var value1: Components.Schemas.UntypedTransferData
            /// - Remark: Generated from `#/components/schemas/UntypedACHTransferData/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UntypedACHTransferData/value2/relationship_id`.
                public var relationship_id: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - relationship_id:
                public init(relationship_id: Swift.String) {
                    self.relationship_id = relationship_id
                }
                public enum CodingKeys: String, CodingKey {
                    case relationship_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/UntypedACHTransferData/value2`.
            public var value2: Components.Schemas.UntypedACHTransferData.Value2Payload
            /// Creates a new `UntypedACHTransferData`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.UntypedTransferData,
                value2: Components.Schemas.UntypedACHTransferData.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransferResource`.
        public struct TransferResource: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TransferResource/value1`.
            public var value1: Components.Schemas.IdentifiedResource
            /// - Remark: Generated from `#/components/schemas/TransferResource/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TransferResource/value2/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case ach = "ach"
                    case wire = "wire"
                }
                /// - Remark: Generated from `#/components/schemas/TransferResource/value2/type`.
                public var _type: Components.Schemas.TransferResource.Value2Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/TransferResource/value2/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case QUEUED = "QUEUED"
                    case APPROVAL_PENDING = "APPROVAL_PENDING"
                    case PENDING = "PENDING"
                    case SENT_TO_CLEARING = "SENT_TO_CLEARING"
                    case REJECTED = "REJECTED"
                    case CANCELED = "CANCELED"
                    case APPROVED = "APPROVED"
                    case COMPLETE = "COMPLETE"
                    case RETURNED = "RETURNED"
                }
                /// - Remark: Generated from `#/components/schemas/TransferResource/value2/status`.
                public var status: Components.Schemas.TransferResource.Value2Payload.statusPayload
                /// - Remark: Generated from `#/components/schemas/TransferResource/value2/account_id`.
                public var account_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/TransferResource/value2/reason`.
                public var reason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/TransferResource/value2/expires_at`.
                public var expires_at: Foundation.Date
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - status:
                ///   - account_id:
                ///   - reason:
                ///   - expires_at:
                public init(
                    _type: Components.Schemas.TransferResource.Value2Payload._typePayload,
                    status: Components.Schemas.TransferResource.Value2Payload.statusPayload,
                    account_id: Swift.String,
                    reason: Swift.String? = nil,
                    expires_at: Foundation.Date
                ) {
                    self._type = _type
                    self.status = status
                    self.account_id = account_id
                    self.reason = reason
                    self.expires_at = expires_at
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case status
                    case account_id
                    case reason
                    case expires_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/TransferResource/value2`.
            public var value2: Components.Schemas.TransferResource.Value2Payload
            /// - Remark: Generated from `#/components/schemas/TransferResource/value3`.
            @frozen public enum Value3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TransferResource/value3/UntypedACHTransferData`.
                case ach(Components.Schemas.UntypedACHTransferData)
                /// - Remark: Generated from `#/components/schemas/TransferResource/value3/UntypedWireTransferData`.
                case wire(Components.Schemas.UntypedWireTransferData)
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    let discriminator = try container.decode(
                        Swift.String.self,
                        forKey: ._type
                    )
                    switch discriminator {
                    case "ach":
                        self = .ach(try .init(from: decoder))
                    case "wire":
                        self = .wire(try .init(from: decoder))
                    default:
                        throw Swift.DecodingError.unknownOneOfDiscriminator(
                            discriminatorKey: CodingKeys._type,
                            discriminatorValue: discriminator,
                            codingPath: decoder.codingPath
                        )
                    }
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .ach(value):
                        try value.encode(to: encoder)
                    case let .wire(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/TransferResource/value3`.
            public var value3: Components.Schemas.TransferResource.Value3Payload
            /// Creates a new `TransferResource`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.IdentifiedResource,
                value2: Components.Schemas.TransferResource.Value2Payload,
                value3: Components.Schemas.TransferResource.Value3Payload
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransferData`.
        public struct TransferData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TransferData/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TransferData/value1/transfer_type`.
                @frozen public enum transfer_typePayload: String, Codable, Hashable, Sendable {
                    case ach = "ach"
                    case wire = "wire"
                }
                /// - Remark: Generated from `#/components/schemas/TransferData/value1/transfer_type`.
                public var transfer_type: Components.Schemas.TransferData.Value1Payload.transfer_typePayload
                /// - Remark: Generated from `#/components/schemas/TransferData/value1/timing`.
                @frozen public enum timingPayload: String, Codable, Hashable, Sendable {
                    case immediate = "immediate"
                }
                /// - Remark: Generated from `#/components/schemas/TransferData/value1/timing`.
                public var timing: Components.Schemas.TransferData.Value1Payload.timingPayload?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - transfer_type:
                ///   - timing:
                public init(
                    transfer_type: Components.Schemas.TransferData.Value1Payload.transfer_typePayload,
                    timing: Components.Schemas.TransferData.Value1Payload.timingPayload? = nil
                ) {
                    self.transfer_type = transfer_type
                    self.timing = timing
                }
                public enum CodingKeys: String, CodingKey {
                    case transfer_type
                    case timing
                }
            }
            /// - Remark: Generated from `#/components/schemas/TransferData/value1`.
            public var value1: Components.Schemas.TransferData.Value1Payload
            /// - Remark: Generated from `#/components/schemas/TransferData/value2`.
            @frozen public enum Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TransferData/value2/UntypedACHTransferData`.
                case ach(Components.Schemas.UntypedACHTransferData)
                /// - Remark: Generated from `#/components/schemas/TransferData/value2/UntypedWireTransferData`.
                case wire(Components.Schemas.UntypedWireTransferData)
                public enum CodingKeys: String, CodingKey {
                    case transfer_type
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    let discriminator = try container.decode(
                        Swift.String.self,
                        forKey: .transfer_type
                    )
                    switch discriminator {
                    case "ach":
                        self = .ach(try .init(from: decoder))
                    case "wire":
                        self = .wire(try .init(from: decoder))
                    default:
                        throw Swift.DecodingError.unknownOneOfDiscriminator(
                            discriminatorKey: CodingKeys.transfer_type,
                            discriminatorValue: discriminator,
                            codingPath: decoder.codingPath
                        )
                    }
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .ach(value):
                        try value.encode(to: encoder)
                    case let .wire(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/TransferData/value2`.
            public var value2: Components.Schemas.TransferData.Value2Payload
            /// Creates a new `TransferData`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.TransferData.Value1Payload,
                value2: Components.Schemas.TransferData.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/UntypedWireTransferData`.
        public struct UntypedWireTransferData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UntypedWireTransferData/value1`.
            public var value1: Components.Schemas.UntypedTransferData
            /// - Remark: Generated from `#/components/schemas/UntypedWireTransferData/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UntypedWireTransferData/value2/additional_information`.
                public var additional_information: Swift.String?
                /// - Remark: Generated from `#/components/schemas/UntypedWireTransferData/value2/bank_id`.
                public var bank_id: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - additional_information:
                ///   - bank_id:
                public init(
                    additional_information: Swift.String? = nil,
                    bank_id: Swift.String
                ) {
                    self.additional_information = additional_information
                    self.bank_id = bank_id
                }
                public enum CodingKeys: String, CodingKey {
                    case additional_information
                    case bank_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/UntypedWireTransferData/value2`.
            public var value2: Components.Schemas.UntypedWireTransferData.Value2Payload
            /// Creates a new `UntypedWireTransferData`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.UntypedTransferData,
                value2: Components.Schemas.UntypedWireTransferData.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/UntypedTransferData`.
        public struct UntypedTransferData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UntypedTransferData/amount`.
            public var amount: Swift.String
            /// - Remark: Generated from `#/components/schemas/UntypedTransferData/direction`.
            @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                case INCOMING = "INCOMING"
                case OUTGOING = "OUTGOING"
            }
            /// - Remark: Generated from `#/components/schemas/UntypedTransferData/direction`.
            public var direction: Components.Schemas.UntypedTransferData.directionPayload
            /// Creates a new `UntypedTransferData`.
            ///
            /// - Parameters:
            ///   - amount:
            ///   - direction:
            public init(
                amount: Swift.String,
                direction: Components.Schemas.UntypedTransferData.directionPayload
            ) {
                self.amount = amount
                self.direction = direction
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case direction
            }
        }
        /// [See main docs here](https://alpaca.markets/docs/api-references/broker-api/funding/transfers/#creating-a-transfer-entity)
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTransferRequest`.
        public struct CreateTransferRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTransferRequest/transfer_type`.
            public var transfer_type: Components.Schemas.TransferType
            /// Required if type = `ach`
            ///
            /// The ach_relationship created for the account_id [here](https://alpaca.markets/docs/api-references/broker-api/funding/ach/#creating-an-ach-relationship)
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTransferRequest/relationship_id`.
            public var relationship_id: Swift.String?
            /// Required if type = `wire`
            ///
            /// The bank_relationship created for the account_id [here](https://alpaca.markets/docs/api-references/broker-api/funding/bank/#creating-a-new-bank-relationship)
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTransferRequest/bank_id`.
            public var bank_id: Swift.String?
            /// Must be > 0.00
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTransferRequest/amount`.
            public var amount: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateTransferRequest/direction`.
            public var direction: Components.Schemas.TransferDirection
            /// - Remark: Generated from `#/components/schemas/CreateTransferRequest/timing`.
            public var timing: Components.Schemas.TransferTiming
            /// Additional details for when type = `wire`
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTransferRequest/additional_information`.
            public var additional_information: Swift.String?
            /// Creates a new `CreateTransferRequest`.
            ///
            /// - Parameters:
            ///   - transfer_type:
            ///   - relationship_id: Required if type = `ach`
            ///   - bank_id: Required if type = `wire`
            ///   - amount: Must be > 0.00
            ///   - direction:
            ///   - timing:
            ///   - additional_information: Additional details for when type = `wire`
            public init(
                transfer_type: Components.Schemas.TransferType,
                relationship_id: Swift.String? = nil,
                bank_id: Swift.String? = nil,
                amount: Swift.String,
                direction: Components.Schemas.TransferDirection,
                timing: Components.Schemas.TransferTiming,
                additional_information: Swift.String? = nil
            ) {
                self.transfer_type = transfer_type
                self.relationship_id = relationship_id
                self.bank_id = bank_id
                self.amount = amount
                self.direction = direction
                self.timing = timing
                self.additional_information = additional_information
            }
            public enum CodingKeys: String, CodingKey {
                case transfer_type
                case relationship_id
                case bank_id
                case amount
                case direction
                case timing
                case additional_information
            }
        }
        /// Transfers allow you to transfer money/balance into your end customers' account (deposits) or out (withdrawal).
        ///
        /// [Main docs here](https://alpaca.markets/docs/api-references/broker-api/funding/transfers/#the-transfer-object)
        ///
        /// - Remark: Generated from `#/components/schemas/Transfer`.
        public struct Transfer: Codable, Hashable, Sendable {
            /// The transfer ID
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/id`.
            public var id: Swift.String
            /// The ACH relationship ID only present if type = "ach"
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/relationship_id`.
            public var relationship_id: Swift.String?
            /// The ID of the Bank, only present if type = "wire"
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/bank_id`.
            public var bank_id: Swift.String?
            /// The account ID
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/account_id`.
            public var account_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transfer/type`.
            public var _type: Components.Schemas.TransferType
            /// - Remark: Generated from `#/components/schemas/Transfer/status`.
            public var status: Components.Schemas.TransferStatus
            /// Cause of the status
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/reason`.
            public var reason: Swift.String?
            /// Must be > 0.00
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/amount`.
            public var amount: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transfer/direction`.
            public var direction: Components.Schemas.TransferDirection
            /// Timedate when transfer was created
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/created_at`.
            public var created_at: Foundation.Date
            /// Timedate when transfer was updated
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/updated_at`.
            public var updated_at: Foundation.Date?
            /// Timedate when transfer was expired
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/expires_at`.
            public var expires_at: Foundation.Date?
            /// Additional information. Only applies when type = "wire".
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/additional_information`.
            public var additional_information: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transfer/hold_until`.
            public var hold_until: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Transfer/instant_amount`.
            public var instant_amount: Swift.String?
            /// Creates a new `Transfer`.
            ///
            /// - Parameters:
            ///   - id: The transfer ID
            ///   - relationship_id: The ACH relationship ID only present if type = "ach"
            ///   - bank_id: The ID of the Bank, only present if type = "wire"
            ///   - account_id: The account ID
            ///   - _type:
            ///   - status:
            ///   - reason: Cause of the status
            ///   - amount: Must be > 0.00
            ///   - direction:
            ///   - created_at: Timedate when transfer was created
            ///   - updated_at: Timedate when transfer was updated
            ///   - expires_at: Timedate when transfer was expired
            ///   - additional_information: Additional information. Only applies when type = "wire".
            ///   - hold_until:
            ///   - instant_amount:
            public init(
                id: Swift.String,
                relationship_id: Swift.String? = nil,
                bank_id: Swift.String? = nil,
                account_id: Swift.String,
                _type: Components.Schemas.TransferType,
                status: Components.Schemas.TransferStatus,
                reason: Swift.String? = nil,
                amount: Swift.String,
                direction: Components.Schemas.TransferDirection,
                created_at: Foundation.Date,
                updated_at: Foundation.Date? = nil,
                expires_at: Foundation.Date? = nil,
                additional_information: Swift.String? = nil,
                hold_until: Foundation.Date? = nil,
                instant_amount: Swift.String? = nil
            ) {
                self.id = id
                self.relationship_id = relationship_id
                self.bank_id = bank_id
                self.account_id = account_id
                self._type = _type
                self.status = status
                self.reason = reason
                self.amount = amount
                self.direction = direction
                self.created_at = created_at
                self.updated_at = updated_at
                self.expires_at = expires_at
                self.additional_information = additional_information
                self.hold_until = hold_until
                self.instant_amount = instant_amount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case relationship_id
                case bank_id
                case account_id
                case _type = "type"
                case status
                case reason
                case amount
                case direction
                case created_at
                case updated_at
                case expires_at
                case additional_information
                case hold_until
                case instant_amount
            }
        }
        /// **NOTE:** The Sandbox environment currently only supports `ach`
        ///
        /// - **ach**
        /// Transfer via ACH (US Only).
        /// - **wire**
        /// Transfer via wire (international).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TransferType`.
        @frozen public enum TransferType: String, Codable, Hashable, Sendable {
            case ach = "ach"
            case instant_ach = "instant_ach"
            case wire = "wire"
        }
        /// - **INCOMING**
        /// Funds incoming to user’s account (deposit).
        /// - **OUTGOING**
        /// Funds outgoing from user’s account (withdrawal).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TransferDirection`.
        @frozen public enum TransferDirection: String, Codable, Hashable, Sendable {
            case INCOMING = "INCOMING"
            case OUTGOING = "OUTGOING"
        }
        /// Only `immediate` is currently supported.
        ///
        /// values:
        ///
        /// - **immediate**
        ///
        /// - **next_day**
        ///
        /// - Remark: Generated from `#/components/schemas/TransferTiming`.
        @frozen public enum TransferTiming: String, Codable, Hashable, Sendable {
            case immediate = "immediate"
        }
        /// - **QUEUED**
        /// Transfer is in queue to be processed.
        /// - **APPROVAL_PENDING**
        /// Transfer is pending approval.
        /// - **PENDING**
        /// Transfer is pending processing.
        /// - **SENT_TO_CLEARING**
        /// Transfer is being processed by the clearing firm.
        /// - **REJECTED**
        /// Transfer is rejected.
        /// - **CANCELED**
        /// Client initiated transfer cancellation.
        /// - **APPROVED**
        /// Transfer is approved.
        /// - **COMPLETE**
        /// Transfer is completed.
        /// - **RETURNED**
        /// The bank issued an ACH return for the transfer.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TransferStatus`.
        @frozen public enum TransferStatus: String, Codable, Hashable, Sendable {
            case QUEUED = "QUEUED"
            case APPROVAL_PENDING = "APPROVAL_PENDING"
            case PENDING = "PENDING"
            case SENT_TO_CLEARING = "SENT_TO_CLEARING"
            case REJECTED = "REJECTED"
            case CANCELED = "CANCELED"
            case APPROVED = "APPROVED"
            case COMPLETE = "COMPLETE"
            case RETURNED = "RETURNED"
        }
        /// Represents a cash or security transfer between accounts, as specified by the `entry_type` parameter.
        ///
        /// - Remark: Generated from `#/components/schemas/Journal`.
        public struct Journal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Journal/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// journal ID
                ///
                /// - Remark: Generated from `#/components/schemas/Journal/value1/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/Journal/value1/entry_type`.
                public var entry_type: Components.Schemas.JournalEntryType
                /// account ID the shares go from
                ///
                /// - Remark: Generated from `#/components/schemas/Journal/value1/from_account`.
                public var from_account: Swift.String
                /// account ID the shares go to
                ///
                /// - Remark: Generated from `#/components/schemas/Journal/value1/to_account`.
                public var to_account: Swift.String
                /// - Remark: Generated from `#/components/schemas/Journal/value1/settle_date`.
                public var settle_date: Swift.String
                /// - Remark: Generated from `#/components/schemas/Journal/value1/status`.
                public var status: Components.Schemas.JournalStatus?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - id: journal ID
                ///   - entry_type:
                ///   - from_account: account ID the shares go from
                ///   - to_account: account ID the shares go to
                ///   - settle_date:
                ///   - status:
                public init(
                    id: Swift.String,
                    entry_type: Components.Schemas.JournalEntryType,
                    from_account: Swift.String,
                    to_account: Swift.String,
                    settle_date: Swift.String,
                    status: Components.Schemas.JournalStatus? = nil
                ) {
                    self.id = id
                    self.entry_type = entry_type
                    self.from_account = from_account
                    self.to_account = to_account
                    self.settle_date = settle_date
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case entry_type
                    case from_account
                    case to_account
                    case settle_date
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/Journal/value1`.
            public var value1: Components.Schemas.Journal.Value1Payload
            /// - Remark: Generated from `#/components/schemas/Journal/value2`.
            @frozen public enum Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Journal/value2/case1`.
                case JNLS(Components.Schemas.JNLS)
                /// - Remark: Generated from `#/components/schemas/Journal/value2/case2`.
                case JNLC(Components.Schemas.JNLC)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .JNLS(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .JNLC(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .JNLS(value):
                        try value.encode(to: encoder)
                    case let .JNLC(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/Journal/value2`.
            public var value2: Components.Schemas.Journal.Value2Payload
            /// Creates a new `Journal`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.Journal.Value1Payload,
                value2: Components.Schemas.Journal.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// Represents the status that a Journal instance can be in.
        ///
        /// Current Values:
        ///   - pending
        ///   - canceled
        ///   - executed
        ///   - queued
        ///   - rejected
        ///   - deleted
        ///
        /// - Remark: Generated from `#/components/schemas/JournalStatus`.
        @frozen public enum JournalStatus: String, Codable, Hashable, Sendable {
            case pending = "pending"
            case canceled = "canceled"
            case executed = "executed"
            case queued = "queued"
            case rejected = "rejected"
            case deleted = "deleted"
        }
        /// This enum represents the various kinds of Journal alpaca supports.
        ///
        /// Current values are:
        ///
        /// - **JNLC**
        ///
        ///   Journal Cash between accounts
        ///
        /// - **JNLS**
        ///
        ///   Journal Securities between accounts
        ///
        /// - Remark: Generated from `#/components/schemas/JournalEntryType`.
        @frozen public enum JournalEntryType: String, Codable, Hashable, Sendable {
            case JNLC = "JNLC"
            case JNLS = "JNLS"
        }
        /// Journal information specific to securities transfers. This field is required for `Journal`s with an `entry_type` of `jnls` (securities transfers), but will be null for those with `jnlc` (cash transfers).
        ///
        /// - Remark: Generated from `#/components/schemas/JNLS`.
        public struct JNLS: Codable, Hashable, Sendable {
            /// Only valid for JNLS journals. Null for JNLC.
            ///
            /// - Remark: Generated from `#/components/schemas/JNLS/symbol`.
            public var symbol: Swift.String
            /// Only valid for JNLS journals. Null for JNLC.
            ///
            /// - Remark: Generated from `#/components/schemas/JNLS/qty`.
            public var qty: Swift.String
            /// Only valid for JNLS journals. Null for JNLC.
            ///
            /// - Remark: Generated from `#/components/schemas/JNLS/price`.
            public var price: Swift.String
            /// Creates a new `JNLS`.
            ///
            /// - Parameters:
            ///   - symbol: Only valid for JNLS journals. Null for JNLC.
            ///   - qty: Only valid for JNLS journals. Null for JNLC.
            ///   - price: Only valid for JNLS journals. Null for JNLC.
            public init(
                symbol: Swift.String,
                qty: Swift.String,
                price: Swift.String
            ) {
                self.symbol = symbol
                self.qty = qty
                self.price = price
            }
            public enum CodingKeys: String, CodingKey {
                case symbol
                case qty
                case price
            }
        }
        /// Journal information specific to cash transfers. This field is required for `Journal`s with an `entry_type` of `jnlc` (cash transfers), but will be null for those with `jnls` (securities transfers).
        ///
        /// - Remark: Generated from `#/components/schemas/JNLC`.
        public struct JNLC: Codable, Hashable, Sendable {
            /// ID the amount goes to. Only valid for JNLC journals. Null for JNLS.
            ///
            /// - Remark: Generated from `#/components/schemas/JNLC/description`.
            public var description: Swift.String?
            /// Only valid for JNLC journals. Null for JNLS.
            ///
            /// - Remark: Generated from `#/components/schemas/JNLC/net_amount`.
            public var net_amount: Swift.String
            /// Only valid for JNLC journals. Null for JNLS. Max 255 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/JNLC/transmitter_name`.
            public var transmitter_name: Swift.String?
            /// Only valid for JNLC journals. Null for JNLS.max 255 characters
            ///
            /// - Remark: Generated from `#/components/schemas/JNLC/transmitter_account_number`.
            public var transmitter_account_number: Swift.String?
            /// Only valid for JNLC journals. Null for JNLS.max 255 characters
            ///
            /// - Remark: Generated from `#/components/schemas/JNLC/transmitter_address`.
            public var transmitter_address: Swift.String?
            /// Only valid for JNLC journals. Null for JNLS.max 255 characters
            ///
            /// - Remark: Generated from `#/components/schemas/JNLC/transmitter_financial_institution`.
            public var transmitter_financial_institution: Swift.String?
            /// Only valid for JNLC journals. Null for JNLS.
            ///
            /// - Remark: Generated from `#/components/schemas/JNLC/transmitter_timestamp`.
            public var transmitter_timestamp: Foundation.Date?
            /// Creates a new `JNLC`.
            ///
            /// - Parameters:
            ///   - description: ID the amount goes to. Only valid for JNLC journals. Null for JNLS.
            ///   - net_amount: Only valid for JNLC journals. Null for JNLS.
            ///   - transmitter_name: Only valid for JNLC journals. Null for JNLS. Max 255 characters.
            ///   - transmitter_account_number: Only valid for JNLC journals. Null for JNLS.max 255 characters
            ///   - transmitter_address: Only valid for JNLC journals. Null for JNLS.max 255 characters
            ///   - transmitter_financial_institution: Only valid for JNLC journals. Null for JNLS.max 255 characters
            ///   - transmitter_timestamp: Only valid for JNLC journals. Null for JNLS.
            public init(
                description: Swift.String? = nil,
                net_amount: Swift.String,
                transmitter_name: Swift.String? = nil,
                transmitter_account_number: Swift.String? = nil,
                transmitter_address: Swift.String? = nil,
                transmitter_financial_institution: Swift.String? = nil,
                transmitter_timestamp: Foundation.Date? = nil
            ) {
                self.description = description
                self.net_amount = net_amount
                self.transmitter_name = transmitter_name
                self.transmitter_account_number = transmitter_account_number
                self.transmitter_address = transmitter_address
                self.transmitter_financial_institution = transmitter_financial_institution
                self.transmitter_timestamp = transmitter_timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case net_amount
                case transmitter_name
                case transmitter_account_number
                case transmitter_address
                case transmitter_financial_institution
                case transmitter_timestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/JournalData`.
        public struct JournalData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JournalData/entry_type`.
            public var entry_type: Components.Schemas.JournalEntryType
            /// - Remark: Generated from `#/components/schemas/JournalData/from_account`.
            public var from_account: Swift.String
            /// - Remark: Generated from `#/components/schemas/JournalData/to_account`.
            public var to_account: Swift.String
            /// Required for JNLC.
            /// The dollar amount to move. It has to be
            /// a positive value.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/JournalData/amount`.
            public var amount: Swift.String?
            /// Required for JNLS.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/JournalData/symbol`.
            public var symbol: Swift.String?
            /// Required for JNLS.
            /// The number of shares to move. It has to be
            /// a positive value.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/JournalData/qty`.
            public var qty: Swift.String?
            /// Creates a new `JournalData`.
            ///
            /// - Parameters:
            ///   - entry_type:
            ///   - from_account:
            ///   - to_account:
            ///   - amount: Required for JNLC.
            ///   - symbol: Required for JNLS.
            ///   - qty: Required for JNLS.
            public init(
                entry_type: Components.Schemas.JournalEntryType,
                from_account: Swift.String,
                to_account: Swift.String,
                amount: Swift.String? = nil,
                symbol: Swift.String? = nil,
                qty: Swift.String? = nil
            ) {
                self.entry_type = entry_type
                self.from_account = from_account
                self.to_account = to_account
                self.amount = amount
                self.symbol = symbol
                self.qty = qty
            }
            public enum CodingKeys: String, CodingKey {
                case entry_type
                case from_account
                case to_account
                case amount
                case symbol
                case qty
            }
        }
        /// - Remark: Generated from `#/components/schemas/JournalResource`.
        @frozen public enum JournalResource: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JournalResource/JNLC`.
            case JNLC(Components.Schemas.JNLC)
            /// - Remark: Generated from `#/components/schemas/JournalResource/JNLS`.
            case JNLS(Components.Schemas.JNLS)
            public enum CodingKeys: String, CodingKey {
                case entry_type
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: .entry_type
                )
                switch discriminator {
                case "JNLC":
                    self = .JNLC(try .init(from: decoder))
                case "JNLS":
                    self = .JNLS(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys.entry_type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .JNLC(value):
                    try value.encode(to: encoder)
                case let .JNLS(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Journals API allows you to move cash or securities from one account to another.
        ///
        /// This model represents the fields you can specify when creating a Journal
        ///
        /// Fixture Rules
        ///
        /// - No Fixtures
        ///   - anything below limit is executed immediately
        ///   - anything above limit is pending until executed at EOD,
        /// - With Fixtures
        ///   - any status = rejected will be rejected EOD
        ///   - any status = pending will be pending forever
        ///
        /// - Remark: Generated from `#/components/schemas/CreateJournalRequest`.
        public struct CreateJournalRequest: Codable, Hashable, Sendable {
            /// The account_id you wish to journal to
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/to_account`.
            public var to_account: Swift.String
            /// The account_id you wish to journal from
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/from_account`.
            public var from_account: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/entry_type`.
            public var entry_type: Components.Schemas.JournalEntryType
            /// Required if `entry_type` = `JNLC`
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/amount`.
            public var amount: Swift.String?
            /// Required if `entry_type` = `JNLS`
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/symbol`.
            public var symbol: Swift.String?
            /// Required if `entry_type` = `JNLS`
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/qty`.
            public var qty: Swift.String?
            /// Max 1024 characters. Can include fixtures for amounts that are above the transaction limit
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/description`.
            public var description: Swift.String?
            /// Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/transmitter_name`.
            public var transmitter_name: Swift.String?
            /// Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/transmitter_account_number`.
            public var transmitter_account_number: Swift.String?
            /// Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/transmitter_address`.
            public var transmitter_address: Swift.String?
            /// Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/transmitter_financial_institution`.
            public var transmitter_financial_institution: Swift.String?
            /// RFC 3339 format. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateJournalRequest/transmitter_timestamp`.
            public var transmitter_timestamp: Foundation.Date?
            /// Creates a new `CreateJournalRequest`.
            ///
            /// - Parameters:
            ///   - to_account: The account_id you wish to journal to
            ///   - from_account: The account_id you wish to journal from
            ///   - entry_type:
            ///   - amount: Required if `entry_type` = `JNLC`
            ///   - symbol: Required if `entry_type` = `JNLS`
            ///   - qty: Required if `entry_type` = `JNLS`
            ///   - description: Max 1024 characters. Can include fixtures for amounts that are above the transaction limit
            ///   - transmitter_name: Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///   - transmitter_account_number: Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///   - transmitter_address: Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///   - transmitter_financial_institution: Max 255 characters. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            ///   - transmitter_timestamp: RFC 3339 format. See more details about [Travel Rule](https://alpaca.markets/docs/broker/integration/funding/#travel-rule) in our main documentation.
            public init(
                to_account: Swift.String,
                from_account: Swift.String,
                entry_type: Components.Schemas.JournalEntryType,
                amount: Swift.String? = nil,
                symbol: Swift.String? = nil,
                qty: Swift.String? = nil,
                description: Swift.String? = nil,
                transmitter_name: Swift.String? = nil,
                transmitter_account_number: Swift.String? = nil,
                transmitter_address: Swift.String? = nil,
                transmitter_financial_institution: Swift.String? = nil,
                transmitter_timestamp: Foundation.Date? = nil
            ) {
                self.to_account = to_account
                self.from_account = from_account
                self.entry_type = entry_type
                self.amount = amount
                self.symbol = symbol
                self.qty = qty
                self.description = description
                self.transmitter_name = transmitter_name
                self.transmitter_account_number = transmitter_account_number
                self.transmitter_address = transmitter_address
                self.transmitter_financial_institution = transmitter_financial_institution
                self.transmitter_timestamp = transmitter_timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case to_account
                case from_account
                case entry_type
                case amount
                case symbol
                case qty
                case description
                case transmitter_name
                case transmitter_account_number
                case transmitter_address
                case transmitter_financial_institution
                case transmitter_timestamp
            }
        }
        /// Journals API allows you to move cash or securities from one account to another.
        ///
        /// This model represents the fields you can specify when creating a request of many Journals out of one account to many others at once.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchJournalRequest`.
        public struct BatchJournalRequest: Codable, Hashable, Sendable {
            /// Only supports `JNLC` for now
            ///
            /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/entry_type`.
            @frozen public enum entry_typePayload: String, Codable, Hashable, Sendable {
                case JNLC = "JNLC"
            }
            /// Only supports `JNLC` for now
            ///
            /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/entry_type`.
            public var entry_type: Components.Schemas.BatchJournalRequest.entry_typePayload
            /// The account id that is the originator of the funds being moved. Most likely is your Sweep Firm Account
            ///
            /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/from_account`.
            public var from_account: Swift.String
            /// Journal description, gets returned in the response
            ///
            /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/entriesPayload`.
            public struct entriesPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the account that you want to journal funds into
                ///
                /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/entriesPayload/to_account`.
                public var to_account: Swift.String
                /// Journal amount in USD
                ///
                /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/entriesPayload/amount`.
                public var amount: Swift.String
                /// Creates a new `entriesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - to_account: The ID of the account that you want to journal funds into
                ///   - amount: Journal amount in USD
                public init(
                    to_account: Swift.String,
                    amount: Swift.String
                ) {
                    self.to_account = to_account
                    self.amount = amount
                }
                public enum CodingKeys: String, CodingKey {
                    case to_account
                    case amount
                }
            }
            /// An array of objects describing to what accounts you want to move funds into and how much to move into for each account
            ///
            /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/entries`.
            public typealias entriesPayload = [Components.Schemas.BatchJournalRequest.entriesPayloadPayload]
            /// An array of objects describing to what accounts you want to move funds into and how much to move into for each account
            ///
            /// - Remark: Generated from `#/components/schemas/BatchJournalRequest/entries`.
            public var entries: Components.Schemas.BatchJournalRequest.entriesPayload
            /// Creates a new `BatchJournalRequest`.
            ///
            /// - Parameters:
            ///   - entry_type: Only supports `JNLC` for now
            ///   - from_account: The account id that is the originator of the funds being moved. Most likely is your Sweep Firm Account
            ///   - description: Journal description, gets returned in the response
            ///   - entries: An array of objects describing to what accounts you want to move funds into and how much to move into for each account
            public init(
                entry_type: Components.Schemas.BatchJournalRequest.entry_typePayload,
                from_account: Swift.String,
                description: Swift.String? = nil,
                entries: Components.Schemas.BatchJournalRequest.entriesPayload
            ) {
                self.entry_type = entry_type
                self.from_account = from_account
                self.description = description
                self.entries = entries
            }
            public enum CodingKeys: String, CodingKey {
                case entry_type
                case from_account
                case description
                case entries
            }
        }
        /// A Journal object with an extra attribute error_message in the case when a specific account fails to receive a journal.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchJournalResponse`.
        public struct BatchJournalResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BatchJournalResponse/value1`.
            public var value1: Components.Schemas.Journal
            /// - Remark: Generated from `#/components/schemas/BatchJournalResponse/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// Description of why this journal transaction failed
                ///
                /// - Remark: Generated from `#/components/schemas/BatchJournalResponse/value2/error_message`.
                public var error_message: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - error_message: Description of why this journal transaction failed
                public init(error_message: Swift.String) {
                    self.error_message = error_message
                }
                public enum CodingKeys: String, CodingKey {
                    case error_message
                }
            }
            /// - Remark: Generated from `#/components/schemas/BatchJournalResponse/value2`.
            public var value2: Components.Schemas.BatchJournalResponse.Value2Payload
            /// Creates a new `BatchJournalResponse`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.Journal,
                value2: Components.Schemas.BatchJournalResponse.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// Assets are sorted by asset class, exchange and symbol. Some assets are not tradable with Alpaca. These assets will be marked with the flag tradable=false
        ///
        /// - Remark: Generated from `#/components/schemas/Asset`.
        public struct Asset: Codable, Hashable, Sendable {
            /// Asset ID
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Asset/class`.
            public var _class: Components.Schemas.AssetClass
            /// - Remark: Generated from `#/components/schemas/Asset/exchange`.
            public var exchange: Components.Schemas.Exchange?
            /// The symbol of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/symbol`.
            public var symbol: Swift.String
            /// The official name of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/name`.
            public var name: Swift.String?
            /// active or inactive
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case inactive = "inactive"
            }
            /// active or inactive
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/status`.
            public var status: Components.Schemas.Asset.statusPayload?
            /// Asset is tradable on Alpaca or not
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/tradable`.
            public var tradable: Swift.Bool?
            /// Asset is marginable or not
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/marginable`.
            public var marginable: Swift.Bool?
            /// Asset is shortable or not
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/shortable`.
            public var shortable: Swift.Bool?
            /// Asset is easy-to-borrow or not (filtering for easy_to_borrow = True is the best way to check whether the name is currently available to short at Alpaca).
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/easy_to_borrow`.
            public var easy_to_borrow: Swift.Bool?
            /// Asset is fractionable or not
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/fractionable`.
            public var fractionable: Swift.Bool?
            /// Percent change for the trading day as of last market closure. NOTE: This field is currently in this spec however it may not be present in the production environment at time of publishing. It will be coming in a future update at which point this spec should be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/last_close_pct_change`.
            public var last_close_pct_change: Swift.String?
            /// Most recent available price for this asset on the market. NOTE: This field is currently in this spec however it may not be present in the production environment at time of publishing. It will be coming in a future update at which point this spec should be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/last_price`.
            public var last_price: Swift.String?
            /// Last price of the asset upon market closure on the most recent trading day. NOTE: This field is currently in this spec however it may not be present in the production environment at time of publishing. It will be coming in a future update at which point this spec should be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/Asset/last_close`.
            public var last_close: Swift.String?
            /// Creates a new `Asset`.
            ///
            /// - Parameters:
            ///   - id: Asset ID
            ///   - _class:
            ///   - exchange:
            ///   - symbol: The symbol of the asset
            ///   - name: The official name of the asset
            ///   - status: active or inactive
            ///   - tradable: Asset is tradable on Alpaca or not
            ///   - marginable: Asset is marginable or not
            ///   - shortable: Asset is shortable or not
            ///   - easy_to_borrow: Asset is easy-to-borrow or not (filtering for easy_to_borrow = True is the best way to check whether the name is currently available to short at Alpaca).
            ///   - fractionable: Asset is fractionable or not
            ///   - last_close_pct_change: Percent change for the trading day as of last market closure. NOTE: This field is currently in this spec however it may not be present in the production environment at time of publishing. It will be coming in a future update at which point this spec should be updated.
            ///   - last_price: Most recent available price for this asset on the market. NOTE: This field is currently in this spec however it may not be present in the production environment at time of publishing. It will be coming in a future update at which point this spec should be updated.
            ///   - last_close: Last price of the asset upon market closure on the most recent trading day. NOTE: This field is currently in this spec however it may not be present in the production environment at time of publishing. It will be coming in a future update at which point this spec should be updated.
            public init(
                id: Swift.String,
                _class: Components.Schemas.AssetClass,
                exchange: Components.Schemas.Exchange? = nil,
                symbol: Swift.String,
                name: Swift.String? = nil,
                status: Components.Schemas.Asset.statusPayload? = nil,
                tradable: Swift.Bool? = nil,
                marginable: Swift.Bool? = nil,
                shortable: Swift.Bool? = nil,
                easy_to_borrow: Swift.Bool? = nil,
                fractionable: Swift.Bool? = nil,
                last_close_pct_change: Swift.String? = nil,
                last_price: Swift.String? = nil,
                last_close: Swift.String? = nil
            ) {
                self.id = id
                self._class = _class
                self.exchange = exchange
                self.symbol = symbol
                self.name = name
                self.status = status
                self.tradable = tradable
                self.marginable = marginable
                self.shortable = shortable
                self.easy_to_borrow = easy_to_borrow
                self.fractionable = fractionable
                self.last_close_pct_change = last_close_pct_change
                self.last_price = last_price
                self.last_close = last_close
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _class = "class"
                case exchange
                case symbol
                case name
                case status
                case tradable
                case marginable
                case shortable
                case easy_to_borrow
                case fractionable
                case last_close_pct_change
                case last_price
                case last_close
            }
        }
        /// Represents the exchange where an asset is traded.
        ///
        /// For Stocks:
        /// - AMEX
        /// - ARCA
        /// - BATS
        /// - NYSE
        /// - NASDAQ
        /// - NYSEARCA
        /// - OTC
        ///
        /// For Crypto:
        /// - ERSX
        /// - FTXU
        ///
        /// - Remark: Generated from `#/components/schemas/Exchange`.
        @frozen public enum Exchange: String, Codable, Hashable, Sendable {
            case AMEX = "AMEX"
            case ARCA = "ARCA"
            case BATS = "BATS"
            case NYSE = "NYSE"
            case NASDAQ = "NASDAQ"
            case NYSEARCA = "NYSEARCA"
            case OTC = "OTC"
            case ERSX = "ERSX"
            case FTXU = "FTXU"
        }
        /// - Remark: Generated from `#/components/schemas/Position`.
        public struct Position: Codable, Hashable, Sendable {
            /// Asset ID
            ///
            /// - Remark: Generated from `#/components/schemas/Position/asset_id`.
            public var asset_id: Swift.String
            /// Asset symbol
            ///
            /// - Remark: Generated from `#/components/schemas/Position/symbol`.
            public var symbol: Swift.String
            /// Exchange name of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/Position/exchange`.
            public var exchange: Swift.String
            /// - Remark: Generated from `#/components/schemas/Position/asset_class`.
            public var asset_class: Components.Schemas.AssetClass
            /// Indicates if this asset is marginable
            ///
            /// - Remark: Generated from `#/components/schemas/Position/asset_marginable`.
            public var asset_marginable: Swift.Bool?
            /// Average entry price of the position
            ///
            /// - Remark: Generated from `#/components/schemas/Position/avg_entry_price`.
            public var avg_entry_price: Swift.String
            /// The number of shares
            ///
            /// - Remark: Generated from `#/components/schemas/Position/qty`.
            public var qty: Swift.String
            /// - Remark: Generated from `#/components/schemas/Position/side`.
            @frozen public enum sidePayload: String, Codable, Hashable, Sendable {
                case long = "long"
                case short = "short"
            }
            /// - Remark: Generated from `#/components/schemas/Position/side`.
            public var side: Components.Schemas.Position.sidePayload
            /// Total dollar amount of the position
            ///
            /// - Remark: Generated from `#/components/schemas/Position/market_value`.
            public var market_value: Swift.String
            /// Total cost basis in dollar
            ///
            /// - Remark: Generated from `#/components/schemas/Position/cost_basis`.
            public var cost_basis: Swift.String
            /// Unrealized profit/loss in dollars
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_pl`.
            public var unrealized_pl: Swift.String
            /// Unrealized profit/loss percent (by a factor of 1)
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_plpc`.
            public var unrealized_plpc: Swift.String
            /// Unrealized profit/loss in dollars for the day
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_intraday_pl`.
            public var unrealized_intraday_pl: Swift.String
            /// Unrealized interday profit/loss percent (by a factor of 1)
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_intraday_plpc`.
            public var unrealized_intraday_plpc: Swift.String
            /// Current asset price per share
            ///
            /// - Remark: Generated from `#/components/schemas/Position/current_price`.
            public var current_price: Swift.String
            /// Last day’s asset price per share based on the closing value of the last trading day
            ///
            /// - Remark: Generated from `#/components/schemas/Position/lastday_price`.
            public var lastday_price: Swift.String
            /// Percent change from last day price (by a factor of 1)
            ///
            /// - Remark: Generated from `#/components/schemas/Position/change_today`.
            public var change_today: Swift.String
            /// Creates a new `Position`.
            ///
            /// - Parameters:
            ///   - asset_id: Asset ID
            ///   - symbol: Asset symbol
            ///   - exchange: Exchange name of the asset
            ///   - asset_class:
            ///   - asset_marginable: Indicates if this asset is marginable
            ///   - avg_entry_price: Average entry price of the position
            ///   - qty: The number of shares
            ///   - side:
            ///   - market_value: Total dollar amount of the position
            ///   - cost_basis: Total cost basis in dollar
            ///   - unrealized_pl: Unrealized profit/loss in dollars
            ///   - unrealized_plpc: Unrealized profit/loss percent (by a factor of 1)
            ///   - unrealized_intraday_pl: Unrealized profit/loss in dollars for the day
            ///   - unrealized_intraday_plpc: Unrealized interday profit/loss percent (by a factor of 1)
            ///   - current_price: Current asset price per share
            ///   - lastday_price: Last day’s asset price per share based on the closing value of the last trading day
            ///   - change_today: Percent change from last day price (by a factor of 1)
            public init(
                asset_id: Swift.String,
                symbol: Swift.String,
                exchange: Swift.String,
                asset_class: Components.Schemas.AssetClass,
                asset_marginable: Swift.Bool? = nil,
                avg_entry_price: Swift.String,
                qty: Swift.String,
                side: Components.Schemas.Position.sidePayload,
                market_value: Swift.String,
                cost_basis: Swift.String,
                unrealized_pl: Swift.String,
                unrealized_plpc: Swift.String,
                unrealized_intraday_pl: Swift.String,
                unrealized_intraday_plpc: Swift.String,
                current_price: Swift.String,
                lastday_price: Swift.String,
                change_today: Swift.String
            ) {
                self.asset_id = asset_id
                self.symbol = symbol
                self.exchange = exchange
                self.asset_class = asset_class
                self.asset_marginable = asset_marginable
                self.avg_entry_price = avg_entry_price
                self.qty = qty
                self.side = side
                self.market_value = market_value
                self.cost_basis = cost_basis
                self.unrealized_pl = unrealized_pl
                self.unrealized_plpc = unrealized_plpc
                self.unrealized_intraday_pl = unrealized_intraday_pl
                self.unrealized_intraday_plpc = unrealized_intraday_plpc
                self.current_price = current_price
                self.lastday_price = lastday_price
                self.change_today = change_today
            }
            public enum CodingKeys: String, CodingKey {
                case asset_id
                case symbol
                case exchange
                case asset_class
                case asset_marginable
                case avg_entry_price
                case qty
                case side
                case market_value
                case cost_basis
                case unrealized_pl
                case unrealized_plpc
                case unrealized_intraday_pl
                case unrealized_intraday_plpc
                case current_price
                case lastday_price
                case change_today
            }
        }
        /// Represents the result of asking the api to cancel an Order.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/OrderClosedResponse`.
        public struct OrderClosedResponse: Codable, Hashable, Sendable {
            /// UUID of the order that was canceled
            ///
            /// - Remark: Generated from `#/components/schemas/OrderClosedResponse/id`.
            public var id: Swift.String
            /// Http status code for the attempt to close this Order
            ///
            /// - Remark: Generated from `#/components/schemas/OrderClosedResponse/status`.
            public var status: Swift.Int
            /// - Remark: Generated from `#/components/schemas/OrderClosedResponse/body`.
            public var body: Components.Schemas.Order?
            /// Creates a new `OrderClosedResponse`.
            ///
            /// - Parameters:
            ///   - id: UUID of the order that was canceled
            ///   - status: Http status code for the attempt to close this Order
            ///   - body:
            public init(
                id: Swift.String,
                status: Swift.Int,
                body: Components.Schemas.Order? = nil
            ) {
                self.id = id
                self.status = status
                self.body = body
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case status
                case body
            }
        }
        /// Represents the result of asking the api to close a position.
        ///
        /// `body` is the Order used to close out the position.
        ///
        /// - Remark: Generated from `#/components/schemas/PositionClosedResponse`.
        public struct PositionClosedResponse: Codable, Hashable, Sendable {
            /// Symbol name of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/PositionClosedResponse/symbol`.
            public var symbol: Swift.String
            /// Http status code for the attempt to close this position
            ///
            /// - Remark: Generated from `#/components/schemas/PositionClosedResponse/status`.
            public var status: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PositionClosedResponse/body`.
            public var body: Components.Schemas.Order?
            /// Creates a new `PositionClosedResponse`.
            ///
            /// - Parameters:
            ///   - symbol: Symbol name of the asset
            ///   - status: Http status code for the attempt to close this position
            ///   - body:
            public init(
                symbol: Swift.String,
                status: Swift.Int,
                body: Components.Schemas.Order? = nil
            ) {
                self.symbol = symbol
                self.status = status
                self.body = body
            }
            public enum CodingKeys: String, CodingKey {
                case symbol
                case status
                case body
            }
        }
        /// Timeseries data for equity and profit loss information of the account.
        ///
        /// - Remark: Generated from `#/components/schemas/PortfolioHistory`.
        public struct PortfolioHistory: Codable, Hashable, Sendable {
            /// time of each data element, left-labeled (the beginning of time window)
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/timestamp`.
            public var timestamp: [Swift.Int]
            /// equity value of the account in dollar amount as of the end of each time window
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/equity`.
            public var equity: [Swift.Double?]
            /// profit/loss in dollar from the base value
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/profit_loss`.
            public var profit_loss: [Swift.Double?]
            /// profit/loss in percentage from the base value
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/profit_loss_pct`.
            public var profit_loss_pct: [Swift.Double?]
            /// basis in dollar of the profit loss calculation
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/base_value`.
            public var base_value: Swift.Double?
            /// time window size of each data element
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/timeframe`.
            public var timeframe: Swift.String?
            /// Creates a new `PortfolioHistory`.
            ///
            /// - Parameters:
            ///   - timestamp: time of each data element, left-labeled (the beginning of time window)
            ///   - equity: equity value of the account in dollar amount as of the end of each time window
            ///   - profit_loss: profit/loss in dollar from the base value
            ///   - profit_loss_pct: profit/loss in percentage from the base value
            ///   - base_value: basis in dollar of the profit loss calculation
            ///   - timeframe: time window size of each data element
            public init(
                timestamp: [Swift.Int],
                equity: [Swift.Double?],
                profit_loss: [Swift.Double?],
                profit_loss_pct: [Swift.Double?],
                base_value: Swift.Double? = nil,
                timeframe: Swift.String? = nil
            ) {
                self.timestamp = timestamp
                self.equity = equity
                self.profit_loss = profit_loss
                self.profit_loss_pct = profit_loss_pct
                self.base_value = base_value
                self.timeframe = timeframe
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case equity
                case profit_loss
                case profit_loss_pct
                case base_value
                case timeframe
            }
        }
        /// The calendar API serves the full list of market days from 1970 to 2029. It can also be queried by specifying a start and/or end time to narrow down the results. In addition to the dates, the response also contains the specific open and close times for the market days, taking into account early closures.
        ///
        /// - Remark: Generated from `#/components/schemas/Calendar`.
        public struct Calendar: Codable, Hashable, Sendable {
            /// Date string in YYYY-MM-DD format
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/date`.
            public var date: Swift.String
            /// The time the market opens at on this date in HH:MM format
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/open`.
            public var open: Swift.String
            /// The time the market closes at on this date in HH:MM format
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/close`.
            public var close: Swift.String
            /// this field has been deprecated please ignore
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/session_open`.
            @available(*, deprecated)
            public var session_open: Swift.String?
            /// this field has been deprecated please ignore
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/session_close`.
            @available(*, deprecated)
            public var session_close: Swift.String?
            /// Creates a new `Calendar`.
            ///
            /// - Parameters:
            ///   - date: Date string in YYYY-MM-DD format
            ///   - open: The time the market opens at on this date in HH:MM format
            ///   - close: The time the market closes at on this date in HH:MM format
            ///   - session_open: this field has been deprecated please ignore
            ///   - session_close: this field has been deprecated please ignore
            public init(
                date: Swift.String,
                open: Swift.String,
                close: Swift.String,
                session_open: Swift.String? = nil,
                session_close: Swift.String? = nil
            ) {
                self.date = date
                self.open = open
                self.close = close
                self.session_open = session_open
                self.session_close = session_close
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case open
                case close
                case session_open
                case session_close
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Error/message`.
            public var message: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - message:
            public init(
                code: Swift.Double,
                message: Swift.String
            ) {
                self.code = code
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case message
            }
        }
        /// Represents the current market time and open/close events.
        ///
        /// - Remark: Generated from `#/components/schemas/Clock`.
        public struct Clock: Codable, Hashable, Sendable {
            /// Current timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/timestamp`.
            public var timestamp: Foundation.Date
            /// Whether the market is open or not
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/is_open`.
            public var is_open: Swift.Bool
            /// Next market open timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/next_open`.
            public var next_open: Foundation.Date
            /// Next market close timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/next_close`.
            public var next_close: Foundation.Date
            /// Creates a new `Clock`.
            ///
            /// - Parameters:
            ///   - timestamp: Current timestamp
            ///   - is_open: Whether the market is open or not
            ///   - next_open: Next market open timestamp
            ///   - next_close: Next market close timestamp
            public init(
                timestamp: Foundation.Date,
                is_open: Swift.Bool,
                next_open: Foundation.Date,
                next_close: Foundation.Date
            ) {
                self.timestamp = timestamp
                self.is_open = is_open
                self.next_open = next_open
                self.next_close = next_close
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case is_open
                case next_open
                case next_close
            }
        }
        /// - Remark: Generated from `#/components/schemas/Document`.
        public struct DocumentPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Document/document_id`.
            public var document_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Document/document_type`.
            public var document_type: Components.Schemas.DocumentType
            /// - Remark: Generated from `#/components/schemas/Document/document_date`.
            public var document_date: Foundation.Date
            /// Creates a new `DocumentPayload`.
            ///
            /// - Parameters:
            ///   - document_id:
            ///   - document_type:
            ///   - document_date:
            public init(
                document_id: Swift.String,
                document_type: Components.Schemas.DocumentType,
                document_date: Foundation.Date
            ) {
                self.document_id = document_id
                self.document_type = document_type
                self.document_date = document_date
            }
            public enum CodingKeys: String, CodingKey {
                case document_id
                case document_type
                case document_date
            }
        }
        /// - Remark: Generated from `#/components/schemas/Document`.
        public typealias Document = [Components.Schemas.DocumentPayload]
        /// Represents a change in an Account's status, sent over the events streaming api.
        ///
        /// For partners who utilize Alpaca’s KYC service for opening brokerage accounts an additional `kyc_results` object is represented in the account status update events.
        ///
        /// - Remark: Generated from `#/components/schemas/AccountStatusEvent`.
        public struct AccountStatusEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/account_id`.
            public var account_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/account_number`.
            public var account_number: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/status_from`.
            public var status_from: Components.Schemas.AccountStatus
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/status_to`.
            public var status_to: Components.Schemas.AccountStatus
            /// Optional
            ///
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/reason`.
            public var reason: Swift.String
            /// Timestamp of event
            ///
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/at`.
            public var at: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/kyc_result`.
            public var kyc_result: Components.Schemas.KYCResult?
            /// monotonically increasing 64bit integer
            ///
            /// - Remark: Generated from `#/components/schemas/AccountStatusEvent/event_id`.
            public var event_id: Swift.Int
            /// Creates a new `AccountStatusEvent`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - account_number:
            ///   - status_from:
            ///   - status_to:
            ///   - reason: Optional
            ///   - at: Timestamp of event
            ///   - kyc_result:
            ///   - event_id: monotonically increasing 64bit integer
            public init(
                account_id: Swift.String,
                account_number: Swift.String,
                status_from: Components.Schemas.AccountStatus,
                status_to: Components.Schemas.AccountStatus,
                reason: Swift.String,
                at: Swift.String,
                kyc_result: Components.Schemas.KYCResult? = nil,
                event_id: Swift.Int
            ) {
                self.account_id = account_id
                self.account_number = account_number
                self.status_from = status_from
                self.status_to = status_to
                self.reason = reason
                self.at = at
                self.kyc_result = kyc_result
                self.event_id = event_id
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case account_number
                case status_from
                case status_to
                case reason
                case at
                case kyc_result
                case event_id
            }
        }
        /// Represents a change in a Journal's status, sent over the events streaming api.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/JournalStatusEvent`.
        public struct JournalStatusEvent: Codable, Hashable, Sendable {
            /// Timestamp of event
            ///
            /// - Remark: Generated from `#/components/schemas/JournalStatusEvent/at`.
            public var at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/JournalStatusEvent/entry_type`.
            public var entry_type: Components.Schemas.JournalEntryType
            /// Monotonically increasing 64bit integer
            ///
            /// - Remark: Generated from `#/components/schemas/JournalStatusEvent/event_id`.
            public var event_id: Swift.Int
            /// The UUID of the related Journal
            ///
            /// - Remark: Generated from `#/components/schemas/JournalStatusEvent/journal_id`.
            public var journal_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JournalStatusEvent/status_from`.
            public var status_from: Components.Schemas.JournalStatus
            /// - Remark: Generated from `#/components/schemas/JournalStatusEvent/status_to`.
            public var status_to: Components.Schemas.JournalStatus
            /// Creates a new `JournalStatusEvent`.
            ///
            /// - Parameters:
            ///   - at: Timestamp of event
            ///   - entry_type:
            ///   - event_id: Monotonically increasing 64bit integer
            ///   - journal_id: The UUID of the related Journal
            ///   - status_from:
            ///   - status_to:
            public init(
                at: Foundation.Date,
                entry_type: Components.Schemas.JournalEntryType,
                event_id: Swift.Int,
                journal_id: Swift.String,
                status_from: Components.Schemas.JournalStatus,
                status_to: Components.Schemas.JournalStatus
            ) {
                self.at = at
                self.entry_type = entry_type
                self.event_id = event_id
                self.journal_id = journal_id
                self.status_from = status_from
                self.status_to = status_to
            }
            public enum CodingKeys: String, CodingKey {
                case at
                case entry_type
                case event_id
                case journal_id
                case status_from
                case status_to
            }
        }
        /// Represents a change in a Transfer's status, sent over the events streaming api.
        ///
        /// - Remark: Generated from `#/components/schemas/TransferStatusEvent`.
        public struct TransferStatusEvent: Codable, Hashable, Sendable {
            /// Account UUID
            ///
            /// - Remark: Generated from `#/components/schemas/TransferStatusEvent/account_id`.
            public var account_id: Swift.String
            /// Timedate of when the transfer status changed
            ///
            /// - Remark: Generated from `#/components/schemas/TransferStatusEvent/at`.
            public var at: Foundation.Date
            /// Monotonically increasing 64bit integer
            ///
            /// - Remark: Generated from `#/components/schemas/TransferStatusEvent/event_id`.
            public var event_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/TransferStatusEvent/status_from`.
            public var status_from: Components.Schemas.TransferStatus
            /// - Remark: Generated from `#/components/schemas/TransferStatusEvent/status_to`.
            public var status_to: Components.Schemas.TransferStatus
            /// Transfer UUID
            ///
            /// - Remark: Generated from `#/components/schemas/TransferStatusEvent/transfer_id`.
            public var transfer_id: Swift.String
            /// Creates a new `TransferStatusEvent`.
            ///
            /// - Parameters:
            ///   - account_id: Account UUID
            ///   - at: Timedate of when the transfer status changed
            ///   - event_id: Monotonically increasing 64bit integer
            ///   - status_from:
            ///   - status_to:
            ///   - transfer_id: Transfer UUID
            public init(
                account_id: Swift.String,
                at: Foundation.Date,
                event_id: Swift.Int,
                status_from: Components.Schemas.TransferStatus,
                status_to: Components.Schemas.TransferStatus,
                transfer_id: Swift.String
            ) {
                self.account_id = account_id
                self.at = at
                self.event_id = event_id
                self.status_from = status_from
                self.status_to = status_to
                self.transfer_id = transfer_id
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case at
                case event_id
                case status_from
                case status_to
                case transfer_id
            }
        }
        /// **Common events**
        ///
        /// These are the events that are the expected results of actions you may have taken by sending API requests.
        ///
        /// The meaning of the `timestamp` field changes for each type; the meanings have been specified here for which types the
        /// timestamp field will be present.
        ///
        /// - `new`: Sent when an order has been routed to exchanges for execution.
        /// - `fill`: Sent when your order has been completely filled.
        ///   - `timestamp`: The time at which the order was filled.
        /// - `partial_fill`: Sent when a number of shares less than the total remaining quantity on your order has been filled.
        ///   - `timestamp`: The time at which the shares were filled.
        /// - `canceled`: Sent when your requested cancellation of an order is processed.
        ///   - `timestamp`: The time at which the order was canceled.
        /// - `expired`: Sent when an order has reached the end of its lifespan, as determined by the order’s time in force value.
        ///   - `timestamp`: The time at which the order expired.
        /// - `done_for_day`: Sent when the order is done executing for the day, and will not receive further updates until the next trading day.
        /// - `replaced`: Sent when your requested replacement of an order is processed.
        ///   - `timestamp`: The time at which the order was replaced.
        ///
        /// **Rarer events**
        ///
        /// These are events that may rarely be sent due to unexpected circumstances on the exchanges. It is unlikely you will need to design your code around them, but you may still wish to account for the possibility that they will occur.
        ///
        /// - `rejected`: Sent when your order has been rejected.
        ///   - `timestamp`: The time at which the rejection occurred.
        /// - `pending_new`: Sent when the order has been received by Alpaca and routed to the exchanges, but has not yet been accepted for execution.
        /// - `stopped`: Sent when your order has been stopped, and a trade is guaranteed for the order, usually at a stated price or better, but has not yet occurred.
        /// - `pending_cancel`: Sent when the order is awaiting cancellation. Most cancellations will occur without the order entering this state.
        /// - `pending_replace`: Sent when the order is awaiting replacement.
        /// - `calculated`: Sent when the order has been completed for the day - it is either `filled` or `done_for_day` - but remaining settlement calculations are still pending.
        /// - `suspended`: Sent when the order has been suspended and is not eligible for trading.
        /// - `order_replace_rejected`: Sent when the order replace has been rejected.
        /// - `order_cancel_rejected`: Sent when the order cancel has been rejected.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TradeUpdateEventType`.
        @frozen public enum TradeUpdateEventType: String, Codable, Hashable, Sendable {
            case new = "new"
            case fill = "fill"
            case partial_fill = "partial_fill"
            case canceled = "canceled"
            case expired = "expired"
            case done_for_day = "done_for_day"
            case replaced = "replaced"
            case rejected = "rejected"
            case pending_new = "pending_new"
            case stopped = "stopped"
            case pending_cancel = "pending_cancel"
            case pending_replace = "pending_replace"
            case calculated = "calculated"
            case suspended = "suspended"
            case order_replace_rejected = "order_replace_rejected"
            case order_cancel_rejected = "order_cancel_rejected"
        }
        /// Represents an update to an order/trade, sent over the events streaming api.
        ///
        /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent`.
        public struct TradeUpdateEvent: Codable, Hashable, Sendable {
            /// Account UUID
            ///
            /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent/account_id`.
            public var account_id: Swift.String
            /// Timestamp of event
            ///
            /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent/at`.
            public var at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent/event`.
            public var event: Components.Schemas.TradeUpdateEventType
            /// Monotonically increasing 64bit integer
            ///
            /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent/event_id`.
            public var event_id: Swift.Int64
            /// Corresponding execution of an order. If an order gets filled over two executions (a partial_fill for example), you will receive two events with different IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent/execution_id`.
            public var execution_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent/order`.
            public var order: Components.Schemas.Order
            /// Has various different meanings depending on the value of `event`, please see the [Trading Events](https://alpaca.markets/docs/api-references/broker-api/events/#trade-events)
            /// Enum in the documentation or the TradeUpdateEventType model for more details on when it means different things.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TradeUpdateEvent/timestamp`.
            public var timestamp: Foundation.Date
            /// Creates a new `TradeUpdateEvent`.
            ///
            /// - Parameters:
            ///   - account_id: Account UUID
            ///   - at: Timestamp of event
            ///   - event:
            ///   - event_id: Monotonically increasing 64bit integer
            ///   - execution_id: Corresponding execution of an order. If an order gets filled over two executions (a partial_fill for example), you will receive two events with different IDs.
            ///   - order:
            ///   - timestamp: Has various different meanings depending on the value of `event`, please see the [Trading Events](https://alpaca.markets/docs/api-references/broker-api/events/#trade-events)
            public init(
                account_id: Swift.String,
                at: Foundation.Date,
                event: Components.Schemas.TradeUpdateEventType,
                event_id: Swift.Int64,
                execution_id: Swift.String,
                order: Components.Schemas.Order,
                timestamp: Foundation.Date
            ) {
                self.account_id = account_id
                self.at = at
                self.event = event
                self.event_id = event_id
                self.execution_id = execution_id
                self.order = order
                self.timestamp = timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case at
                case event
                case event_id
                case execution_id
                case order
                case timestamp
            }
        }
        /// Represents a set of securities observed by a user.
        ///
        /// - Remark: Generated from `#/components/schemas/Watchlist`.
        public struct Watchlist: Codable, Hashable, Sendable {
            /// Unique identifier of the watchlist itself.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/id`.
            public var id: Swift.String
            /// Unique identifier of the account that owns this watchlist.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/account_id`.
            public var account_id: Swift.String?
            /// When watchlist was created
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/created_at`.
            public var created_at: Foundation.Date?
            /// When watchlist was last updated
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/updated_at`.
            public var updated_at: Foundation.Date?
            /// User friendly Name of watchlist
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/name`.
            public var name: Swift.String
            /// The contents of the watchlist, in the order as registered
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/assets`.
            public var assets: [Components.Schemas.Asset]?
            /// Creates a new `Watchlist`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the watchlist itself.
            ///   - account_id: Unique identifier of the account that owns this watchlist.
            ///   - created_at: When watchlist was created
            ///   - updated_at: When watchlist was last updated
            ///   - name: User friendly Name of watchlist
            ///   - assets: The contents of the watchlist, in the order as registered
            public init(
                id: Swift.String,
                account_id: Swift.String? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                name: Swift.String,
                assets: [Components.Schemas.Asset]? = nil
            ) {
                self.id = id
                self.account_id = account_id
                self.created_at = created_at
                self.updated_at = updated_at
                self.name = name
                self.assets = assets
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account_id
                case created_at
                case updated_at
                case name
                case assets
            }
        }
        /// The announcements endpoint contains public information on previous and upcoming dividends, mergers, spinoffs, and stock splits.
        ///
        /// Announcement data is made available through the API as soon as it is ingested by Alpaca, which is typically the following trading day after the declaration date. This provides insight into future account stock position and cash balance changes that will take effect on an announcement’s payable date. Additionally, viewing previous announcement details can improve bookkeeping and reconciling previous account cash and position changes.
        ///
        /// - Remark: Generated from `#/components/schemas/Announcement`.
        public struct Announcement: Codable, Hashable, Sendable {
            /// ID that is specific to a single announcement.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/id`.
            public var id: Swift.String
            /// ID that remains consistent across all announcements for the same corporate action. Unlike ‘id’, this can be used to connect multiple announcements to see how the terms have changed throughout the lifecycle of the corporate action event.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/corporate_action_id`.
            public var corporate_action_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Announcement/ca_type`.
            public var ca_type: Components.Schemas.AnnouncementCAType
            /// - Remark: Generated from `#/components/schemas/Announcement/ca_sub_type`.
            public var ca_sub_type: Components.Schemas.AnnouncementCASubType
            /// Symbol of the company initiating the announcement.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/initiating_symbol`.
            public var initiating_symbol: Swift.String
            /// CUSIP of the company initiating the announcement.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/initiating_original_cusip`.
            public var initiating_original_cusip: Swift.String
            /// Symbol of the child company involved in the announcement.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/target_symbol`.
            public var target_symbol: Swift.String?
            /// CUSIP of the child company involved in the announcement.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/target_original_cusip`.
            public var target_original_cusip: Swift.String?
            /// Date the corporate action or subsequent terms update was announced.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/declaration_date`.
            public var declaration_date: Swift.String
            /// The first date that purchasing a security will not result in a corporate action entitlement.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/ex_date`.
            public var ex_date: Swift.String?
            /// The date an account must hold a settled position in the security in order to receive the corporate action entitlement.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/record_date`.
            public var record_date: Swift.String?
            /// The date the announcement will take effect. On this date, account stock and cash balances are expected to be processed accordingly.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/payable_date`.
            public var payable_date: Swift.String
            /// The amount of cash to be paid per share held by an account on the record date.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/cash`.
            public var cash: Swift.String?
            /// The denominator to determine any quantity change ratios in positions.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/old_rate`.
            public var old_rate: Swift.String?
            /// The numerator to determine any quantity change ratios in positions.
            ///
            /// - Remark: Generated from `#/components/schemas/Announcement/new_rate`.
            public var new_rate: Swift.String?
            /// Creates a new `Announcement`.
            ///
            /// - Parameters:
            ///   - id: ID that is specific to a single announcement.
            ///   - corporate_action_id: ID that remains consistent across all announcements for the same corporate action. Unlike ‘id’, this can be used to connect multiple announcements to see how the terms have changed throughout the lifecycle of the corporate action event.
            ///   - ca_type:
            ///   - ca_sub_type:
            ///   - initiating_symbol: Symbol of the company initiating the announcement.
            ///   - initiating_original_cusip: CUSIP of the company initiating the announcement.
            ///   - target_symbol: Symbol of the child company involved in the announcement.
            ///   - target_original_cusip: CUSIP of the child company involved in the announcement.
            ///   - declaration_date: Date the corporate action or subsequent terms update was announced.
            ///   - ex_date: The first date that purchasing a security will not result in a corporate action entitlement.
            ///   - record_date: The date an account must hold a settled position in the security in order to receive the corporate action entitlement.
            ///   - payable_date: The date the announcement will take effect. On this date, account stock and cash balances are expected to be processed accordingly.
            ///   - cash: The amount of cash to be paid per share held by an account on the record date.
            ///   - old_rate: The denominator to determine any quantity change ratios in positions.
            ///   - new_rate: The numerator to determine any quantity change ratios in positions.
            public init(
                id: Swift.String,
                corporate_action_id: Swift.String,
                ca_type: Components.Schemas.AnnouncementCAType,
                ca_sub_type: Components.Schemas.AnnouncementCASubType,
                initiating_symbol: Swift.String,
                initiating_original_cusip: Swift.String,
                target_symbol: Swift.String? = nil,
                target_original_cusip: Swift.String? = nil,
                declaration_date: Swift.String,
                ex_date: Swift.String? = nil,
                record_date: Swift.String? = nil,
                payable_date: Swift.String,
                cash: Swift.String? = nil,
                old_rate: Swift.String? = nil,
                new_rate: Swift.String? = nil
            ) {
                self.id = id
                self.corporate_action_id = corporate_action_id
                self.ca_type = ca_type
                self.ca_sub_type = ca_sub_type
                self.initiating_symbol = initiating_symbol
                self.initiating_original_cusip = initiating_original_cusip
                self.target_symbol = target_symbol
                self.target_original_cusip = target_original_cusip
                self.declaration_date = declaration_date
                self.ex_date = ex_date
                self.record_date = record_date
                self.payable_date = payable_date
                self.cash = cash
                self.old_rate = old_rate
                self.new_rate = new_rate
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case corporate_action_id
                case ca_type
                case ca_sub_type
                case initiating_symbol
                case initiating_original_cusip
                case target_symbol
                case target_original_cusip
                case declaration_date
                case ex_date
                case record_date
                case payable_date
                case cash
                case old_rate
                case new_rate
            }
        }
        /// Announcements have both a type and a subtype to categorize them. This model represents the higher level abstract "types" of Announcement. Please see the AnnouncementCASubType model for finer grain descriptions of the subtypes
        ///
        /// Possible values are:
        /// - dividend
        ///   can have `cash` and `stock` subtypes
        /// - merger
        ///   has `merger_update` and `merger_completion` sub types
        /// - split
        ///   has `stock_split`, `until_split`, `reverse_split`, and `recapitalization` sub types
        /// - spinoff
        ///   currently has only the `spinoff` subtype and thus is just this higher level category for now. A disbursement of a newly tradable security when the intiating_symbol creates the target_symbol.
        ///
        /// - Remark: Generated from `#/components/schemas/AnnouncementCAType`.
        @frozen public enum AnnouncementCAType: String, Codable, Hashable, Sendable {
            case dividend = "dividend"
            case merger = "merger"
            case split = "split"
            case spinoff = "spinoff"
        }
        /// Announcements have both a type and a subtype to categorize them. This model represents the lowever level abstract "sub types" of Announcement. Please see the AnnouncementCAType model for higher level descriptions of the possible types
        ///
        /// Possible values are:
        ///
        /// - from the `dividend` type:
        ///   - **cash**
        ///
        ///     A cash payment based on the number of shares the account holds on the record date.
        ///   - **stock**
        ///
        ///     A stock payment based on the number of shares the account holds on the record date.
        ///
        /// - from the `merger` type:
        ///   - **merger_update**
        ///
        ///     An update to the terms of an upcoming merger. This can happen any number of times before the merger is completed and can be tracked by using the id parameter.
        ///
        ///   - **merger_completion**
        ///
        ///     A final update in the terms of the merger in which the intiating_symbol will acquire the target_symbol. Any previous terms updates for this announcement will have the same id value.
        ///
        /// - from the `split` type:
        ///   - **stock_split**
        ///
        ///     An increase in the number of shares outstanding with a decrease in the dollar value of each share. The new_rate and old_rate parameters will be returned in order to derive the ratio of the split
        ///   - **until_split**
        ///
        ///     An increase in the number of shares outstanding with a decrease in the dollar value of each share. The new_rate and old_rate parameters will be returned in order to derive the ratio of the split.
        ///   - **reverse_split**
        ///
        ///     A decrease in the number of shares outstanding with an increase in the dollar value of each share. The new_rate and old_rate parameters will be returned in order to derive the ratio of the spli
        ///   - **recapitalization**
        ///
        ///     A stock recapitalization, typically used by a company to adjust debt and equity ratios.
        ///
        /// - from the `spinoff` type:
        ///   - **spinoff**
        ///
        ///     A disbursement of a newly tradable security when the intiating_symbol creates the target_symbol.
        ///
        /// - Remark: Generated from `#/components/schemas/AnnouncementCASubType`.
        @frozen public enum AnnouncementCASubType: String, Codable, Hashable, Sendable {
            case cash = "cash"
            case stock = "stock"
            case merger_update = "merger_update"
            case merger_completion = "merger_completion"
            case stock_split = "stock_split"
            case until_split = "until_split"
            case reverse_split = "reverse_split"
            case recapitalization = "recapitalization"
            case spinoff = "spinoff"
        }
        /// - Remark: Generated from `#/components/schemas/OathClientResponse`.
        public struct OathClientResponse: Codable, Hashable, Sendable {
            /// OAuth client id
            ///
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/client_id`.
            public var client_id: Swift.String?
            /// Broker name (your name)
            ///
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/url`.
            public var url: Swift.String?
            /// URL of Terms of Use
            ///
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/terms_of_use`.
            public var terms_of_use: Swift.String?
            /// URL of Privacy Policy
            ///
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/privacy_policy`.
            public var privacy_policy: Swift.String?
            /// ACTIVE or DISABLED
            ///
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case ACTIVE = "ACTIVE"
                case DISABLED = "DISABLED"
            }
            /// ACTIVE or DISABLED
            ///
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/status`.
            public var status: Components.Schemas.OathClientResponse.statusPayload?
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/redirect_uri`.
            public var redirect_uri: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/OathClientResponse/live_trading_approved`.
            public var live_trading_approved: Swift.Bool?
            /// Creates a new `OathClientResponse`.
            ///
            /// - Parameters:
            ///   - client_id: OAuth client id
            ///   - name: Broker name (your name)
            ///   - description:
            ///   - url:
            ///   - terms_of_use: URL of Terms of Use
            ///   - privacy_policy: URL of Privacy Policy
            ///   - status: ACTIVE or DISABLED
            ///   - redirect_uri:
            ///   - live_trading_approved:
            public init(
                client_id: Swift.String? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                url: Swift.String? = nil,
                terms_of_use: Swift.String? = nil,
                privacy_policy: Swift.String? = nil,
                status: Components.Schemas.OathClientResponse.statusPayload? = nil,
                redirect_uri: [Swift.String]? = nil,
                live_trading_approved: Swift.Bool? = nil
            ) {
                self.client_id = client_id
                self.name = name
                self.description = description
                self.url = url
                self.terms_of_use = terms_of_use
                self.privacy_policy = privacy_policy
                self.status = status
                self.redirect_uri = redirect_uri
                self.live_trading_approved = live_trading_approved
            }
            public enum CodingKeys: String, CodingKey {
                case client_id
                case name
                case description
                case url
                case terms_of_use
                case privacy_policy
                case status
                case redirect_uri
                case live_trading_approved
            }
        }
        /// This model is used for both the Issue and Authorize OAuth token routes
        ///
        /// - Remark: Generated from `#/components/schemas/OAuthTokenRequest`.
        public struct OAuthTokenRequest: Codable, Hashable, Sendable {
            /// OAuth client ID
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthTokenRequest/client_id`.
            public var client_id: Swift.String
            /// OAuth client secret
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthTokenRequest/client_secret`.
            public var client_secret: Swift.String
            /// redirect URI for the OAuth flow
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthTokenRequest/redirect_uri`.
            public var redirect_uri: Swift.String
            /// scopes requested by the OAuth flow
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthTokenRequest/scope`.
            public var scope: Swift.String
            /// end-user account ID
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthTokenRequest/account_id`.
            public var account_id: Swift.String
            /// Creates a new `OAuthTokenRequest`.
            ///
            /// - Parameters:
            ///   - client_id: OAuth client ID
            ///   - client_secret: OAuth client secret
            ///   - redirect_uri: redirect URI for the OAuth flow
            ///   - scope: scopes requested by the OAuth flow
            ///   - account_id: end-user account ID
            public init(
                client_id: Swift.String,
                client_secret: Swift.String,
                redirect_uri: Swift.String,
                scope: Swift.String,
                account_id: Swift.String
            ) {
                self.client_id = client_id
                self.client_secret = client_secret
                self.redirect_uri = redirect_uri
                self.scope = scope
                self.account_id = account_id
            }
            public enum CodingKeys: String, CodingKey {
                case client_id
                case client_secret
                case redirect_uri
                case scope
                case account_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/IssueOAuthTokenResponse`.
        public struct IssueOAuthTokenResponse: Codable, Hashable, Sendable {
            /// OAuth token
            ///
            /// - Remark: Generated from `#/components/schemas/IssueOAuthTokenResponse/access_token`.
            public var access_token: Swift.String
            /// Always `Bearer`
            ///
            /// - Remark: Generated from `#/components/schemas/IssueOAuthTokenResponse/token_type`.
            @frozen public enum token_typePayload: String, Codable, Hashable, Sendable {
                case Bearer = "Bearer"
            }
            /// Always `Bearer`
            ///
            /// - Remark: Generated from `#/components/schemas/IssueOAuthTokenResponse/token_type`.
            public var token_type: Components.Schemas.IssueOAuthTokenResponse.token_typePayload
            /// Token’s scope
            ///
            /// - Remark: Generated from `#/components/schemas/IssueOAuthTokenResponse/scope`.
            public var scope: Swift.String
            /// Creates a new `IssueOAuthTokenResponse`.
            ///
            /// - Parameters:
            ///   - access_token: OAuth token
            ///   - token_type: Always `Bearer`
            ///   - scope: Token’s scope
            public init(
                access_token: Swift.String,
                token_type: Components.Schemas.IssueOAuthTokenResponse.token_typePayload,
                scope: Swift.String
            ) {
                self.access_token = access_token
                self.token_type = token_type
                self.scope = scope
            }
            public enum CodingKeys: String, CodingKey {
                case access_token
                case token_type
                case scope
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthorizeOAuthTokenResponse`.
        public struct AuthorizeOAuthTokenResponse: Codable, Hashable, Sendable {
            /// OAuth code to exchange with token
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizeOAuthTokenResponse/code`.
            public var code: Swift.String
            /// OAuth `client_id`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizeOAuthTokenResponse/client_id`.
            public var client_id: Swift.String
            /// Redirect URI of OAuth flow
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizeOAuthTokenResponse/redirect_uri`.
            public var redirect_uri: Swift.String
            /// Granted scopes
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizeOAuthTokenResponse/scope`.
            public var scope: Swift.String
            /// Creates a new `AuthorizeOAuthTokenResponse`.
            ///
            /// - Parameters:
            ///   - code: OAuth code to exchange with token
            ///   - client_id: OAuth `client_id`
            ///   - redirect_uri: Redirect URI of OAuth flow
            ///   - scope: Granted scopes
            public init(
                code: Swift.String,
                client_id: Swift.String,
                redirect_uri: Swift.String,
                scope: Swift.String
            ) {
                self.code = code
                self.client_id = client_id
                self.redirect_uri = redirect_uri
                self.scope = scope
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case client_id
                case redirect_uri
                case scope
            }
        }
        /// This model represents the fields you can specify when Creating or Updating/Replacing a Watchlist
        ///
        /// - Remark: Generated from `#/components/schemas/CreateWatchlistRequest`.
        public struct CreateWatchlistRequest: Codable, Hashable, Sendable {
            /// The watchlist name
            ///
            /// - Remark: Generated from `#/components/schemas/CreateWatchlistRequest/name`.
            public var name: Swift.String
            /// The new list of symbol names to watch
            ///
            /// - Remark: Generated from `#/components/schemas/CreateWatchlistRequest/symbols`.
            public var symbols: [Swift.String]
            /// Creates a new `CreateWatchlistRequest`.
            ///
            /// - Parameters:
            ///   - name: The watchlist name
            ///   - symbols: The new list of symbol names to watch
            public init(
                name: Swift.String,
                symbols: [Swift.String]
            ) {
                self.name = name
                self.symbols = symbols
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case symbols
            }
        }
        /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation`.
        public struct DisclosureContextAnnotation: Codable, Hashable, Sendable {
            /// Specifies the type of disclosure annotation. Valid types are FINRA affiliations, for users affiliated with or employed by a FINRA member firm, a Stock Exchange Member, FINRA, Registered Investment Advisor, or a Municipal Securities Broker/Dealer; Company control relationships, for senior executives, and 10% or greater shareholders, of a publicly traded company; and immediate family members of politically exposed individuals.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/context_type`.
            @frozen public enum context_typePayload: String, Codable, Hashable, Sendable {
                case CONTROLLED_FIRM = "CONTROLLED_FIRM"
                case IMMEDIATE_FAMILY_EXPOSED = "IMMEDIATE_FAMILY_EXPOSED"
                case AFFILIATE_FIRM = "AFFILIATE_FIRM"
            }
            /// Specifies the type of disclosure annotation. Valid types are FINRA affiliations, for users affiliated with or employed by a FINRA member firm, a Stock Exchange Member, FINRA, Registered Investment Advisor, or a Municipal Securities Broker/Dealer; Company control relationships, for senior executives, and 10% or greater shareholders, of a publicly traded company; and immediate family members of politically exposed individuals.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/context_type`.
            public var context_type: Components.Schemas.DisclosureContextAnnotation.context_typePayload
            /// Required for FINRA affiliations and controlled firms.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/company_name`.
            public var company_name: Swift.String?
            /// Required for FINRA affiliations and controlled firms.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/company_street_address`.
            public var company_street_address: Swift.String?
            /// Required for FINRA affiliations and controlled firms.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/company_city`.
            public var company_city: Swift.String?
            /// Required if and only if `company_country` is `USA`.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/company_state`.
            public var company_state: Swift.String?
            /// Required for FINRA affiliations and controlled firms.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/company_country`.
            public var company_country: Swift.String?
            /// Required for FINRA affiliations and controlled firms.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/company_compliance_email`.
            public var company_compliance_email: Swift.String?
            /// Required for immediate family members of politically exposed persons.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/given_name`.
            public var given_name: Swift.String?
            /// Required for immediate family members of politically exposed persons.
            ///
            /// - Remark: Generated from `#/components/schemas/DisclosureContextAnnotation/family_name`.
            public var family_name: Swift.String?
            /// Creates a new `DisclosureContextAnnotation`.
            ///
            /// - Parameters:
            ///   - context_type: Specifies the type of disclosure annotation. Valid types are FINRA affiliations, for users affiliated with or employed by a FINRA member firm, a Stock Exchange Member, FINRA, Registered Investment Advisor, or a Municipal Securities Broker/Dealer; Company control relationships, for senior executives, and 10% or greater shareholders, of a publicly traded company; and immediate family members of politically exposed individuals.
            ///   - company_name: Required for FINRA affiliations and controlled firms.
            ///   - company_street_address: Required for FINRA affiliations and controlled firms.
            ///   - company_city: Required for FINRA affiliations and controlled firms.
            ///   - company_state: Required if and only if `company_country` is `USA`.
            ///   - company_country: Required for FINRA affiliations and controlled firms.
            ///   - company_compliance_email: Required for FINRA affiliations and controlled firms.
            ///   - given_name: Required for immediate family members of politically exposed persons.
            ///   - family_name: Required for immediate family members of politically exposed persons.
            public init(
                context_type: Components.Schemas.DisclosureContextAnnotation.context_typePayload,
                company_name: Swift.String? = nil,
                company_street_address: Swift.String? = nil,
                company_city: Swift.String? = nil,
                company_state: Swift.String? = nil,
                company_country: Swift.String? = nil,
                company_compliance_email: Swift.String? = nil,
                given_name: Swift.String? = nil,
                family_name: Swift.String? = nil
            ) {
                self.context_type = context_type
                self.company_name = company_name
                self.company_street_address = company_street_address
                self.company_city = company_city
                self.company_state = company_state
                self.company_country = company_country
                self.company_compliance_email = company_compliance_email
                self.given_name = given_name
                self.family_name = family_name
            }
            public enum CodingKeys: String, CodingKey {
                case context_type
                case company_name
                case company_street_address
                case company_city
                case company_state
                case company_country
                case company_compliance_email
                case given_name
                case family_name
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// see ActivityType model for details about what the different types mean
        ///
        /// - Remark: Generated from `#/components/parameters/ActivityType`.
        @frozen public enum ActivityType: String, Codable, Hashable, Sendable {
            case FILL = "FILL"
            case ACATC = "ACATC"
            case ACATS = "ACATS"
            case CIL = "CIL"
            case CSD = "CSD"
            case CSW = "CSW"
            case DIV = "DIV"
            case DIVCGL = "DIVCGL"
            case DIVCGS = "DIVCGS"
            case DIVNRA = "DIVNRA"
            case DIVROC = "DIVROC"
            case DIVTXEX = "DIVTXEX"
            case FEE = "FEE"
            case INT = "INT"
            case JNLC = "JNLC"
            case JNLS = "JNLS"
            case MA = "MA"
            case PTC = "PTC"
            case REORG = "REORG"
            case SPIN = "SPIN"
            case SPLIT = "SPLIT"
        }
        /// Status of the orders to list.
        ///
        /// - Remark: Generated from `#/components/parameters/Status`.
        @frozen public enum Status: String, Codable, Hashable, Sendable {
            case open = "open"
            case closed = "closed"
            case all = "all"
        }
        /// The maximum number of orders in response.
        ///
        /// - Remark: Generated from `#/components/parameters/Limit`.
        public typealias Limit = Swift.Int
        /// The response will include only ones submitted after this timestamp (exclusive.)
        ///
        /// - Remark: Generated from `#/components/parameters/After`.
        public typealias After = Foundation.Date
        /// The response will include only ones submitted until this timestamp (exclusive.)
        ///
        /// - Remark: Generated from `#/components/parameters/Until`.
        public typealias Until = Foundation.Date
        /// The chronological order of response based on the submission time. asc or desc. Defaults to desc.
        ///
        /// - Remark: Generated from `#/components/parameters/Direction`.
        @frozen public enum Direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The chronological order of response based on the submission time. asc or desc. Defaults to desc.
        ///
        /// - Remark: Generated from `#/components/parameters/Sort`.
        @frozen public enum Sort: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// If true, the result will roll up multi-leg orders under the legs field of primary order.
        ///
        /// - Remark: Generated from `#/components/parameters/Nested`.
        public typealias Nested = Swift.Bool
        /// A comma-separated list of symbols to filter by.
        ///
        /// - Remark: Generated from `#/components/parameters/Symbols`.
        public typealias Symbols = Swift.String
        /// Account identifier.
        ///
        /// - Remark: Generated from `#/components/parameters/AccountID`.
        public typealias AccountID = Swift.String
        /// Order identifier.
        ///
        /// - Remark: Generated from `#/components/parameters/OrderID`.
        public typealias OrderID = Swift.String
        /// Document identifier.
        ///
        /// - Remark: Generated from `#/components/parameters/DocumentID`.
        public typealias DocumentID = Swift.String
        /// See DocumentType model for reference and explanation of values
        ///
        /// - Remark: Generated from `#/components/parameters/DocumentType`.
        @frozen public enum DocumentType: String, Codable, Hashable, Sendable {
            case identity_verification = "identity_verification"
            case address_verification = "address_verification"
            case date_of_birth_verification = "date_of_birth_verification"
            case tax_id_verification = "tax_id_verification"
            case account_approval_letter = "account_approval_letter"
            case cip_result = "cip_result"
        }
        /// TODO: find a good way to generalize the description of page_tokens
        ///
        /// - Remark: Generated from `#/components/parameters/PageToken`.
        public typealias PageToken = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct Forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Forbidden/content/application\/json`.
                case json(Swift.String)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Swift.String {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.Forbidden.Body
            /// Creates a new `Forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.Forbidden.Body) {
                self.body = body
            }
        }
        public struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        public struct NotAuthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotAuthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotAuthorized/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.NotAuthorized.Body
            /// Creates a new `NotAuthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.NotAuthorized.Body) {
                self.body = body
            }
        }
        public struct NotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFound/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFound/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.NotFound.Body
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.NotFound.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get all accounts
    ///
    /// Retrieves all accounts found by the query'
    ///
    /// - Remark: HTTP `GET /v1/accounts`.
    /// - Remark: Generated from `#/paths//v1/accounts/get(getAllAccounts)`.
    public enum getAllAccounts {
        public static let id: Swift.String = "getAllAccounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Pass space-delimited tokens. The response will contain accounts that match with each of the tokens (logical AND). A match means the token is present in either the account’s associated account number, phone number, name, or e-mail address (logical OR).
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/GET/query/query`.
                public var query: Swift.String?
                /// - Remark: Generated from `#/paths/v1/accounts/GET/query/created_after`.
                public var created_after: Foundation.Date?
                /// - Remark: Generated from `#/paths/v1/accounts/GET/query/created_before`.
                public var created_before: Foundation.Date?
                /// See the AccountStatus model for values
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/GET/query/status`.
                public var status: Swift.String?
                /// - Remark: Generated from `#/components/parameters/Sort`.
                @frozen public enum Sort: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/GET/query/sort`.
                public var sort: Components.Parameters.Sort?
                /// Comma-delimited entity names to include in the response
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/GET/query/entities`.
                public var entities: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - query: Pass space-delimited tokens. The response will contain accounts that match with each of the tokens (logical AND). A match means the token is present in either the account’s associated account number, phone number, name, or e-mail address (logical OR).
                ///   - created_after:
                ///   - created_before:
                ///   - status: See the AccountStatus model for values
                ///   - sort: The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///   - entities: Comma-delimited entity names to include in the response
                public init(
                    query: Swift.String? = nil,
                    created_after: Foundation.Date? = nil,
                    created_before: Foundation.Date? = nil,
                    status: Swift.String? = nil,
                    sort: Components.Parameters.Sort? = nil,
                    entities: Swift.String? = nil
                ) {
                    self.query = query
                    self.created_after = created_after
                    self.created_before = created_before
                    self.status = status
                    self.sort = sort
                    self.entities = entities
                }
            }
            public var query: Operations.getAllAccounts.Input.Query
            /// - Remark: Generated from `#/paths/v1/accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllAccounts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAllAccounts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAllAccounts.Input.Query = .init(),
                headers: Operations.getAllAccounts.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllAccounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllAccounts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The response is a list of Account model up to 1000 items
            /// per query order by created_at. To scroll the result,
            /// please use the created_after parameter.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/get(getAllAccounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllAccounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an account
    ///
    /// Submit an account application with KYC information. This will create a trading account for the end user. The account status may or may not be ACTIVE immediately and you will receive account status updates on the event API. 
    ///
    /// - Remark: HTTP `POST /v1/accounts`.
    /// - Remark: Generated from `#/paths//v1/accounts/post(createAccount)`.
    public enum createAccount {
        public static let id: Swift.String = "createAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/accounts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AccountCreationRequest)
            }
            public var body: Operations.createAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createAccount.Input.Headers = .init(),
                body: Operations.createAccount.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Account)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Account {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/post(createAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/POST/responses/400/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createAccount.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createAccount.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The post body is not well formed.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/post(createAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createAccount.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createAccount.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// There is already an existing account registered with the same email address.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/post(createAccount)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.createAccount.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.createAccount.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/POST/responses/422/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createAccount.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createAccount.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// One of the input values is not a valid value.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/post(createAccount)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.createAccount.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.createAccount.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an account by Id.
    ///
    /// You can query a specific account that you submitted to Alpaca by passing into the query the account_id associated with the account you’re retrieving.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/get(getAccount)`.
    public enum getAccount {
        public static let id: Swift.String = "getAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAccount.Input.Path,
                headers: Operations.getAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountExtended)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountExtended {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Will return an AccountExtended if an account with account_id exists, otherwise will throw an error.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/get(getAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an account
    ///
    /// This operation updates account information.
    ///
    /// If all parameters are valid and updates have been made, it returns with status code 200. The response is the account model.
    ///
    /// - Remark: HTTP `PATCH /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/patch(patchAccount)`.
    public enum patchAccount {
        public static let id: Swift.String = "patchAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.patchAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.patchAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.AccountUpdateRequest)
            }
            public var body: Operations.patchAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.patchAccount.Input.Path,
                headers: Operations.patchAccount.Input.Headers = .init(),
                body: Operations.patchAccount.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountExtended)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountExtended {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.patchAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.patchAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// If all parameters are valid and updates have been made, it returns with status code 200. The response is the account model.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/patch(patchAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.patchAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.patchAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/responses/400/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.patchAccount.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.patchAccount.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The post body is not well formed.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/patch(patchAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.patchAccount.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.patchAccount.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/PATCH/responses/422/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.patchAccount.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.patchAccount.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// ​ The request body contains an attribute that is not permitted to be updated or you are attempting to set an invalid value.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/patch(patchAccount)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.patchAccount.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.patchAccount.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Request to close an account
    ///
    /// This operation closes an active account.
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/delete(deleteAccount)`.
    public enum deleteAccount {
        public static let id: Swift.String = "deleteAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.deleteAccount.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.deleteAccount.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No content.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/delete(deleteAccount)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteAccount.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteAccount.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Return a list of account documents.
    ///
    /// This endpoint allows you to query all the documents that belong to a certain account. You can filter by date, or type of document.
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/documents`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/get(getDocsForAccount)`.
    public enum getDocsForAccount {
        public static let id: Swift.String = "getDocsForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getDocsForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/query`.
            public struct Query: Sendable, Hashable {
                /// optional date value to filter the list (inclusive).
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/query/start_date`.
                public var start_date: Swift.String?
                /// optional date value to filter the list (inclusive).
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/query/end_date`.
                public var end_date: Swift.String?
                /// - Remark: Generated from `#/components/parameters/DocumentType`.
                @frozen public enum DocumentType: String, Codable, Hashable, Sendable {
                    case identity_verification = "identity_verification"
                    case address_verification = "address_verification"
                    case date_of_birth_verification = "date_of_birth_verification"
                    case tax_id_verification = "tax_id_verification"
                    case account_approval_letter = "account_approval_letter"
                    case cip_result = "cip_result"
                }
                /// See DocumentType model for reference and explanation of values
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/query/type`.
                public var _type: Components.Parameters.DocumentType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - start_date: optional date value to filter the list (inclusive).
                ///   - end_date: optional date value to filter the list (inclusive).
                ///   - _type: See DocumentType model for reference and explanation of values
                public init(
                    start_date: Swift.String? = nil,
                    end_date: Swift.String? = nil,
                    _type: Components.Parameters.DocumentType? = nil
                ) {
                    self.start_date = start_date
                    self.end_date = end_date
                    self._type = _type
                }
            }
            public var query: Operations.getDocsForAccount.Input.Query
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDocsForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDocsForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getDocsForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getDocsForAccount.Input.Path,
                query: Operations.getDocsForAccount.Input.Query = .init(),
                headers: Operations.getDocsForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Document])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Document] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getDocsForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getDocsForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/get(getDocsForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getDocsForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getDocsForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/GET/responses/404/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getDocsForAccount.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getDocsForAccount.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/get(getDocsForAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getDocsForAccount.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getDocsForAccount.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upload a document to an already existing account
    ///
    /// Upload a document to be attached to an account.
    ///
    /// Documents are binary objects whose contents are encoded in base64. Each encoded content size is limited to 10MB if you use Alpaca for KYCaaS. If you perform your own KYC there are no document size limitations.
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/documents/upload`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/upload/post(uploadDocToAccount)`.
    public enum uploadDocToAccount {
        public static let id: Swift.String = "uploadDocToAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.uploadDocToAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadDocToAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadDocToAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.uploadDocToAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DocumentUploadRequest)
            }
            public var body: Operations.uploadDocToAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.uploadDocToAccount.Input.Path,
                headers: Operations.uploadDocToAccount.Input.Headers = .init(),
                body: Operations.uploadDocToAccount.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (No Content)
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/upload/post(uploadDocToAccount)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.uploadDocToAccount.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.uploadDocToAccount.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/responses/400/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadDocToAccount.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadDocToAccount.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad Request. The body in the request is not valid.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/upload/post(uploadDocToAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.uploadDocToAccount.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.uploadDocToAccount.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/upload/POST/responses/404/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadDocToAccount.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadDocToAccount.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found. No account was found for this account_id
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/upload/post(uploadDocToAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.uploadDocToAccount.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.uploadDocToAccount.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Download a document file that belongs to an account.
    ///
    /// This endpoint allows you to download a document identified by the document_id passed in the header. The returned document is in PDF format.
    ///
    /// The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/documents/{document_id}/download`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/{document_id}/download/get(downloadDocFromAccount)`.
    public enum downloadDocFromAccount {
        public static let id: Swift.String = "downloadDocFromAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/{document_id}/download/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/{document_id}/download/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Document identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/documents/{document_id}/download/GET/path/document_id`.
                public var document_id: Components.Parameters.DocumentID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - document_id: Document identifier.
                public init(
                    account_id: Components.Parameters.AccountID,
                    document_id: Components.Parameters.DocumentID
                ) {
                    self.account_id = account_id
                    self.document_id = document_id
                }
            }
            public var path: Operations.downloadDocFromAccount.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.downloadDocFromAccount.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct MovedPermanently: Sendable, Hashable {
                /// Creates a new `MovedPermanently`.
                public init() {}
            }
            /// Redirect to the pre-signed download link for the document PDF file.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/{document_id}/download/get(downloadDocFromAccount)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Operations.downloadDocFromAccount.Output.MovedPermanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Operations.downloadDocFromAccount.Output.MovedPermanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// The document is not found.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/documents/{document_id}/download/get(downloadDocFromAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.downloadDocFromAccount.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.downloadDocFromAccount.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Download a document file directly
    ///
    /// The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found.
    ///
    ///
    /// - Remark: HTTP `GET /v1/documents/{document_id}`.
    /// - Remark: Generated from `#/paths//v1/documents/{document_id}/get(downloadDocumentById)`.
    public enum downloadDocumentById {
        public static let id: Swift.String = "downloadDocumentById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/documents/{document_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Document identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{document_id}/GET/path/document_id`.
                public var document_id: Components.Parameters.DocumentID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - document_id: Document identifier.
                public init(document_id: Components.Parameters.DocumentID) {
                    self.document_id = document_id
                }
            }
            public var path: Operations.downloadDocumentById.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.downloadDocumentById.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct MovedPermanently: Sendable, Hashable {
                /// Creates a new `MovedPermanently`.
                public init() {}
            }
            /// Redirect to the pre-signed download link for the document PDF file.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/documents/{document_id}/get(downloadDocumentById)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Operations.downloadDocumentById.Output.MovedPermanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Operations.downloadDocumentById.Output.MovedPermanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// The document was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/documents/{document_id}/get(downloadDocumentById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.downloadDocumentById.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.downloadDocumentById.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieve bank relationships for an account
    ///
    /// Retrieves Bank Relationships for an account
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/recipient_banks`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/get(getRecipientBanks)`.
    public enum getRecipientBanks {
        public static let id: Swift.String = "getRecipientBanks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getRecipientBanks.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/query/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case ACTIVE = "ACTIVE"
                    case INACTIVE = "INACTIVE"
                }
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/query/status`.
                public var status: Operations.getRecipientBanks.Input.Query.statusPayload?
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/query/bank_name`.
                public var bank_name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - status:
                ///   - bank_name:
                public init(
                    status: Operations.getRecipientBanks.Input.Query.statusPayload? = nil,
                    bank_name: Swift.String? = nil
                ) {
                    self.status = status
                    self.bank_name = bank_name
                }
            }
            public var query: Operations.getRecipientBanks.Input.Query
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRecipientBanks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRecipientBanks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getRecipientBanks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRecipientBanks.Input.Path,
                query: Operations.getRecipientBanks.Input.Query = .init(),
                headers: Operations.getRecipientBanks.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Bank])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Bank] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRecipientBanks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRecipientBanks.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success. Returns the bank relationship model.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/get(getRecipientBanks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRecipientBanks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRecipientBanks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Bad request. The body in the request is not valid.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/get(getRecipientBanks)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.getRecipientBanks.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.getRecipientBanks.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a Bank Relationship for an account
    ///
    /// If successful, retrieves Bank Relationships for an account
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/recipient_banks`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/post(createRecipientBank)`.
    public enum createRecipientBank {
        public static let id: Swift.String = "createRecipientBank"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/POST/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.createRecipientBank.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createRecipientBank.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createRecipientBank.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createRecipientBank.Input.Headers
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateBankRequest)
            }
            public var body: Operations.createRecipientBank.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createRecipientBank.Input.Path,
                headers: Operations.createRecipientBank.Input.Headers = .init(),
                body: Operations.createRecipientBank.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Bank)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Bank {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createRecipientBank.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createRecipientBank.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/post(createRecipientBank)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createRecipientBank.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createRecipientBank.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/post(createRecipientBank)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createRecipientBank.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createRecipientBank.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/post(createRecipientBank)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.createRecipientBank.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.createRecipientBank.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a Bank Relationship for an account
    ///
    /// If successful, deletes Bank Relationship for an account
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/recipient_banks/{bank_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/{bank_id}/delete(deleteRecipientBank)`.
    public enum deleteRecipientBank {
        public static let id: Swift.String = "deleteRecipientBank"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/{bank_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/{bank_id}/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/recipient_banks/{bank_id}/DELETE/path/bank_id`.
                public var bank_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - bank_id:
                public init(
                    account_id: Components.Parameters.AccountID,
                    bank_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.bank_id = bank_id
                }
            }
            public var path: Operations.deleteRecipientBank.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.deleteRecipientBank.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (No Content)
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/{bank_id}/delete(deleteRecipientBank)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteRecipientBank.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteRecipientBank.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/{bank_id}/delete(deleteRecipientBank)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.deleteRecipientBank.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.deleteRecipientBank.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Bank Not Found
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/recipient_banks/{bank_id}/delete(deleteRecipientBank)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteRecipientBank.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.deleteRecipientBank.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Return a list of transfers for an account.
    ///
    /// You can query a list of transfers for an account.
    ///
    ///
    /// You can filter requested transfers by values such as direction and status.
    ///
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/transfers`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/get(getTransfersForAccount)`.
    public enum getTransfersForAccount {
        public static let id: Swift.String = "getTransfersForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getTransfersForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case INCOMING = "INCOMING"
                    case OUTGOING = "OUTGOING"
                }
                /// INCOMING or OUTGOING
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/query/direction`.
                public var direction: Operations.getTransfersForAccount.Input.Query.directionPayload?
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/query/limit`.
                public var limit: Swift.Int32?
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/query/offset`.
                public var offset: Swift.Int32?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: INCOMING or OUTGOING
                ///   - limit:
                ///   - offset:
                public init(
                    direction: Operations.getTransfersForAccount.Input.Query.directionPayload? = nil,
                    limit: Swift.Int32? = nil,
                    offset: Swift.Int32? = nil
                ) {
                    self.direction = direction
                    self.limit = limit
                    self.offset = offset
                }
            }
            public var query: Operations.getTransfersForAccount.Input.Query
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTransfersForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTransfersForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTransfersForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getTransfersForAccount.Input.Path,
                query: Operations.getTransfersForAccount.Input.Query = .init(),
                headers: Operations.getTransfersForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Transfer])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Transfer] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTransfersForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTransfersForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/get(getTransfersForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTransfersForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTransfersForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Request a new transfer
    ///
    /// Create a new transfer to an account to fund it.
    ///
    /// In the sandbox environment, you can instantly deposit to or withdraw from an account with a virtual money amount. In the production environment, this endpoint is used only for requesting an outgoing (withdrawal) wire transfer at this moment. For the wire transfer (in production), you need to create a bank resource first using the Bank API. For more on how to fund an account in sandbox please check out this tutorial [here](https://alpaca.markets/learn/fund-broker-api/).
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/transfers`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/post(createTransferForAccount)`.
    public enum createTransferForAccount {
        public static let id: Swift.String = "createTransferForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/POST/path/account_id`.
                public var account_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id:
                public init(account_id: Swift.String) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.createTransferForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTransferForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTransferForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createTransferForAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateTransferRequest)
            }
            public var body: Operations.createTransferForAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createTransferForAccount.Input.Path,
                headers: Operations.createTransferForAccount.Input.Headers = .init(),
                body: Operations.createTransferForAccount.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Transfer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Transfer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTransferForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTransferForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successfully requested a transfer.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/post(createTransferForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTransferForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createTransferForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Request to close a transfer
    ///
    /// Request to close a transfer
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/transfers/{transfer_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/{transfer_id}/delete(deleteTransfer)`.
    public enum deleteTransfer {
        public static let id: Swift.String = "deleteTransfer"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/{transfer_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/{transfer_id}/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Tranfer identifier
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/{transfer_id}/DELETE/path/transfer_id`.
                public var transfer_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - transfer_id: Tranfer identifier
                public init(
                    account_id: Components.Parameters.AccountID,
                    transfer_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.transfer_id = transfer_id
                }
            }
            public var path: Operations.deleteTransfer.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/transfers/{transfer_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteTransfer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteTransfer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteTransfer.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteTransfer.Input.Path,
                headers: Operations.deleteTransfer.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (No Content)
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/{transfer_id}/delete(deleteTransfer)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteTransfer.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteTransfer.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/transfers/{transfer_id}/delete(deleteTransfer)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve account activities
    ///
    /// Returns an array of Activities
    ///
    /// Notes:
    /// * Pagination is handled using the `page_token` and `page_size` parameters.
    /// * `page_token` represents the ID of the end of your current page of results.
    ///   for example if in your first response the id of the last Activiy item returned in the array was `20220203000000000::045b3b8d-c566-4bef-b741-2bf598dd6ae7`, you'd pass that value as `page_token` to get the next page of results
    ///
    /// * If specified with a `direction` of `desc`, for example, the results will end before the activity with the specified ID.
    /// * If specified with a `direction` of `asc`, results will begin with the activity immediately after the one specified.
    /// * `page_size` is the maximum number of entries to return in the response.
    /// * If `date` is not specified, the default and maximum value is 100.
    /// * If `date` is specified, the default behavior is to return all results, and there is no maximum page size.
    ///
    /// - Remark: HTTP `GET /v1/accounts/activities`.
    /// - Remark: Generated from `#/paths//v1/accounts/activities/get(getAccountActivities)`.
    public enum getAccountActivities {
        public static let id: Swift.String = "getAccountActivities"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of a single account to filter by
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query/account_id`.
                public var account_id: Swift.String?
                /// Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query/date`.
                public var date: Swift.String?
                /// Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query/until`.
                public var until: Swift.String?
                /// Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported. Cannot be used with date.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query/after`.
                public var after: Swift.String?
                /// - Remark: Generated from `#/components/parameters/Direction`.
                @frozen public enum Direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query/direction`.
                public var direction: Components.Parameters.Direction?
                /// The maximum number of entries to return in the response
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query/page_size`.
                public var page_size: Swift.Int?
                /// The Activity ID of the end of your current page of results. 
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/query/page_token`.
                public var page_token: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - account_id: id of a single account to filter by
                ///   - date: Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///   - until: Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///   - after: Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported. Cannot be used with date.
                ///   - direction: The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///   - page_size: The maximum number of entries to return in the response
                ///   - page_token: The Activity ID of the end of your current page of results. 
                public init(
                    account_id: Swift.String? = nil,
                    date: Swift.String? = nil,
                    until: Swift.String? = nil,
                    after: Swift.String? = nil,
                    direction: Components.Parameters.Direction? = nil,
                    page_size: Swift.Int? = nil,
                    page_token: Swift.String? = nil
                ) {
                    self.account_id = account_id
                    self.date = date
                    self.until = until
                    self.after = after
                    self.direction = direction
                    self.page_size = page_size
                    self.page_token = page_token
                }
            }
            public var query: Operations.getAccountActivities.Input.Query
            /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountActivities.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAccountActivities.Input.Query = .init(),
                headers: Operations.getAccountActivities.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/activities/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Activity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Activity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountActivities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountActivities.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/activities/get(getAccountActivities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountActivities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountActivities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve specific account activities
    ///
    /// Retrieves an Array of Activies by type
    ///
    /// Notes:
    /// * Pagination is handled using the `page_token` and `page_size` parameters.
    /// * `page_token` represents the ID of the end of your current page of results.
    ///   for example if in your first response the id of the last Activiy item returned in the array was `20220203000000000::045b3b8d-c566-4bef-b741-2bf598dd6ae7`, you'd pass that value as `page_token` to get the next page of results
    ///
    /// * If specified with a `direction` of `desc`, for example, the results will end before the activity with the specified ID.
    /// * If specified with a `direction` of `asc`, results will begin with the activity immediately after the one specified.
    /// * `page_size` is the maximum number of entries to return in the response.
    /// * If `date` is not specified, the default and maximum value is 100.
    /// * If `date` is specified, the default behavior is to return all results, and there is no maximum page size.
    ///
    /// - Remark: HTTP `GET /v1/accounts/activities/{activity_type}`.
    /// - Remark: Generated from `#/paths//v1/accounts/activities/{activity_type}/get(getAccountActivitiesByType)`.
    public enum getAccountActivitiesByType {
        public static let id: Swift.String = "getAccountActivitiesByType"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/ActivityType`.
                @frozen public enum ActivityType: String, Codable, Hashable, Sendable {
                    case FILL = "FILL"
                    case ACATC = "ACATC"
                    case ACATS = "ACATS"
                    case CIL = "CIL"
                    case CSD = "CSD"
                    case CSW = "CSW"
                    case DIV = "DIV"
                    case DIVCGL = "DIVCGL"
                    case DIVCGS = "DIVCGS"
                    case DIVNRA = "DIVNRA"
                    case DIVROC = "DIVROC"
                    case DIVTXEX = "DIVTXEX"
                    case FEE = "FEE"
                    case INT = "INT"
                    case JNLC = "JNLC"
                    case JNLS = "JNLS"
                    case MA = "MA"
                    case PTC = "PTC"
                    case REORG = "REORG"
                    case SPIN = "SPIN"
                    case SPLIT = "SPLIT"
                }
                /// see ActivityType model for details about what the different types mean
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/path/activity_type`.
                public var activity_type: Components.Parameters.ActivityType
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - activity_type: see ActivityType model for details about what the different types mean
                public init(activity_type: Components.Parameters.ActivityType) {
                    self.activity_type = activity_type
                }
            }
            public var path: Operations.getAccountActivitiesByType.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of a single account to filter by
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query/account_id`.
                public var account_id: Swift.String?
                /// Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query/date`.
                public var date: Foundation.Date?
                /// Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query/until`.
                public var until: Foundation.Date?
                /// Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query/after`.
                public var after: Foundation.Date?
                /// - Remark: Generated from `#/components/parameters/Direction`.
                @frozen public enum Direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query/direction`.
                public var direction: Components.Parameters.Direction?
                /// The maximum number of entries to return in the response
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query/page_size`.
                public var page_size: Swift.Int?
                /// The ID of the end of your current page of results
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/query/page_token`.
                public var page_token: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - account_id: id of a single account to filter by
                ///   - date: Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///   - until: Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///   - after: Both formats YYYY-MM-DD and YYYY-MM-DDTHH:MM:SSZ supported.
                ///   - direction: The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///   - page_size: The maximum number of entries to return in the response
                ///   - page_token: The ID of the end of your current page of results
                public init(
                    account_id: Swift.String? = nil,
                    date: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    after: Foundation.Date? = nil,
                    direction: Components.Parameters.Direction? = nil,
                    page_size: Swift.Int? = nil,
                    page_token: Swift.String? = nil
                ) {
                    self.account_id = account_id
                    self.date = date
                    self.until = until
                    self.after = after
                    self.direction = direction
                    self.page_size = page_size
                    self.page_token = page_token
                }
            }
            public var query: Operations.getAccountActivitiesByType.Input.Query
            /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivitiesByType.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivitiesByType.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountActivitiesByType.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountActivitiesByType.Input.Path,
                query: Operations.getAccountActivitiesByType.Input.Query = .init(),
                headers: Operations.getAccountActivitiesByType.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/activities/{activity_type}/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Activity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Activity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountActivitiesByType.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountActivitiesByType.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/activities/{activity_type}/get(getAccountActivitiesByType)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountActivitiesByType.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountActivitiesByType.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve ACH Relationships for an account
    ///
    /// Returns a list of ACH Relationships for an account
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/ach_relationships`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/get(getAccountACHRelationships)`.
    public enum getAccountACHRelationships {
        public static let id: Swift.String = "getAccountACHRelationships"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getAccountACHRelationships.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Comma-separated status values
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/GET/query/statuses`.
                public var statuses: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - statuses: Comma-separated status values
                public init(statuses: Swift.String? = nil) {
                    self.statuses = statuses
                }
            }
            public var query: Operations.getAccountACHRelationships.Input.Query
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountACHRelationships.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountACHRelationships.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountACHRelationships.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountACHRelationships.Input.Path,
                query: Operations.getAccountACHRelationships.Input.Query = .init(),
                headers: Operations.getAccountACHRelationships.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ACHRelationship])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ACHRelationship] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountACHRelationships.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountACHRelationships.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/get(getAccountACHRelationships)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountACHRelationships.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountACHRelationships.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an ACH Relationship
    ///
    /// Create a new ACHRelationship for an account
    ///
    /// If successful, will return 200 code with a newly created ACH Relationship entity.
    ///
    /// - Remark: HTTP `POST /v1/accounts/{account_id}/ach_relationships`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/post(createACHRelationshipForAccount)`.
    public enum createACHRelationshipForAccount {
        public static let id: Swift.String = "createACHRelationshipForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.createACHRelationshipForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createACHRelationshipForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createACHRelationshipForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createACHRelationshipForAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateACHRelationshipRequest)
            }
            public var body: Operations.createACHRelationshipForAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createACHRelationshipForAccount.Input.Path,
                headers: Operations.createACHRelationshipForAccount.Input.Headers = .init(),
                body: Operations.createACHRelationshipForAccount.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ACHRelationship)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ACHRelationship {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createACHRelationshipForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createACHRelationshipForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// returns the newly created ACH Relationship entity.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/post(createACHRelationshipForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createACHRelationshipForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createACHRelationshipForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/post(createACHRelationshipForAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Client is not authorized for this operation.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/post(createACHRelationshipForAccount)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.NotAuthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.NotAuthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createACHRelationshipForAccount.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createACHRelationshipForAccount.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// The account already has an active relationship.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/post(createACHRelationshipForAccount)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.createACHRelationshipForAccount.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.createACHRelationshipForAccount.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an existing ACH relationship
    ///
    /// Delete an existing ACH relationship for an account
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/delete(deleteACHRelationshipFromAccount)`.
    public enum deleteACHRelationshipFromAccount {
        public static let id: Swift.String = "deleteACHRelationshipFromAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// ACH relationship identifier
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/DELETE/path/ach_relationship_id`.
                public var ach_relationship_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - ach_relationship_id: ACH relationship identifier
                public init(
                    account_id: Components.Parameters.AccountID,
                    ach_relationship_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.ach_relationship_id = ach_relationship_id
                }
            }
            public var path: Operations.deleteACHRelationshipFromAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteACHRelationshipFromAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteACHRelationshipFromAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteACHRelationshipFromAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteACHRelationshipFromAccount.Input.Path,
                headers: Operations.deleteACHRelationshipFromAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (No Content)
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/delete(deleteACHRelationshipFromAccount)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteACHRelationshipFromAccount.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteACHRelationshipFromAccount.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// the passed in account_id or relationship_id were invalid
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/delete(deleteACHRelationshipFromAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.deleteACHRelationshipFromAccount.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.deleteACHRelationshipFromAccount.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/ach_relationships/{ach_relationship_id}/delete(deleteACHRelationshipFromAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve trading details for an account.
    ///
    /// As a broker you can view more trading details about your users.
    ///
    /// The response is a Trading Account model.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/account`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/account/get(getTradingAccount)`.
    public enum getTradingAccount {
        public static let id: Swift.String = "getTradingAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/account/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/account/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getTradingAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/account/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTradingAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTradingAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTradingAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getTradingAccount.Input.Path,
                headers: Operations.getTradingAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/account/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/account/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradeAccount)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradeAccount {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTradingAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTradingAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/account/get(getTradingAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTradingAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTradingAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List open positions for an account
    ///
    /// List open positions for an account
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/positions`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/get(getPositionsForAccount)`.
    public enum getPositionsForAccount {
        public static let id: Swift.String = "getPositionsForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getPositionsForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPositionsForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPositionsForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPositionsForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getPositionsForAccount.Input.Path,
                headers: Operations.getPositionsForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Position])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Position] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPositionsForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPositionsForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/get(getPositionsForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPositionsForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPositionsForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Close All Positions for an Account
    ///
    /// Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/positions`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/delete(closeAllPositionsForAccount)`.
    public enum closeAllPositionsForAccount {
        public static let id: Swift.String = "closeAllPositionsForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.closeAllPositionsForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// If true is specified, cancel all open orders before liquidating all positions.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/DELETE/query/cancel_orders`.
                public var cancel_orders: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cancel_orders: If true is specified, cancel all open orders before liquidating all positions.
                public init(cancel_orders: Swift.Bool? = nil) {
                    self.cancel_orders = cancel_orders
                }
            }
            public var query: Operations.closeAllPositionsForAccount.Input.Query
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.closeAllPositionsForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.closeAllPositionsForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.closeAllPositionsForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.closeAllPositionsForAccount.Input.Path,
                query: Operations.closeAllPositionsForAccount.Input.Query = .init(),
                headers: Operations.closeAllPositionsForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Code207: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/DELETE/responses/207/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/DELETE/responses/207/content/application\/json`.
                    case json([Components.Schemas.PositionClosedResponse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.PositionClosedResponse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.closeAllPositionsForAccount.Output.Code207.Body
                /// Creates a new `Code207`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.closeAllPositionsForAccount.Output.Code207.Body) {
                    self.body = body
                }
            }
            /// HTTP 207 Multi-Status with body; an array of objects that include the order id and http status code for each status request.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/delete(closeAllPositionsForAccount)/responses/207`.
            ///
            /// HTTP response code: `207 code207`.
            case code207(Operations.closeAllPositionsForAccount.Output.Code207)
            /// The associated value of the enum case if `self` is `.code207`.
            ///
            /// - Throws: An error if `self` is not `.code207`.
            /// - SeeAlso: `.code207`.
            public var code207: Operations.closeAllPositionsForAccount.Output.Code207 {
                get throws {
                    switch self {
                    case let .code207(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "code207",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                public init() {}
            }
            /// Failed to liquidate some positions
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/delete(closeAllPositionsForAccount)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.closeAllPositionsForAccount.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.closeAllPositionsForAccount.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an Open Position for account by Symbol or AssetId
    ///
    /// Retrieves the account’s open position for the given symbol or asset_id.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/get(getPositionsForAccountBySymbol)`.
    public enum getPositionsForAccountBySymbol {
        public static let id: Swift.String = "getPositionsForAccountBySymbol"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// The symbol or asset_id 
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/GET/path/symbol_or_asset_id`.
                public var symbol_or_asset_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - symbol_or_asset_id: The symbol or asset_id 
                public init(
                    account_id: Components.Parameters.AccountID,
                    symbol_or_asset_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.symbol_or_asset_id = symbol_or_asset_id
                }
            }
            public var path: Operations.getPositionsForAccountBySymbol.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPositionsForAccountBySymbol.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPositionsForAccountBySymbol.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPositionsForAccountBySymbol.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getPositionsForAccountBySymbol.Input.Path,
                headers: Operations.getPositionsForAccountBySymbol.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Position)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Position {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPositionsForAccountBySymbol.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPositionsForAccountBySymbol.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The requested Position object
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/get(getPositionsForAccountBySymbol)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPositionsForAccountBySymbol.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPositionsForAccountBySymbol.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Account doesn't have a position for this symbol or asset_id 
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/get(getPositionsForAccountBySymbol)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getPositionsForAccountBySymbol.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getPositionsForAccountBySymbol.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Close a Position for an Account
    ///
    /// Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/delete(closePositionForAccountBySymbol)`.
    public enum closePositionForAccountBySymbol {
        public static let id: Swift.String = "closePositionForAccountBySymbol"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// The symbol or asset_id 
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/path/symbol_or_asset_id`.
                public var symbol_or_asset_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - symbol_or_asset_id: The symbol or asset_id 
                public init(
                    account_id: Components.Parameters.AccountID,
                    symbol_or_asset_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.symbol_or_asset_id = symbol_or_asset_id
                }
            }
            public var path: Operations.closePositionForAccountBySymbol.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// Optional the number of shares to liquidate. Can accept up to 9 decimal points. Cannot work with percentage
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/query/qty`.
                public var qty: Swift.String?
                /// percentage of position to liquidate. Must be between 0 and 100. Would only sell fractional if position is originally fractional. Can accept up to 9 decimal points. Cannot work with qty
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/query/percentage`.
                public var percentage: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - qty: Optional the number of shares to liquidate. Can accept up to 9 decimal points. Cannot work with percentage
                ///   - percentage: percentage of position to liquidate. Must be between 0 and 100. Would only sell fractional if position is originally fractional. Can accept up to 9 decimal points. Cannot work with qty
                public init(
                    qty: Swift.String? = nil,
                    percentage: Swift.String? = nil
                ) {
                    self.qty = qty
                    self.percentage = percentage
                }
            }
            public var query: Operations.closePositionForAccountBySymbol.Input.Query
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.closePositionForAccountBySymbol.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.closePositionForAccountBySymbol.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.closePositionForAccountBySymbol.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.closePositionForAccountBySymbol.Input.Path,
                query: Operations.closePositionForAccountBySymbol.Input.Query = .init(),
                headers: Operations.closePositionForAccountBySymbol.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.closePositionForAccountBySymbol.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.closePositionForAccountBySymbol.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/positions/{symbol_or_asset_id}/delete(closePositionForAccountBySymbol)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.closePositionForAccountBySymbol.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.closePositionForAccountBySymbol.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a single order for the given order_id.
    ///
    /// Retrieves a single order for the given order_id.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/get(getOrderForAccount)`.
    public enum getOrderForAccount {
        public static let id: Swift.String = "getOrderForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Order identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/GET/path/order_id`.
                public var order_id: Components.Parameters.OrderID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - order_id: Order identifier.
                public init(
                    account_id: Components.Parameters.AccountID,
                    order_id: Components.Parameters.OrderID
                ) {
                    self.account_id = account_id
                    self.order_id = order_id
                }
            }
            public var path: Operations.getOrderForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOrderForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOrderForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getOrderForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getOrderForAccount.Input.Path,
                headers: Operations.getOrderForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getOrderForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getOrderForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The requested Order object
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/get(getOrderForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getOrderForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getOrderForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/get(getOrderForAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/get(getOrderForAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Replaces a single order with updated parameters
    ///
    /// Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.
    ///
    /// A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel found [here in the market data api](https://alpaca.markets/docs/api-references/market-data-api/#order-updates).
    ///
    /// While an order is being replaced, the account's buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.
    ///
    /// - Remark: HTTP `PATCH /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/patch(replaceOrderForAccount)`.
    public enum replaceOrderForAccount {
        public static let id: Swift.String = "replaceOrderForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Order identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/path/order_id`.
                public var order_id: Components.Parameters.OrderID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - order_id: Order identifier.
                public init(
                    account_id: Components.Parameters.AccountID,
                    order_id: Components.Parameters.OrderID
                ) {
                    self.account_id = account_id
                    self.order_id = order_id
                }
            }
            public var path: Operations.replaceOrderForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.replaceOrderForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.replaceOrderForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.replaceOrderForAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.UpdateOrderRequest)
            }
            public var body: Operations.replaceOrderForAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.replaceOrderForAccount.Input.Path,
                headers: Operations.replaceOrderForAccount.Input.Headers = .init(),
                body: Operations.replaceOrderForAccount.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.replaceOrderForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.replaceOrderForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A new Order object with a new order_id
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/patch(replaceOrderForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.replaceOrderForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.replaceOrderForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/patch(replaceOrderForAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Buying power or shares are not sufficient
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/patch(replaceOrderForAccount)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.replaceOrderForAccount.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.replaceOrderForAccount.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/patch(replaceOrderForAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Attempts to cancel an open order.
    ///
    /// Attempts to cancel an open order. If the order is no longer cancelable (for example if the status is "filled"), the server will respond with status 422, and reject the request.
    ///
    /// Upon acceptance of the cancel request, it returns status 204.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/delete(deleteOrderForAccount)`.
    public enum deleteOrderForAccount {
        public static let id: Swift.String = "deleteOrderForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Order identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/DELETE/path/order_id`.
                public var order_id: Components.Parameters.OrderID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                ///   - order_id: Order identifier.
                public init(
                    account_id: Components.Parameters.AccountID,
                    order_id: Components.Parameters.OrderID
                ) {
                    self.account_id = account_id
                    self.order_id = order_id
                }
            }
            public var path: Operations.deleteOrderForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/{order_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteOrderForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteOrderForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteOrderForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteOrderForAccount.Input.Path,
                headers: Operations.deleteOrderForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success (No Content)
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/delete(deleteOrderForAccount)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteOrderForAccount.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteOrderForAccount.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/delete(deleteOrderForAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/{order_id}/delete(deleteOrderForAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// Endpoint defaults to open orders if no parameters are provided.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/get(getAllOrdersForAccount)`.
    public enum getAllOrdersForAccount {
        public static let id: Swift.String = "getAllOrdersForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getAllOrdersForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Order status to be queried. open, closed or all. Defaults to open.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/status`.
                public var status: Operations.getAllOrdersForAccount.Input.Query.statusPayload?
                /// The maximum number of orders in response. Defaults to 50 and max is 500.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/limit`.
                public var limit: Swift.Int?
                /// The response will include only ones submitted after this timestamp (exclusive.)
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/after`.
                public var after: Components.Parameters.After?
                /// The response will include only ones submitted until this timestamp (exclusive.)
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/until`.
                public var until: Components.Parameters.Until?
                /// - Remark: Generated from `#/components/parameters/Direction`.
                @frozen public enum Direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/direction`.
                public var direction: Components.Parameters.Direction?
                /// If true, the result will roll up multi-leg orders under the legs field of primary order.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/nested`.
                public var nested: Swift.Bool?
                /// A comma-separated list of symbols to filter by.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/query/symbols`.
                public var symbols: Components.Parameters.Symbols?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - status: Order status to be queried. open, closed or all. Defaults to open.
                ///   - limit: The maximum number of orders in response. Defaults to 50 and max is 500.
                ///   - after: The response will include only ones submitted after this timestamp (exclusive.)
                ///   - until: The response will include only ones submitted until this timestamp (exclusive.)
                ///   - direction: The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///   - nested: If true, the result will roll up multi-leg orders under the legs field of primary order.
                ///   - symbols: A comma-separated list of symbols to filter by.
                public init(
                    status: Operations.getAllOrdersForAccount.Input.Query.statusPayload? = nil,
                    limit: Swift.Int? = nil,
                    after: Components.Parameters.After? = nil,
                    until: Components.Parameters.Until? = nil,
                    direction: Components.Parameters.Direction? = nil,
                    nested: Swift.Bool? = nil,
                    symbols: Components.Parameters.Symbols? = nil
                ) {
                    self.status = status
                    self.limit = limit
                    self.after = after
                    self.until = until
                    self.direction = direction
                    self.nested = nested
                    self.symbols = symbols
                }
            }
            public var query: Operations.getAllOrdersForAccount.Input.Query
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllOrdersForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllOrdersForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAllOrdersForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAllOrdersForAccount.Input.Path,
                query: Operations.getAllOrdersForAccount.Input.Query = .init(),
                headers: Operations.getAllOrdersForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Order])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Order] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllOrdersForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllOrdersForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/get(getAllOrdersForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllOrdersForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllOrdersForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/get(getAllOrdersForAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/get(getAllOrdersForAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an order for an account.
    ///
    /// Create an order for an account.
    ///
    /// - Remark: HTTP `POST /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/post(createOrderForAccount)`.
    public enum createOrderForAccount {
        public static let id: Swift.String = "createOrderForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/POST/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.createOrderForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createOrderForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createOrderForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createOrderForAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateOrderRequest)
            }
            public var body: Operations.createOrderForAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createOrderForAccount.Input.Path,
                headers: Operations.createOrderForAccount.Input.Headers = .init(),
                body: Operations.createOrderForAccount.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createOrderForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createOrderForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/post(createOrderForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createOrderForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createOrderForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/post(createOrderForAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Request is forbidden
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/post(createOrderForAccount)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/post(createOrderForAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
    ///
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
    ///
    /// - Remark: HTTP `DELETE /v1/trading/accounts/{account_id}/orders`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/delete(deleteAllOrdersForAccount)`.
    public enum deleteAllOrdersForAccount {
        public static let id: Swift.String = "deleteAllOrdersForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Account identifier.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/DELETE/path/account_id`.
                public var account_id: Components.Parameters.AccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Account identifier.
                public init(account_id: Components.Parameters.AccountID) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.deleteAllOrdersForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAllOrdersForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAllOrdersForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteAllOrdersForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteAllOrdersForAccount.Input.Path,
                headers: Operations.deleteAllOrdersForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Code207: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/DELETE/responses/207/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/orders/DELETE/responses/207/content/application\/json`.
                    case json([Components.Schemas.OrderClosedResponse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderClosedResponse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteAllOrdersForAccount.Output.Code207.Body
                /// Creates a new `Code207`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteAllOrdersForAccount.Output.Code207.Body) {
                    self.body = body
                }
            }
            /// HTTP 207 Multi-Status with body, which is an array of objects that include the order id, http status code and an order object for each cancellation request.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/delete(deleteAllOrdersForAccount)/responses/207`.
            ///
            /// HTTP response code: `207 code207`.
            case code207(Operations.deleteAllOrdersForAccount.Output.Code207)
            /// The associated value of the enum case if `self` is `.code207`.
            ///
            /// - Throws: An error if `self` is not `.code207`.
            /// - SeeAlso: `.code207`.
            public var code207: Operations.deleteAllOrdersForAccount.Output.Code207 {
                get throws {
                    switch self {
                    case let .code207(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "code207",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/delete(deleteAllOrdersForAccount)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource does not exist.
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/orders/delete(deleteAllOrdersForAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve all assets
    ///
    /// Returns all assets
    ///
    /// - Remark: HTTP `GET /v1/assets`.
    /// - Remark: Generated from `#/paths//v1/assets/get(getAssets)`.
    public enum getAssets {
        public static let id: Swift.String = "getAssets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/assets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/assets/GET/query/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case active = "active"
                    case inactive = "inactive"
                    case all = "all"
                }
                /// Asset status to filter by, will default to `all`
                ///
                /// - Remark: Generated from `#/paths/v1/assets/GET/query/status`.
                public var status: Operations.getAssets.Input.Query.statusPayload?
                /// - Remark: Generated from `#/paths/v1/assets/GET/query/asset_class`.
                @frozen public enum asset_classPayload: String, Codable, Hashable, Sendable {
                    case us_equity = "us_equity"
                    case crypto = "crypto"
                }
                /// Asset class to filter by, `us_equity` or `crypto`. Defaults to `us_equity`
                ///
                /// - Remark: Generated from `#/paths/v1/assets/GET/query/asset_class`.
                public var asset_class: Operations.getAssets.Input.Query.asset_classPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - status: Asset status to filter by, will default to `all`
                ///   - asset_class: Asset class to filter by, `us_equity` or `crypto`. Defaults to `us_equity`
                public init(
                    status: Operations.getAssets.Input.Query.statusPayload? = nil,
                    asset_class: Operations.getAssets.Input.Query.asset_classPayload? = nil
                ) {
                    self.status = status
                    self.asset_class = asset_class
                }
            }
            public var query: Operations.getAssets.Input.Query
            /// - Remark: Generated from `#/paths/v1/assets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAssets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAssets.Input.Query = .init(),
                headers: Operations.getAssets.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/assets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/assets/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Asset])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Asset] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAssets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAssets.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// An array of asset objects.
            ///
            /// - Remark: Generated from `#/paths//v1/assets/get(getAssets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAssets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAssets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve an asset by UUID
    ///
    /// Returns the requested asset, if found
    ///
    /// - Remark: HTTP `GET /v1/assets/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v1/assets/{symbol_or_asset_id}/get(getAssetBySymbolOrId)`.
    public enum getAssetBySymbolOrId {
        public static let id: Swift.String = "getAssetBySymbolOrId"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/assets/{symbol_or_asset_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// you can use either the asset's Id or the symbol to search
                ///
                /// - Remark: Generated from `#/paths/v1/assets/{symbol_or_asset_id}/GET/path/symbol_or_asset_id`.
                public var symbol_or_asset_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - symbol_or_asset_id: you can use either the asset's Id or the symbol to search
                public init(symbol_or_asset_id: Swift.String) {
                    self.symbol_or_asset_id = symbol_or_asset_id
                }
            }
            public var path: Operations.getAssetBySymbolOrId.Input.Path
            /// - Remark: Generated from `#/paths/v1/assets/{symbol_or_asset_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssetBySymbolOrId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssetBySymbolOrId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAssetBySymbolOrId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAssetBySymbolOrId.Input.Path,
                headers: Operations.getAssetBySymbolOrId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/assets/{symbol_or_asset_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/assets/{symbol_or_asset_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Asset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Asset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAssetBySymbolOrId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAssetBySymbolOrId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returns asset
            ///
            /// - Remark: Generated from `#/paths//v1/assets/{symbol_or_asset_id}/get(getAssetBySymbolOrId)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAssetBySymbolOrId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAssetBySymbolOrId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Asset not found
            ///
            /// - Remark: Generated from `#/paths//v1/assets/{symbol_or_asset_id}/get(getAssetBySymbolOrId)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getAssetBySymbolOrId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getAssetBySymbolOrId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Query market calendar
    ///
    /// The calendar API serves the full list of market days from 1970 to 2029. It can also be queried by specifying a start and/or end time to narrow down the results. In addition to the dates, the response also contains the specific open and close times for the market days, taking into account early closures.
    ///
    /// - Remark: HTTP `GET /v1/calendar`.
    /// - Remark: Generated from `#/paths//v1/calendar/get(queryMarketCalendar)`.
    public enum queryMarketCalendar {
        public static let id: Swift.String = "queryMarketCalendar"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/calendar/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The first date to retrieve data for. (Inclusive) in YYYY-MM-DD format
                ///
                /// - Remark: Generated from `#/paths/v1/calendar/GET/query/start`.
                public var start: Swift.String?
                /// The last date to retrieve data for. (Inclusive) in YYYY-MM-DD format
                ///
                /// - Remark: Generated from `#/paths/v1/calendar/GET/query/end`.
                public var end: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - start: The first date to retrieve data for. (Inclusive) in YYYY-MM-DD format
                ///   - end: The last date to retrieve data for. (Inclusive) in YYYY-MM-DD format
                public init(
                    start: Swift.String? = nil,
                    end: Swift.String? = nil
                ) {
                    self.start = start
                    self.end = end
                }
            }
            public var query: Operations.queryMarketCalendar.Input.Query
            /// - Remark: Generated from `#/paths/v1/calendar/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.queryMarketCalendar.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.queryMarketCalendar.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.queryMarketCalendar.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.queryMarketCalendar.Input.Query = .init(),
                headers: Operations.queryMarketCalendar.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/calendar/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/calendar/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Calendar])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Calendar] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.queryMarketCalendar.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.queryMarketCalendar.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returns the calendar object
            ///
            /// - Remark: Generated from `#/paths//v1/calendar/get(queryMarketCalendar)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.queryMarketCalendar.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.queryMarketCalendar.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Query market clock
    ///
    /// The Clock API serves the current market timestamp, whether or not the market is currently open, as well as the times of the next market open and close.
    ///
    /// - Remark: HTTP `GET /v1/clock`.
    /// - Remark: Generated from `#/paths//v1/clock/get(queryMarketClock)`.
    public enum queryMarketClock {
        public static let id: Swift.String = "queryMarketClock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/clock/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.queryMarketClock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.queryMarketClock.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.queryMarketClock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.queryMarketClock.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/clock/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/clock/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Clock)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Clock {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.queryMarketClock.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.queryMarketClock.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The current market's timestamp
            ///
            /// - Remark: Generated from `#/paths//v1/clock/get(queryMarketClock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.queryMarketClock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.queryMarketClock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Subscribe to account status events (SSE).
    ///
    /// Events API provide event push as well as historical queries via SSE (server sent events).
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    ///
    /// - Remark: HTTP `GET /v1/events/accounts/status`.
    /// - Remark: Generated from `#/paths//v1/events/accounts/status/get(suscribeToAccountStatusSSE)`.
    public enum suscribeToAccountStatusSSE {
        public static let id: Swift.String = "suscribeToAccountStatusSSE"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/query/since`.
                public var since: Swift.String?
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/query/until`.
                public var until: Swift.String?
                /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/query/since_id`.
                public var since_id: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/query/until_id`.
                public var until_id: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Format: YYYY-MM-DD
                ///   - until: Format: YYYY-MM-DD
                ///   - since_id:
                ///   - until_id:
                public init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    since_id: Swift.Int? = nil,
                    until_id: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.since_id = since_id
                    self.until_id = until_id
                }
            }
            public var query: Operations.suscribeToAccountStatusSSE.Input.Query
            /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.suscribeToAccountStatusSSE.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.suscribeToAccountStatusSSE.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.suscribeToAccountStatusSSE.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.suscribeToAccountStatusSSE.Input.Query = .init(),
                headers: Operations.suscribeToAccountStatusSSE.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/events/accounts/status/GET/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.suscribeToAccountStatusSSE.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.suscribeToAccountStatusSSE.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Connected. Events will now start streaming as long as you keep the connection open.
            ///
            /// - Remark: Generated from `#/paths//v1/events/accounts/status/get(suscribeToAccountStatusSSE)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.suscribeToAccountStatusSSE.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.suscribeToAccountStatusSSE.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case text_event_hyphen_stream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .text_event_hyphen_stream
                ]
            }
        }
    }
    /// Subscribe to journal events (SSE).
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to journal status updates as they get processed by our backoffice.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/journals/status`.
    /// - Remark: Generated from `#/paths//v1/events/journals/status/get(subscribeToJournalStatusSSE)`.
    public enum subscribeToJournalStatusSSE {
        public static let id: Swift.String = "subscribeToJournalStatusSSE"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/query/since`.
                public var since: Foundation.Date?
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/query/until`.
                public var until: Foundation.Date?
                /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/query/since_id`.
                public var since_id: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/query/until_id`.
                public var until_id: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Format: YYYY-MM-DD
                ///   - until: Format: YYYY-MM-DD
                ///   - since_id:
                ///   - until_id:
                public init(
                    since: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    since_id: Swift.Int? = nil,
                    until_id: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.since_id = since_id
                    self.until_id = until_id
                }
            }
            public var query: Operations.subscribeToJournalStatusSSE.Input.Query
            /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subscribeToJournalStatusSSE.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subscribeToJournalStatusSSE.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.subscribeToJournalStatusSSE.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.subscribeToJournalStatusSSE.Input.Query = .init(),
                headers: Operations.subscribeToJournalStatusSSE.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/events/journals/status/GET/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.subscribeToJournalStatusSSE.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.subscribeToJournalStatusSSE.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Connected. Events will now start streaming as long as you keep the connection open.
            ///
            /// - Remark: Generated from `#/paths//v1/events/journals/status/get(subscribeToJournalStatusSSE)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.subscribeToJournalStatusSSE.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.subscribeToJournalStatusSSE.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case text_event_hyphen_stream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .text_event_hyphen_stream
                ]
            }
        }
    }
    /// Subscribe to Transfer Events (SSE)
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to transfer status updates as they get processed by our backoffice, for both end-user and firm accounts.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/transfers/status`.
    /// - Remark: Generated from `#/paths//v1/events/transfers/status/get(subscribeToTransferStatusSSE)`.
    public enum subscribeToTransferStatusSSE {
        public static let id: Swift.String = "subscribeToTransferStatusSSE"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/query/since`.
                public var since: Foundation.Date?
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/query/until`.
                public var until: Foundation.Date?
                /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/query/since_id`.
                public var since_id: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/query/until_id`.
                public var until_id: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Format: YYYY-MM-DD
                ///   - until: Format: YYYY-MM-DD
                ///   - since_id:
                ///   - until_id:
                public init(
                    since: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    since_id: Swift.Int? = nil,
                    until_id: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.since_id = since_id
                    self.until_id = until_id
                }
            }
            public var query: Operations.subscribeToTransferStatusSSE.Input.Query
            /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subscribeToTransferStatusSSE.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subscribeToTransferStatusSSE.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.subscribeToTransferStatusSSE.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.subscribeToTransferStatusSSE.Input.Query = .init(),
                headers: Operations.subscribeToTransferStatusSSE.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/events/transfers/status/GET/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.subscribeToTransferStatusSSE.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.subscribeToTransferStatusSSE.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Connected. Events will now start streaming as long as you keep the connection open.
            ///
            /// - Remark: Generated from `#/paths//v1/events/transfers/status/get(subscribeToTransferStatusSSE)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.subscribeToTransferStatusSSE.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.subscribeToTransferStatusSSE.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case text_event_hyphen_stream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .text_event_hyphen_stream
                ]
            }
        }
    }
    /// Subscribe to Trade Events (SSE)
    ///
    /// The Events API provides event push as well as historical queries via SSE (server sent events).
    ///
    /// You can listen to events related to trade updates. Most market trades sent during market hours are filled instantly; you can listen to limit order updates through this endpoint.
    ///
    /// Historical events are streamed immediately if queried, and updates are pushed as events occur.
    ///
    /// Query Params Rules:
    /// - `since` required if `until` specified
    /// - `since_id` required if `until_id` specified
    /// - `since` and `since_id` can’t be used at the same time
    /// Behavior:
    /// - if `since` or `since_id` not specified this will not return any historic data
    /// - if `until` or `until_id` reached stream will end (status 200)
    ///
    /// ---
    ///
    /// Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.
    ///
    /// If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.
    ///
    /// - Remark: HTTP `GET /v1/events/trades`.
    /// - Remark: Generated from `#/paths//v1/events/trades/get(subscribeToTradeSSE)`.
    public enum subscribeToTradeSSE {
        public static let id: Swift.String = "subscribeToTradeSSE"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/events/trades/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/trades/GET/query/since`.
                public var since: Foundation.Date?
                /// Format: YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v1/events/trades/GET/query/until`.
                public var until: Foundation.Date?
                /// - Remark: Generated from `#/paths/v1/events/trades/GET/query/since_id`.
                public var since_id: Swift.Int?
                /// - Remark: Generated from `#/paths/v1/events/trades/GET/query/until_id`.
                public var until_id: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Format: YYYY-MM-DD
                ///   - until: Format: YYYY-MM-DD
                ///   - since_id:
                ///   - until_id:
                public init(
                    since: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    since_id: Swift.Int? = nil,
                    until_id: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.since_id = since_id
                    self.until_id = until_id
                }
            }
            public var query: Operations.subscribeToTradeSSE.Input.Query
            /// - Remark: Generated from `#/paths/v1/events/trades/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subscribeToTradeSSE.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.subscribeToTradeSSE.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.subscribeToTradeSSE.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.subscribeToTradeSSE.Input.Query = .init(),
                headers: Operations.subscribeToTradeSSE.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/events/trades/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/events/trades/GET/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.subscribeToTradeSSE.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.subscribeToTradeSSE.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Connected. Events will now start streaming as long as you keep the connection open.
            ///
            /// - Remark: Generated from `#/paths//v1/events/trades/get(subscribeToTradeSSE)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.subscribeToTradeSSE.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.subscribeToTradeSSE.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case text_event_hyphen_stream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .text_event_hyphen_stream
                ]
            }
        }
    }
    /// Return a list of requested journals.
    ///
    /// Returns an array of journal objects.
    ///
    /// - Remark: HTTP `GET /v1/journals`.
    /// - Remark: Generated from `#/paths//v1/journals/get(getAllJournals)`.
    public enum getAllJournals {
        public static let id: Swift.String = "getAllJournals"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/journals/GET/query`.
            public struct Query: Sendable, Hashable {
                /// By journal creation date. Format: 2020-01-01
                ///
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/after`.
                public var after: Swift.String?
                /// By journal creation date. Format: 2020-01-01
                ///
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/before`.
                public var before: Swift.String?
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case pending = "pending"
                    case canceled = "canceled"
                    case executed = "executed"
                    case queued = "queued"
                    case rejected = "rejected"
                    case deleted = "deleted"
                }
                /// See the JournalStatus model for more info
                ///
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/status`.
                public var status: Operations.getAllJournals.Input.Query.statusPayload?
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/entry_type`.
                @frozen public enum entry_typePayload: String, Codable, Hashable, Sendable {
                    case JNLC = "JNLC"
                    case JNLS = "JNLS"
                }
                /// JNLC or JNLS
                ///
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/entry_type`.
                public var entry_type: Operations.getAllJournals.Input.Query.entry_typePayload?
                /// The account id that received the journal
                ///
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/to_account`.
                public var to_account: Swift.String?
                /// The account id that initiated the journal
                ///
                /// - Remark: Generated from `#/paths/v1/journals/GET/query/from_account`.
                public var from_account: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: By journal creation date. Format: 2020-01-01
                ///   - before: By journal creation date. Format: 2020-01-01
                ///   - status: See the JournalStatus model for more info
                ///   - entry_type: JNLC or JNLS
                ///   - to_account: The account id that received the journal
                ///   - from_account: The account id that initiated the journal
                public init(
                    after: Swift.String? = nil,
                    before: Swift.String? = nil,
                    status: Operations.getAllJournals.Input.Query.statusPayload? = nil,
                    entry_type: Operations.getAllJournals.Input.Query.entry_typePayload? = nil,
                    to_account: Swift.String? = nil,
                    from_account: Swift.String? = nil
                ) {
                    self.after = after
                    self.before = before
                    self.status = status
                    self.entry_type = entry_type
                    self.to_account = to_account
                    self.from_account = from_account
                }
            }
            public var query: Operations.getAllJournals.Input.Query
            /// - Remark: Generated from `#/paths/v1/journals/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllJournals.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllJournals.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAllJournals.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAllJournals.Input.Query = .init(),
                headers: Operations.getAllJournals.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/journals/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Journal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Journal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllJournals.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllJournals.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/journals/get(getAllJournals)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllJournals.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllJournals.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a Journal.
    ///
    /// A journal can be JNLC (move cash) or JNLS (move shares), dictated by `entry_type`. Generally, journal requests are subject to approval and starts from the `pending` status. The status changes are propagated through the Event API. Under certain conditions agreed for the partner, such journal transactions that meet the criteria are executed right away.
    ///
    ///
    /// - Remark: HTTP `POST /v1/journals`.
    /// - Remark: Generated from `#/paths//v1/journals/post(createJournal)`.
    public enum createJournal {
        public static let id: Swift.String = "createJournal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/journals/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createJournal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createJournal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createJournal.Input.Headers
            /// - Remark: Generated from `#/paths/v1/journals/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateJournalRequest)
            }
            public var body: Operations.createJournal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createJournal.Input.Headers = .init(),
                body: Operations.createJournal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/journals/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Journal)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Journal {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createJournal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createJournal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The New Journal object
            ///
            /// - Remark: Generated from `#/paths//v1/journals/post(createJournal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createJournal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createJournal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/journals/POST/responses/400/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createJournal.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createJournal.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// One of the parameters is invalid.
            ///
            /// - Remark: Generated from `#/paths//v1/journals/post(createJournal)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createJournal.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createJournal.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/journals/POST/responses/403/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createJournal.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createJournal.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// The amount requested to move is not available.
            ///
            /// - Remark: Generated from `#/paths//v1/journals/post(createJournal)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createJournal.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createJournal.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/journals/POST/responses/404/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createJournal.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createJournal.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// One of the account is not found.
            ///
            /// - Remark: Generated from `#/paths//v1/journals/post(createJournal)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.createJournal.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.createJournal.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel a pending journal.
    ///
    /// You can only delete a journal if the journal is still in a pending state, if a journal is executed you will not be able to delete. The alternative is to create a mirror journal entry to reverse the flow of funds.
    ///
    /// - Remark: HTTP `DELETE /v1/journals/{journal_id}`.
    /// - Remark: Generated from `#/paths//v1/journals/{journal_id}/delete(deleteJournalById)`.
    public enum deleteJournalById {
        public static let id: Swift.String = "deleteJournalById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/journals/{journal_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/{journal_id}/DELETE/path/journal_id`.
                public var journal_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - journal_id:
                public init(journal_id: Swift.String) {
                    self.journal_id = journal_id
                }
            }
            public var path: Operations.deleteJournalById.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.deleteJournalById.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// The cancel request succeeded. (No-content)
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/journals/{journal_id}/delete(deleteJournalById)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteJournalById.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteJournalById.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// The journal is not found.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/journals/{journal_id}/delete(deleteJournalById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteJournalById.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.deleteJournalById.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// The journal is not in the pending status.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/journals/{journal_id}/delete(deleteJournalById)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.deleteJournalById.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.deleteJournalById.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a Batch Journal Transaction (One-to-Many)
    ///
    /// You can create a batch of journal requests by using this endpoint. This is enabled on JNLC type Journals for now only.
    ///
    /// Every single request must be valid for the entire batch operation to succeed.
    ///
    /// In the case of a successful request, the response will contain an array of journal objects with an extra attribute error_message in the case when a specific account fails to receive a journal.
    ///
    /// - Remark: HTTP `POST /v1/journals/batch`.
    /// - Remark: Generated from `#/paths//v1/journals/batch/post(createBatchJournal)`.
    public enum createBatchJournal {
        public static let id: Swift.String = "createBatchJournal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/journals/batch/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createBatchJournal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createBatchJournal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createBatchJournal.Input.Headers
            /// - Remark: Generated from `#/paths/v1/journals/batch/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/batch/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchJournalRequest)
            }
            public var body: Operations.createBatchJournal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createBatchJournal.Input.Headers = .init(),
                body: Operations.createBatchJournal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/journals/batch/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/journals/batch/POST/responses/200/content/application\/json`.
                    case json([Components.Schemas.BatchJournalResponse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.BatchJournalResponse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createBatchJournal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createBatchJournal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// an array of journal objects with an extra attribute error_message in the case when a specific account fails to receive a journal.
            ///
            /// - Remark: Generated from `#/paths//v1/journals/batch/post(createBatchJournal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createBatchJournal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createBatchJournal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an OAuth client
    ///
    /// The endpoint returns the details of OAuth client to display in the authorization page.
    ///
    ///
    /// - Remark: HTTP `GET /v1/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//v1/oauth/clients/{client_id}/get(getOAuthClient)`.
    public enum getOAuthClient {
        public static let id: Swift.String = "getOAuthClient"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/path/client_id`.
                public var client_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - client_id:
                public init(client_id: Swift.String) {
                    self.client_id = client_id
                }
            }
            public var path: Operations.getOAuthClient.Input.Path
            /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/query/response_type`.
                @frozen public enum response_typePayload: String, Codable, Hashable, Sendable {
                    case code = "code"
                    case token = "token"
                }
                /// code or token
                ///
                /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/query/response_type`.
                public var response_type: Operations.getOAuthClient.Input.Query.response_typePayload?
                /// Redirect URI of the OAuth flow
                ///
                /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/query/redirect_uri`.
                public var redirect_uri: Swift.String?
                /// Requested scopes by the OAuth flow
                ///
                /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/query/scope`.
                public var scope: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - response_type: code or token
                ///   - redirect_uri: Redirect URI of the OAuth flow
                ///   - scope: Requested scopes by the OAuth flow
                public init(
                    response_type: Operations.getOAuthClient.Input.Query.response_typePayload? = nil,
                    redirect_uri: Swift.String? = nil,
                    scope: Swift.String? = nil
                ) {
                    self.response_type = response_type
                    self.redirect_uri = redirect_uri
                    self.scope = scope
                }
            }
            public var query: Operations.getOAuthClient.Input.Query
            /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOAuthClient.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOAuthClient.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getOAuthClient.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getOAuthClient.Input.Path,
                query: Operations.getOAuthClient.Input.Query = .init(),
                headers: Operations.getOAuthClient.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OathClientResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OathClientResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getOAuthClient.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getOAuthClient.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success.
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/clients/{client_id}/get(getOAuthClient)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getOAuthClient.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getOAuthClient.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/clients/{client_id}/GET/responses/401/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getOAuthClient.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getOAuthClient.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Client does not exist or you do not have access to the client.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/clients/{client_id}/get(getOAuthClient)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getOAuthClient.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getOAuthClient.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Issue an OAuth token.
    ///
    /// The operation issues an OAuth code which can be used in the OAuth code flow.
    ///
    ///
    /// - Remark: HTTP `POST /v1/oauth/token`.
    /// - Remark: Generated from `#/paths//v1/oauth/token/post(issueOAuthToken)`.
    public enum issueOAuthToken {
        public static let id: Swift.String = "issueOAuthToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/oauth/token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issueOAuthToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issueOAuthToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issueOAuthToken.Input.Headers
            /// - Remark: Generated from `#/paths/v1/oauth/token/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/token/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.OAuthTokenRequest)
            }
            public var body: Operations.issueOAuthToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.issueOAuthToken.Input.Headers = .init(),
                body: Operations.issueOAuthToken.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/token/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/token/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.IssueOAuthTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.IssueOAuthTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issueOAuthToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issueOAuthToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Success.
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/token/post(issueOAuthToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issueOAuthToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issueOAuthToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/token/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/token/POST/responses/401/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issueOAuthToken.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issueOAuthToken.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Client does not exists, you do not have access to the client, or “client_secret” is incorrect.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/token/post(issueOAuthToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.issueOAuthToken.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.issueOAuthToken.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/token/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/token/POST/responses/422/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issueOAuthToken.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issueOAuthToken.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Redirect URI or scope is invalid.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/token/post(issueOAuthToken)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.issueOAuthToken.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.issueOAuthToken.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Authorize an OAuth Token
    ///
    /// The operation issues an OAuth code which can be used in the OAuth code flow.
    ///
    ///
    /// - Remark: HTTP `POST /v1/oauth/authorize`.
    /// - Remark: Generated from `#/paths//v1/oauth/authorize/post(authorizeOAuthToken)`.
    public enum authorizeOAuthToken {
        public static let id: Swift.String = "authorizeOAuthToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.authorizeOAuthToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.authorizeOAuthToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.authorizeOAuthToken.Input.Headers
            /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.OAuthTokenRequest)
            }
            public var body: Operations.authorizeOAuthToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.authorizeOAuthToken.Input.Headers = .init(),
                body: Operations.authorizeOAuthToken.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AuthorizeOAuthTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AuthorizeOAuthTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.authorizeOAuthToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.authorizeOAuthToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successfully issued a code.
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/authorize/post(authorizeOAuthToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.authorizeOAuthToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.authorizeOAuthToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/responses/401/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.authorizeOAuthToken.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.authorizeOAuthToken.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Client does not exists, you do not have access to the client, or “client_secret” is incorrect.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/authorize/post(authorizeOAuthToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.authorizeOAuthToken.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.authorizeOAuthToken.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/oauth/authorize/POST/responses/422/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.authorizeOAuthToken.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.authorizeOAuthToken.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Redirect URI or scope is invalid.
            ///
            ///
            /// - Remark: Generated from `#/paths//v1/oauth/authorize/post(authorizeOAuthToken)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.authorizeOAuthToken.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.authorizeOAuthToken.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve all watchlists
    ///
    /// Fetch a list of all watchlists currently in an account.
    ///
    /// - Remark: HTTP `GET /v1/trading/accounts/{account_id}/watchlists`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/get(getAllWatchlistsForAccount)`.
    public enum getAllWatchlistsForAccount {
        public static let id: Swift.String = "getAllWatchlistsForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Unique identifier of an account.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/GET/path/account_id`.
                public var account_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Unique identifier of an account.
                public init(account_id: Swift.String) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.getAllWatchlistsForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllWatchlistsForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllWatchlistsForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAllWatchlistsForAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAllWatchlistsForAccount.Input.Path,
                headers: Operations.getAllWatchlistsForAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Watchlist])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Watchlist] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllWatchlistsForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllWatchlistsForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/get(getAllWatchlistsForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllWatchlistsForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllWatchlistsForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a new watchlist
    ///
    /// Returns the watchlist object
    ///
    /// - Remark: HTTP `POST /v1/trading/accounts/{account_id}/watchlists`.
    /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/post(createWatchlistForAccount)`.
    public enum createWatchlistForAccount {
        public static let id: Swift.String = "createWatchlistForAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Unique identifier of an account.
                ///
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/POST/path/account_id`.
                public var account_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Unique identifier of an account.
                public init(account_id: Swift.String) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.createWatchlistForAccount.Input.Path
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createWatchlistForAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createWatchlistForAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createWatchlistForAccount.Input.Headers
            /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateWatchlistRequest)
            }
            public var body: Operations.createWatchlistForAccount.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createWatchlistForAccount.Input.Path,
                headers: Operations.createWatchlistForAccount.Input.Headers = .init(),
                body: Operations.createWatchlistForAccount.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/trading/accounts/{account_id}/watchlists/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createWatchlistForAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createWatchlistForAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Newly created watchlist
            ///
            /// - Remark: Generated from `#/paths//v1/trading/accounts/{account_id}/watchlists/post(createWatchlistForAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createWatchlistForAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createWatchlistForAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Manage watchlists
    ///
    /// Fetch a single watchlist by identifier.
    ///
    /// - Remark: HTTP `GET /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/get(getWatchlistForAccountById)`.
    public enum getWatchlistForAccountById {
        public static let id: Swift.String = "getWatchlistForAccountById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Unique identifier of an account
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/GET/path/account_id`.
                public var account_id: Swift.String
                /// Unique identifier of a watchlist
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/GET/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Unique identifier of an account
                ///   - watchlist_id: Unique identifier of a watchlist
                public init(
                    account_id: Swift.String,
                    watchlist_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.watchlist_id = watchlist_id
                }
            }
            public var path: Operations.getWatchlistForAccountById.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlistForAccountById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlistForAccountById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getWatchlistForAccountById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getWatchlistForAccountById.Input.Path,
                headers: Operations.getWatchlistForAccountById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getWatchlistForAccountById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getWatchlistForAccountById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/get(getWatchlistForAccountById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getWatchlistForAccountById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getWatchlistForAccountById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing watchlist
    ///
    /// Replace entirely the set of securities contained in the watchlist while optionally renaming it. Destructive operation.
    ///
    /// - Remark: HTTP `PUT /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/put(replaceWatchlistForAccountById)`.
    public enum replaceWatchlistForAccountById {
        public static let id: Swift.String = "replaceWatchlistForAccountById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// Unique identifier of an account
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/path/account_id`.
                public var account_id: Swift.String
                /// Unique identifier of a watchlist
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Unique identifier of an account
                ///   - watchlist_id: Unique identifier of a watchlist
                public init(
                    account_id: Swift.String,
                    watchlist_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.watchlist_id = watchlist_id
                }
            }
            public var path: Operations.replaceWatchlistForAccountById.Input.Path
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.replaceWatchlistForAccountById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.replaceWatchlistForAccountById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.replaceWatchlistForAccountById.Input.Headers
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateWatchlistRequest)
            }
            public var body: Operations.replaceWatchlistForAccountById.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.replaceWatchlistForAccountById.Input.Path,
                headers: Operations.replaceWatchlistForAccountById.Input.Headers = .init(),
                body: Operations.replaceWatchlistForAccountById.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.replaceWatchlistForAccountById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.replaceWatchlistForAccountById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Updated watchlist.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/put(replaceWatchlistForAccountById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.replaceWatchlistForAccountById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.replaceWatchlistForAccountById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a watchlist
    ///
    /// Irrevocably delete a watchlist.
    ///
    /// - Remark: HTTP `DELETE /v1/accounts/{account_id}/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/delete(deleteWatchlistFromAccountById)`.
    public enum deleteWatchlistFromAccountById {
        public static let id: Swift.String = "deleteWatchlistFromAccountById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Unique identifier of an account
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/DELETE/path/account_id`.
                public var account_id: Swift.String
                /// Unique identifier of a watchlist
                ///
                /// - Remark: Generated from `#/paths/v1/accounts/{account_id}/watchlists/{watchlist_id}/DELETE/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: Unique identifier of an account
                ///   - watchlist_id: Unique identifier of a watchlist
                public init(
                    account_id: Swift.String,
                    watchlist_id: Swift.String
                ) {
                    self.account_id = account_id
                    self.watchlist_id = watchlist_id
                }
            }
            public var path: Operations.deleteWatchlistFromAccountById.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.deleteWatchlistFromAccountById.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Watchlist deleted.
            ///
            /// - Remark: Generated from `#/paths//v1/accounts/{account_id}/watchlists/{watchlist_id}/delete(deleteWatchlistFromAccountById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteWatchlistFromAccountById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteWatchlistFromAccountById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieving Announcements
    ///
    /// This enables searching for an array of corporate action announcements based on criteria.
    ///
    /// - Remark: HTTP `GET /v1/corporate_actions/announcements`.
    /// - Remark: Generated from `#/paths//v1/corporate_actions/announcements/get(getCorporateAnnouncements)`.
    public enum getCorporateAnnouncements {
        public static let id: Swift.String = "getCorporateAnnouncements"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A comma-delimited list of CorporateActionType values
                ///
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query/ca_types`.
                public var ca_types: Swift.String
                /// The start (inclusive) of the date range when searching corporate action announcements. This should follow the YYYY-MM-DD format. The date range is limited to 90 days.
                ///
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query/since`.
                public var since: Swift.String
                /// The end (inclusive) of the date range when searching corporate action announcements. This should follow the YYYY-MM-DD format. The date range is limited to 90 days.
                ///
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query/until`.
                public var until: Swift.String
                /// The symbol of the company initiating the announcement.
                ///
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query/symbol`.
                public var symbol: Swift.String?
                /// The CUSIP of the company initiating the announcement.
                ///
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query/cusip`.
                public var cusip: Swift.String?
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query/date_type`.
                @frozen public enum date_typePayload: String, Codable, Hashable, Sendable {
                    case declaration_date = "declaration_date"
                    case ex_date = "ex_date"
                    case record_date = "record_date"
                    case payable_date = "payable_date"
                }
                /// An emum of possible ways to use the `since` and `until` parameters to search by.
                ///
                /// the types are:
                ///
                /// - **declaration_date**: The date of the preliminary announcement details or the date that any subsequent term updates took place.
                /// - **ex_date**: The date on which any security purchasing activity will not result in a corporate action entitlement. Any selling activity that takes place on or after this date will result in a corporate action entitlement.
                /// - **record_date**: The date the company checks its records to determine who is shareholder in order to allocate entitlements.
                /// - **payable_date**: The date that the stock and cash positions will update according to the account positions as of the record date.
                ///
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/query/date_type`.
                public var date_type: Operations.getCorporateAnnouncements.Input.Query.date_typePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ca_types: A comma-delimited list of CorporateActionType values
                ///   - since: The start (inclusive) of the date range when searching corporate action announcements. This should follow the YYYY-MM-DD format. The date range is limited to 90 days.
                ///   - until: The end (inclusive) of the date range when searching corporate action announcements. This should follow the YYYY-MM-DD format. The date range is limited to 90 days.
                ///   - symbol: The symbol of the company initiating the announcement.
                ///   - cusip: The CUSIP of the company initiating the announcement.
                ///   - date_type: An emum of possible ways to use the `since` and `until` parameters to search by.
                public init(
                    ca_types: Swift.String,
                    since: Swift.String,
                    until: Swift.String,
                    symbol: Swift.String? = nil,
                    cusip: Swift.String? = nil,
                    date_type: Operations.getCorporateAnnouncements.Input.Query.date_typePayload? = nil
                ) {
                    self.ca_types = ca_types
                    self.since = since
                    self.until = until
                    self.symbol = symbol
                    self.cusip = cusip
                    self.date_type = date_type
                }
            }
            public var query: Operations.getCorporateAnnouncements.Input.Query
            /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCorporateAnnouncements.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCorporateAnnouncements.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getCorporateAnnouncements.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getCorporateAnnouncements.Input.Query,
                headers: Operations.getCorporateAnnouncements.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/corporate_actions/announcements/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Announcement])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Announcement] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getCorporateAnnouncements.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getCorporateAnnouncements.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v1/corporate_actions/announcements/get(getCorporateAnnouncements)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCorporateAnnouncements.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getCorporateAnnouncements.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Malformed input.
            ///
            /// - Remark: Generated from `#/paths//v1/corporate_actions/announcements/get(getCorporateAnnouncements)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
