// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get account
    ///
    /// Returns the account associated with the API key.
    ///
    /// - Remark: HTTP `GET /v2/account`.
    /// - Remark: Generated from `#/paths//v2/account/get(getAccount)`.
    func getAccount(_ input: Operations.getAccount.Input) async throws -> Operations.getAccount.Output
    /// All Orders
    ///
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// - Remark: HTTP `GET /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/get(getAllOrders)`.
    func getAllOrders(_ input: Operations.getAllOrders.Input) async throws -> Operations.getAllOrders.Output
    /// Order
    ///
    /// Places a new order for the given account. An order request may be rejected if the account is not authorized for trading, or if the tradable balance is insufficient to fill the order..
    ///
    /// - Remark: HTTP `POST /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/post(postOrder)`.
    func postOrder(_ input: Operations.postOrder.Input) async throws -> Operations.postOrder.Output
    /// All Orders
    ///
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/delete(deleteAllOrders)`.
    func deleteAllOrders(_ input: Operations.deleteAllOrders.Input) async throws -> Operations.deleteAllOrders.Output
    /// Order by Order ID
    ///
    /// Retrieves a single order for the given order_id.
    ///
    /// - Remark: HTTP `GET /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/get(getOrderByOrderID)`.
    func getOrderByOrderID(_ input: Operations.getOrderByOrderID.Input) async throws -> Operations.getOrderByOrderID.Output
    /// Order
    ///
    /// Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.
    ///
    /// A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel.
    ///
    /// While an order is being replaced, buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.
    ///
    ///
    /// - Remark: HTTP `PATCH /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/patch(patchOrderByOrderId)`.
    func patchOrderByOrderId(_ input: Operations.patchOrderByOrderId.Input) async throws -> Operations.patchOrderByOrderId.Output
    /// Order by Order ID
    ///
    /// Attempts to cancel an Open Order. If the order is no longer cancelable, the request will be rejected with status 422; otherwise accepted with return status 204.
    ///
    /// - Remark: HTTP `DELETE /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/delete(deleteOrderByOrderID)`.
    func deleteOrderByOrderID(_ input: Operations.deleteOrderByOrderID.Input) async throws -> Operations.deleteOrderByOrderID.Output
    /// All Open Positions
    ///
    /// The positions API provides information about an account’s current open positions. The response will include information such as cost basis, shares traded, and market value, which will be updated live as price information is updated. Once a position is closed, it will no longer be queryable through this API
    ///
    /// Retrieves a list of the account’s open positions
    ///
    /// - Remark: HTTP `GET /v2/positions`.
    /// - Remark: Generated from `#/paths//v2/positions/get(getAllOpenPositions)`.
    func getAllOpenPositions(_ input: Operations.getAllOpenPositions.Input) async throws -> Operations.getAllOpenPositions.Output
    /// All Positions
    ///
    /// Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v2/positions`.
    /// - Remark: Generated from `#/paths//v2/positions/delete(deleteAllOpenPositions)`.
    func deleteAllOpenPositions(_ input: Operations.deleteAllOpenPositions.Input) async throws -> Operations.deleteAllOpenPositions.Output
    /// Open Position
    ///
    /// Retrieves the account’s open position for the given symbol or assetId.
    ///
    /// - Remark: HTTP `GET /v2/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/get(getOpenPosition)`.
    func getOpenPosition(_ input: Operations.getOpenPosition.Input) async throws -> Operations.getOpenPosition.Output
    /// Position
    ///
    /// Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.
    ///
    /// - Remark: HTTP `DELETE /v2/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/delete(deleteOpenPosition)`.
    func deleteOpenPosition(_ input: Operations.deleteOpenPosition.Input) async throws -> Operations.deleteOpenPosition.Output
    /// Account Portfolio History
    ///
    /// Returns timeseries data about equity and profit/loss (P/L) of the account in requested timespan.
    ///
    /// - Remark: HTTP `GET /v2/account/portfolio/history`.
    /// - Remark: Generated from `#/paths//v2/account/portfolio/history/get(getAccountPortfolioHistory)`.
    func getAccountPortfolioHistory(_ input: Operations.getAccountPortfolioHistory.Input) async throws -> Operations.getAccountPortfolioHistory.Output
    /// Watchlists
    ///
    /// Returns the list of watchlists registered under the account.
    ///
    /// - Remark: HTTP `GET /v2/watchlists`.
    /// - Remark: Generated from `#/paths//v2/watchlists/get(getWatchlists)`.
    func getWatchlists(_ input: Operations.getWatchlists.Input) async throws -> Operations.getWatchlists.Output
    /// Watchlist
    ///
    /// Create a new watchlist with initial set of assets.
    ///
    /// - Remark: HTTP `POST /v2/watchlists`.
    /// - Remark: Generated from `#/paths//v2/watchlists/post(postWatchlist)`.
    func postWatchlist(_ input: Operations.postWatchlist.Input) async throws -> Operations.postWatchlist.Output
    /// Get Watchlist by ID
    ///
    /// Returns a watchlist identified by the ID.
    ///
    /// - Remark: HTTP `GET /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/get(getWatchlistById)`.
    func getWatchlistById(_ input: Operations.getWatchlistById.Input) async throws -> Operations.getWatchlistById.Output
    /// Add Asset to Watchlist
    ///
    /// Append an asset for the symbol to the end of watchlist asset list
    ///
    /// - Remark: HTTP `POST /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/post(addAssetToWatchlist)`.
    func addAssetToWatchlist(_ input: Operations.addAssetToWatchlist.Input) async throws -> Operations.addAssetToWatchlist.Output
    /// Update Watchlist By Id
    ///
    /// Update the name and/or content of watchlist
    ///
    /// - Remark: HTTP `PUT /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/put(updateWatchlistById)`.
    func updateWatchlistById(_ input: Operations.updateWatchlistById.Input) async throws -> Operations.updateWatchlistById.Output
    /// Delete Watchlist By Id
    ///
    /// Delete a watchlist. This is a permanent deletion.
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/delete(deleteWatchlistById)`.
    func deleteWatchlistById(_ input: Operations.deleteWatchlistById.Input) async throws -> Operations.deleteWatchlistById.Output
    /// Get Watchlist by Name
    ///
    /// Returns a watchlist by name
    ///
    /// - Remark: HTTP `GET /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/get(getWatchlistByName)`.
    func getWatchlistByName(_ input: Operations.getWatchlistByName.Input) async throws -> Operations.getWatchlistByName.Output
    /// Add Asset to Watchlist By Name
    ///
    /// Append an asset for the symbol to the end of watchlist asset list
    ///
    /// - Remark: HTTP `POST /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/post(addAssetToWatchlistByName)`.
    func addAssetToWatchlistByName(_ input: Operations.addAssetToWatchlistByName.Input) async throws -> Operations.addAssetToWatchlistByName.Output
    /// Update Watchlist By Name
    ///
    /// Update the name and/or content of watchlist
    ///
    /// - Remark: HTTP `PUT /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/put(updateWatchlistByName)`.
    func updateWatchlistByName(_ input: Operations.updateWatchlistByName.Input) async throws -> Operations.updateWatchlistByName.Output
    /// Delete Watchlist By Name
    ///
    /// Delete a watchlist. This is a permanent deletion.
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/delete(deleteWatchlistByName)`.
    func deleteWatchlistByName(_ input: Operations.deleteWatchlistByName.Input) async throws -> Operations.deleteWatchlistByName.Output
    /// Symbol from Watchlist
    ///
    /// Delete one entry for an asset by symbol name
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists/{watchlist_id}/{symbol}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/{symbol}/delete(removeAssetFromWatchlist)`.
    func removeAssetFromWatchlist(_ input: Operations.removeAssetFromWatchlist.Input) async throws -> Operations.removeAssetFromWatchlist.Output
    /// Account Configurations
    ///
    /// gets the current account configuration values
    ///
    /// - Remark: HTTP `GET /v2/account/configurations`.
    /// - Remark: Generated from `#/paths//v2/account/configurations/get(getAccountConfig)`.
    func getAccountConfig(_ input: Operations.getAccountConfig.Input) async throws -> Operations.getAccountConfig.Output
    /// Account Configurations
    ///
    /// Updates and returns the current account configuration values
    ///
    /// - Remark: HTTP `PATCH /v2/account/configurations`.
    /// - Remark: Generated from `#/paths//v2/account/configurations/patch(patchAccountConfig)`.
    func patchAccountConfig(_ input: Operations.patchAccountConfig.Input) async throws -> Operations.patchAccountConfig.Output
    /// Get account activities of one type
    ///
    /// Returns account activity entries for many types of activities.
    ///
    /// - Remark: HTTP `GET /v2/account/activities`.
    /// - Remark: Generated from `#/paths//v2/account/activities/get(getAccountActivities)`.
    func getAccountActivities(_ input: Operations.getAccountActivities.Input) async throws -> Operations.getAccountActivities.Output
    /// Get account activities of one type
    ///
    /// Returns account activity entries for a specific type of activity.
    ///
    /// - Remark: HTTP `GET /v2/account/activities/{activity_type}`.
    /// - Remark: Generated from `#/paths//v2/account/activities/{activity_type}/get(getAccountActivitiesByActivityType)`.
    func getAccountActivitiesByActivityType(_ input: Operations.getAccountActivitiesByActivityType.Input) async throws -> Operations.getAccountActivitiesByActivityType.Output
    /// Get Market Calendar info
    ///
    /// Returns the market calendar.
    ///
    /// - Remark: HTTP `GET /v2/calendar`.
    /// - Remark: Generated from `#/paths//v2/calendar/get(getCalendar)`.
    func getCalendar(_ input: Operations.getCalendar.Input) async throws -> Operations.getCalendar.Output
    /// Get Market Clock info
    ///
    /// The clock API serves the current market timestamp, whether or not the market is currently open, as well as the times of the next market open and close.
    ///
    /// Returns the market clock.
    ///
    /// - Remark: HTTP `GET /v2/clock`.
    /// - Remark: Generated from `#/paths//v2/clock/get(getClock)`.
    func getClock(_ input: Operations.getClock.Input) async throws -> Operations.getClock.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get account
    ///
    /// Returns the account associated with the API key.
    ///
    /// - Remark: HTTP `GET /v2/account`.
    /// - Remark: Generated from `#/paths//v2/account/get(getAccount)`.
    public func getAccount(headers: Operations.getAccount.Input.Headers = .init()) async throws -> Operations.getAccount.Output {
        try await getAccount(Operations.getAccount.Input(headers: headers))
    }
    /// All Orders
    ///
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// - Remark: HTTP `GET /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/get(getAllOrders)`.
    public func getAllOrders(
        query: Operations.getAllOrders.Input.Query = .init(),
        headers: Operations.getAllOrders.Input.Headers = .init()
    ) async throws -> Operations.getAllOrders.Output {
        try await getAllOrders(Operations.getAllOrders.Input(
            query: query,
            headers: headers
        ))
    }
    /// Order
    ///
    /// Places a new order for the given account. An order request may be rejected if the account is not authorized for trading, or if the tradable balance is insufficient to fill the order..
    ///
    /// - Remark: HTTP `POST /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/post(postOrder)`.
    public func postOrder(
        headers: Operations.postOrder.Input.Headers = .init(),
        body: Operations.postOrder.Input.Body
    ) async throws -> Operations.postOrder.Output {
        try await postOrder(Operations.postOrder.Input(
            headers: headers,
            body: body
        ))
    }
    /// All Orders
    ///
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/delete(deleteAllOrders)`.
    public func deleteAllOrders(headers: Operations.deleteAllOrders.Input.Headers = .init()) async throws -> Operations.deleteAllOrders.Output {
        try await deleteAllOrders(Operations.deleteAllOrders.Input(headers: headers))
    }
    /// Order by Order ID
    ///
    /// Retrieves a single order for the given order_id.
    ///
    /// - Remark: HTTP `GET /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/get(getOrderByOrderID)`.
    public func getOrderByOrderID(
        path: Operations.getOrderByOrderID.Input.Path,
        query: Operations.getOrderByOrderID.Input.Query = .init(),
        headers: Operations.getOrderByOrderID.Input.Headers = .init()
    ) async throws -> Operations.getOrderByOrderID.Output {
        try await getOrderByOrderID(Operations.getOrderByOrderID.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Order
    ///
    /// Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.
    ///
    /// A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel.
    ///
    /// While an order is being replaced, buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.
    ///
    ///
    /// - Remark: HTTP `PATCH /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/patch(patchOrderByOrderId)`.
    public func patchOrderByOrderId(
        path: Operations.patchOrderByOrderId.Input.Path,
        headers: Operations.patchOrderByOrderId.Input.Headers = .init(),
        body: Operations.patchOrderByOrderId.Input.Body
    ) async throws -> Operations.patchOrderByOrderId.Output {
        try await patchOrderByOrderId(Operations.patchOrderByOrderId.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Order by Order ID
    ///
    /// Attempts to cancel an Open Order. If the order is no longer cancelable, the request will be rejected with status 422; otherwise accepted with return status 204.
    ///
    /// - Remark: HTTP `DELETE /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/delete(deleteOrderByOrderID)`.
    public func deleteOrderByOrderID(path: Operations.deleteOrderByOrderID.Input.Path) async throws -> Operations.deleteOrderByOrderID.Output {
        try await deleteOrderByOrderID(Operations.deleteOrderByOrderID.Input(path: path))
    }
    /// All Open Positions
    ///
    /// The positions API provides information about an account’s current open positions. The response will include information such as cost basis, shares traded, and market value, which will be updated live as price information is updated. Once a position is closed, it will no longer be queryable through this API
    ///
    /// Retrieves a list of the account’s open positions
    ///
    /// - Remark: HTTP `GET /v2/positions`.
    /// - Remark: Generated from `#/paths//v2/positions/get(getAllOpenPositions)`.
    public func getAllOpenPositions(headers: Operations.getAllOpenPositions.Input.Headers = .init()) async throws -> Operations.getAllOpenPositions.Output {
        try await getAllOpenPositions(Operations.getAllOpenPositions.Input(headers: headers))
    }
    /// All Positions
    ///
    /// Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v2/positions`.
    /// - Remark: Generated from `#/paths//v2/positions/delete(deleteAllOpenPositions)`.
    public func deleteAllOpenPositions(
        query: Operations.deleteAllOpenPositions.Input.Query = .init(),
        headers: Operations.deleteAllOpenPositions.Input.Headers = .init()
    ) async throws -> Operations.deleteAllOpenPositions.Output {
        try await deleteAllOpenPositions(Operations.deleteAllOpenPositions.Input(
            query: query,
            headers: headers
        ))
    }
    /// Open Position
    ///
    /// Retrieves the account’s open position for the given symbol or assetId.
    ///
    /// - Remark: HTTP `GET /v2/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/get(getOpenPosition)`.
    public func getOpenPosition(
        path: Operations.getOpenPosition.Input.Path,
        headers: Operations.getOpenPosition.Input.Headers = .init()
    ) async throws -> Operations.getOpenPosition.Output {
        try await getOpenPosition(Operations.getOpenPosition.Input(
            path: path,
            headers: headers
        ))
    }
    /// Position
    ///
    /// Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.
    ///
    /// - Remark: HTTP `DELETE /v2/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/delete(deleteOpenPosition)`.
    public func deleteOpenPosition(
        path: Operations.deleteOpenPosition.Input.Path,
        query: Operations.deleteOpenPosition.Input.Query = .init(),
        headers: Operations.deleteOpenPosition.Input.Headers = .init()
    ) async throws -> Operations.deleteOpenPosition.Output {
        try await deleteOpenPosition(Operations.deleteOpenPosition.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Account Portfolio History
    ///
    /// Returns timeseries data about equity and profit/loss (P/L) of the account in requested timespan.
    ///
    /// - Remark: HTTP `GET /v2/account/portfolio/history`.
    /// - Remark: Generated from `#/paths//v2/account/portfolio/history/get(getAccountPortfolioHistory)`.
    public func getAccountPortfolioHistory(
        query: Operations.getAccountPortfolioHistory.Input.Query = .init(),
        headers: Operations.getAccountPortfolioHistory.Input.Headers = .init()
    ) async throws -> Operations.getAccountPortfolioHistory.Output {
        try await getAccountPortfolioHistory(Operations.getAccountPortfolioHistory.Input(
            query: query,
            headers: headers
        ))
    }
    /// Watchlists
    ///
    /// Returns the list of watchlists registered under the account.
    ///
    /// - Remark: HTTP `GET /v2/watchlists`.
    /// - Remark: Generated from `#/paths//v2/watchlists/get(getWatchlists)`.
    public func getWatchlists(headers: Operations.getWatchlists.Input.Headers = .init()) async throws -> Operations.getWatchlists.Output {
        try await getWatchlists(Operations.getWatchlists.Input(headers: headers))
    }
    /// Watchlist
    ///
    /// Create a new watchlist with initial set of assets.
    ///
    /// - Remark: HTTP `POST /v2/watchlists`.
    /// - Remark: Generated from `#/paths//v2/watchlists/post(postWatchlist)`.
    public func postWatchlist(
        headers: Operations.postWatchlist.Input.Headers = .init(),
        body: Operations.postWatchlist.Input.Body
    ) async throws -> Operations.postWatchlist.Output {
        try await postWatchlist(Operations.postWatchlist.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get Watchlist by ID
    ///
    /// Returns a watchlist identified by the ID.
    ///
    /// - Remark: HTTP `GET /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/get(getWatchlistById)`.
    public func getWatchlistById(
        path: Operations.getWatchlistById.Input.Path,
        headers: Operations.getWatchlistById.Input.Headers = .init()
    ) async throws -> Operations.getWatchlistById.Output {
        try await getWatchlistById(Operations.getWatchlistById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add Asset to Watchlist
    ///
    /// Append an asset for the symbol to the end of watchlist asset list
    ///
    /// - Remark: HTTP `POST /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/post(addAssetToWatchlist)`.
    public func addAssetToWatchlist(
        path: Operations.addAssetToWatchlist.Input.Path,
        headers: Operations.addAssetToWatchlist.Input.Headers = .init(),
        body: Operations.addAssetToWatchlist.Input.Body? = nil
    ) async throws -> Operations.addAssetToWatchlist.Output {
        try await addAssetToWatchlist(Operations.addAssetToWatchlist.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Update Watchlist By Id
    ///
    /// Update the name and/or content of watchlist
    ///
    /// - Remark: HTTP `PUT /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/put(updateWatchlistById)`.
    public func updateWatchlistById(
        path: Operations.updateWatchlistById.Input.Path,
        headers: Operations.updateWatchlistById.Input.Headers = .init(),
        body: Operations.updateWatchlistById.Input.Body? = nil
    ) async throws -> Operations.updateWatchlistById.Output {
        try await updateWatchlistById(Operations.updateWatchlistById.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete Watchlist By Id
    ///
    /// Delete a watchlist. This is a permanent deletion.
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/delete(deleteWatchlistById)`.
    public func deleteWatchlistById(path: Operations.deleteWatchlistById.Input.Path) async throws -> Operations.deleteWatchlistById.Output {
        try await deleteWatchlistById(Operations.deleteWatchlistById.Input(path: path))
    }
    /// Get Watchlist by Name
    ///
    /// Returns a watchlist by name
    ///
    /// - Remark: HTTP `GET /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/get(getWatchlistByName)`.
    public func getWatchlistByName(
        query: Operations.getWatchlistByName.Input.Query,
        headers: Operations.getWatchlistByName.Input.Headers = .init()
    ) async throws -> Operations.getWatchlistByName.Output {
        try await getWatchlistByName(Operations.getWatchlistByName.Input(
            query: query,
            headers: headers
        ))
    }
    /// Add Asset to Watchlist By Name
    ///
    /// Append an asset for the symbol to the end of watchlist asset list
    ///
    /// - Remark: HTTP `POST /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/post(addAssetToWatchlistByName)`.
    public func addAssetToWatchlistByName(
        query: Operations.addAssetToWatchlistByName.Input.Query,
        headers: Operations.addAssetToWatchlistByName.Input.Headers = .init(),
        body: Operations.addAssetToWatchlistByName.Input.Body? = nil
    ) async throws -> Operations.addAssetToWatchlistByName.Output {
        try await addAssetToWatchlistByName(Operations.addAssetToWatchlistByName.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Update Watchlist By Name
    ///
    /// Update the name and/or content of watchlist
    ///
    /// - Remark: HTTP `PUT /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/put(updateWatchlistByName)`.
    public func updateWatchlistByName(
        query: Operations.updateWatchlistByName.Input.Query,
        headers: Operations.updateWatchlistByName.Input.Headers = .init(),
        body: Operations.updateWatchlistByName.Input.Body? = nil
    ) async throws -> Operations.updateWatchlistByName.Output {
        try await updateWatchlistByName(Operations.updateWatchlistByName.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Delete Watchlist By Name
    ///
    /// Delete a watchlist. This is a permanent deletion.
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/delete(deleteWatchlistByName)`.
    public func deleteWatchlistByName(query: Operations.deleteWatchlistByName.Input.Query) async throws -> Operations.deleteWatchlistByName.Output {
        try await deleteWatchlistByName(Operations.deleteWatchlistByName.Input(query: query))
    }
    /// Symbol from Watchlist
    ///
    /// Delete one entry for an asset by symbol name
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists/{watchlist_id}/{symbol}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/{symbol}/delete(removeAssetFromWatchlist)`.
    public func removeAssetFromWatchlist(
        path: Operations.removeAssetFromWatchlist.Input.Path,
        headers: Operations.removeAssetFromWatchlist.Input.Headers = .init()
    ) async throws -> Operations.removeAssetFromWatchlist.Output {
        try await removeAssetFromWatchlist(Operations.removeAssetFromWatchlist.Input(
            path: path,
            headers: headers
        ))
    }
    /// Account Configurations
    ///
    /// gets the current account configuration values
    ///
    /// - Remark: HTTP `GET /v2/account/configurations`.
    /// - Remark: Generated from `#/paths//v2/account/configurations/get(getAccountConfig)`.
    public func getAccountConfig(headers: Operations.getAccountConfig.Input.Headers = .init()) async throws -> Operations.getAccountConfig.Output {
        try await getAccountConfig(Operations.getAccountConfig.Input(headers: headers))
    }
    /// Account Configurations
    ///
    /// Updates and returns the current account configuration values
    ///
    /// - Remark: HTTP `PATCH /v2/account/configurations`.
    /// - Remark: Generated from `#/paths//v2/account/configurations/patch(patchAccountConfig)`.
    public func patchAccountConfig(
        headers: Operations.patchAccountConfig.Input.Headers = .init(),
        body: Operations.patchAccountConfig.Input.Body? = nil
    ) async throws -> Operations.patchAccountConfig.Output {
        try await patchAccountConfig(Operations.patchAccountConfig.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get account activities of one type
    ///
    /// Returns account activity entries for many types of activities.
    ///
    /// - Remark: HTTP `GET /v2/account/activities`.
    /// - Remark: Generated from `#/paths//v2/account/activities/get(getAccountActivities)`.
    public func getAccountActivities(
        query: Operations.getAccountActivities.Input.Query = .init(),
        headers: Operations.getAccountActivities.Input.Headers = .init()
    ) async throws -> Operations.getAccountActivities.Output {
        try await getAccountActivities(Operations.getAccountActivities.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get account activities of one type
    ///
    /// Returns account activity entries for a specific type of activity.
    ///
    /// - Remark: HTTP `GET /v2/account/activities/{activity_type}`.
    /// - Remark: Generated from `#/paths//v2/account/activities/{activity_type}/get(getAccountActivitiesByActivityType)`.
    public func getAccountActivitiesByActivityType(
        path: Operations.getAccountActivitiesByActivityType.Input.Path,
        query: Operations.getAccountActivitiesByActivityType.Input.Query = .init(),
        headers: Operations.getAccountActivitiesByActivityType.Input.Headers = .init()
    ) async throws -> Operations.getAccountActivitiesByActivityType.Output {
        try await getAccountActivitiesByActivityType(Operations.getAccountActivitiesByActivityType.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get Market Calendar info
    ///
    /// Returns the market calendar.
    ///
    /// - Remark: HTTP `GET /v2/calendar`.
    /// - Remark: Generated from `#/paths//v2/calendar/get(getCalendar)`.
    public func getCalendar(
        query: Operations.getCalendar.Input.Query = .init(),
        headers: Operations.getCalendar.Input.Headers = .init()
    ) async throws -> Operations.getCalendar.Output {
        try await getCalendar(Operations.getCalendar.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get Market Clock info
    ///
    /// The clock API serves the current market timestamp, whether or not the market is currently open, as well as the times of the next market open and close.
    ///
    /// Returns the market clock.
    ///
    /// - Remark: HTTP `GET /v2/clock`.
    /// - Remark: Generated from `#/paths//v2/clock/get(getClock)`.
    public func getClock(headers: Operations.getClock.Input.Headers = .init()) async throws -> Operations.getClock.Output {
        try await getClock(Operations.getClock.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Paper
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://paper-api.alpaca.markets",
            variables: []
        )
    }
    /// Live
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.alpaca.markets",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// The account API serves important information related to an account, including account status, funds available for trade, funds available for withdrawal, and various flags relevant to an account’s ability to trade. An account maybe be blocked for just for trades (trades_blocked flag) or for both trades and transfers (account_blocked flag) if Alpaca identifies the account to engaging in any suspicious activity. Also, in accordance with FINRA’s pattern day trading rule, an account may be flagged for pattern day trading (pattern_day_trader flag), which would inhibit an account from placing any further day-trades. Please note that cryptocurrencies are not eligible assets to be used as collateral for margin accounts and will require the asset be traded using cash only.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Account`.
        public struct Account: Codable, Hashable, Sendable {
            /// Account Id.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Account/id`.
            public var id: Swift.String
            /// Account number.
            ///
            /// - Remark: Generated from `#/components/schemas/Account/account_number`.
            public var account_number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/status`.
            public var status: Components.Schemas.AccountStatus
            /// USD
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Account/currency`.
            public var currency: Swift.String?
            /// Cash Balance
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Account/cash`.
            public var cash: Swift.String?
            /// Total value of cash + holding positions (This field is deprecated. It is equivalent to the equity field.)
            ///
            /// - Remark: Generated from `#/components/schemas/Account/portfolio_value`.
            public var portfolio_value: Swift.String?
            /// Whether or not the account has been flagged as a pattern day trader
            ///
            /// - Remark: Generated from `#/components/schemas/Account/pattern_day_trader`.
            public var pattern_day_trader: Swift.Bool?
            /// User setting. If true, the account is not allowed to place orders.
            ///
            /// - Remark: Generated from `#/components/schemas/Account/trade_suspended_by_user`.
            public var trade_suspended_by_user: Swift.Bool?
            /// If true, the account is not allowed to place orders.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Account/trading_blocked`.
            public var trading_blocked: Swift.Bool?
            /// If true, the account is not allowed to request money transfers.
            ///
            /// - Remark: Generated from `#/components/schemas/Account/transfers_blocked`.
            public var transfers_blocked: Swift.Bool?
            /// If true, the account activity by user is prohibited.
            ///
            /// - Remark: Generated from `#/components/schemas/Account/account_blocked`.
            public var account_blocked: Swift.Bool?
            /// Timestamp this account was created at
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Account/created_at`.
            public var created_at: Foundation.Date?
            /// Flag to denote whether or not the account is permitted to short
            ///
            /// - Remark: Generated from `#/components/schemas/Account/shorting_enabled`.
            public var shorting_enabled: Swift.Bool?
            /// Real-time MtM value of all long positions held in the account
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Account/long_market_value`.
            public var long_market_value: Swift.String?
            /// Real-time MtM value of all short positions held in the account
            ///
            /// - Remark: Generated from `#/components/schemas/Account/short_market_value`.
            public var short_market_value: Swift.String?
            /// Cash + long_market_value + short_market_value
            ///
            /// - Remark: Generated from `#/components/schemas/Account/equity`.
            public var equity: Swift.String?
            /// Equity as of previous trading day at 16:00:00 ET
            ///
            /// - Remark: Generated from `#/components/schemas/Account/last_equity`.
            public var last_equity: Swift.String?
            /// Buying power multiplier that represents account margin classification; valid values 1 (standard limited margin account with 1x buying power), 2 (reg T margin account with 2x intraday and overnight buying power; this is the default for all non-PDT accounts with $2,000 or more equity), 4 (PDT account with 4x intraday buying power and 2x reg T overnight buying power)
            ///
            /// - Remark: Generated from `#/components/schemas/Account/multiplier`.
            public var multiplier: Swift.String?
            /// Current available $ buying power; If multiplier = 4, this is your daytrade buying power which is calculated as (last_equity - (last) maintenance_margin) * 4; If multiplier = 2, buying_power = max(equity – initial_margin,0) * 2; If multiplier = 1, buying_power = cash
            ///
            /// - Remark: Generated from `#/components/schemas/Account/buying_power`.
            public var buying_power: Swift.String?
            /// Reg T initial margin requirement (continuously updated value)
            ///
            /// - Remark: Generated from `#/components/schemas/Account/initial_margin`.
            public var initial_margin: Swift.String?
            /// Maintenance margin requirement (continuously updated value)
            ///
            /// - Remark: Generated from `#/components/schemas/Account/maintenance_margin`.
            public var maintenance_margin: Swift.String?
            /// Value of special memorandum account (will be used at a later date to provide additional buying_power)
            ///
            /// - Remark: Generated from `#/components/schemas/Account/sma`.
            public var sma: Swift.String?
            /// The current number of daytrades that have been made in the last 5 trading days (inclusive of today)
            ///
            /// - Remark: Generated from `#/components/schemas/Account/daytrade_count`.
            public var daytrade_count: Swift.Int?
            /// Your maintenance margin requirement on the previous trading day
            ///
            /// - Remark: Generated from `#/components/schemas/Account/last_maintenance_margin`.
            public var last_maintenance_margin: Swift.String?
            /// Your buying power for day trades (continuously updated value)
            ///
            /// - Remark: Generated from `#/components/schemas/Account/daytrading_buying_power`.
            public var daytrading_buying_power: Swift.String?
            /// Your buying power under Regulation T (your excess equity - equity minus margin value - times your margin multiplier)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Account/regt_buying_power`.
            public var regt_buying_power: Swift.String?
            /// Creates a new `Account`.
            ///
            /// - Parameters:
            ///   - id: Account Id.
            ///   - account_number: Account number.
            ///   - status:
            ///   - currency: USD
            ///   - cash: Cash Balance
            ///   - portfolio_value: Total value of cash + holding positions (This field is deprecated. It is equivalent to the equity field.)
            ///   - pattern_day_trader: Whether or not the account has been flagged as a pattern day trader
            ///   - trade_suspended_by_user: User setting. If true, the account is not allowed to place orders.
            ///   - trading_blocked: If true, the account is not allowed to place orders.
            ///   - transfers_blocked: If true, the account is not allowed to request money transfers.
            ///   - account_blocked: If true, the account activity by user is prohibited.
            ///   - created_at: Timestamp this account was created at
            ///   - shorting_enabled: Flag to denote whether or not the account is permitted to short
            ///   - long_market_value: Real-time MtM value of all long positions held in the account
            ///   - short_market_value: Real-time MtM value of all short positions held in the account
            ///   - equity: Cash + long_market_value + short_market_value
            ///   - last_equity: Equity as of previous trading day at 16:00:00 ET
            ///   - multiplier: Buying power multiplier that represents account margin classification; valid values 1 (standard limited margin account with 1x buying power), 2 (reg T margin account with 2x intraday and overnight buying power; this is the default for all non-PDT accounts with $2,000 or more equity), 4 (PDT account with 4x intraday buying power and 2x reg T overnight buying power)
            ///   - buying_power: Current available $ buying power; If multiplier = 4, this is your daytrade buying power which is calculated as (last_equity - (last) maintenance_margin) * 4; If multiplier = 2, buying_power = max(equity – initial_margin,0) * 2; If multiplier = 1, buying_power = cash
            ///   - initial_margin: Reg T initial margin requirement (continuously updated value)
            ///   - maintenance_margin: Maintenance margin requirement (continuously updated value)
            ///   - sma: Value of special memorandum account (will be used at a later date to provide additional buying_power)
            ///   - daytrade_count: The current number of daytrades that have been made in the last 5 trading days (inclusive of today)
            ///   - last_maintenance_margin: Your maintenance margin requirement on the previous trading day
            ///   - daytrading_buying_power: Your buying power for day trades (continuously updated value)
            ///   - regt_buying_power: Your buying power under Regulation T (your excess equity - equity minus margin value - times your margin multiplier)
            public init(
                id: Swift.String,
                account_number: Swift.String? = nil,
                status: Components.Schemas.AccountStatus,
                currency: Swift.String? = nil,
                cash: Swift.String? = nil,
                portfolio_value: Swift.String? = nil,
                pattern_day_trader: Swift.Bool? = nil,
                trade_suspended_by_user: Swift.Bool? = nil,
                trading_blocked: Swift.Bool? = nil,
                transfers_blocked: Swift.Bool? = nil,
                account_blocked: Swift.Bool? = nil,
                created_at: Foundation.Date? = nil,
                shorting_enabled: Swift.Bool? = nil,
                long_market_value: Swift.String? = nil,
                short_market_value: Swift.String? = nil,
                equity: Swift.String? = nil,
                last_equity: Swift.String? = nil,
                multiplier: Swift.String? = nil,
                buying_power: Swift.String? = nil,
                initial_margin: Swift.String? = nil,
                maintenance_margin: Swift.String? = nil,
                sma: Swift.String? = nil,
                daytrade_count: Swift.Int? = nil,
                last_maintenance_margin: Swift.String? = nil,
                daytrading_buying_power: Swift.String? = nil,
                regt_buying_power: Swift.String? = nil
            ) {
                self.id = id
                self.account_number = account_number
                self.status = status
                self.currency = currency
                self.cash = cash
                self.portfolio_value = portfolio_value
                self.pattern_day_trader = pattern_day_trader
                self.trade_suspended_by_user = trade_suspended_by_user
                self.trading_blocked = trading_blocked
                self.transfers_blocked = transfers_blocked
                self.account_blocked = account_blocked
                self.created_at = created_at
                self.shorting_enabled = shorting_enabled
                self.long_market_value = long_market_value
                self.short_market_value = short_market_value
                self.equity = equity
                self.last_equity = last_equity
                self.multiplier = multiplier
                self.buying_power = buying_power
                self.initial_margin = initial_margin
                self.maintenance_margin = maintenance_margin
                self.sma = sma
                self.daytrade_count = daytrade_count
                self.last_maintenance_margin = last_maintenance_margin
                self.daytrading_buying_power = daytrading_buying_power
                self.regt_buying_power = regt_buying_power
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account_number
                case status
                case currency
                case cash
                case portfolio_value
                case pattern_day_trader
                case trade_suspended_by_user
                case trading_blocked
                case transfers_blocked
                case account_blocked
                case created_at
                case shorting_enabled
                case long_market_value
                case short_market_value
                case equity
                case last_equity
                case multiplier
                case buying_power
                case initial_margin
                case maintenance_margin
                case sma
                case daytrade_count
                case last_maintenance_margin
                case daytrading_buying_power
                case regt_buying_power
            }
        }
        /// An enum representing the various possible account status values.
        ///
        /// Most likely, the account status is ACTIVE unless there is any problem. The account status may get in ACCOUNT_UPDATED when personal information is being updated from the dashboard, in which case you may not be allowed trading for a short period of time until the change is approved.
        ///
        /// - ONBOARDING
        ///   The account is onboarding.
        /// - SUBMISSION_FAILED
        ///   The account application submission failed for some reason.
        /// - SUBMITTED
        ///   The account application has been submitted for review.
        /// - ACCOUNT_UPDATED
        ///   The account information is being updated.
        /// - APPROVAL_PENDING
        ///   The final account approval is pending.
        /// - ACTIVE
        ///   The account is active for trading.
        /// - REJECTED
        ///   The account application has been rejected.
        ///
        /// - Remark: Generated from `#/components/schemas/AccountStatus`.
        @frozen public enum AccountStatus: String, Codable, Hashable, Sendable {
            case ONBOARDING = "ONBOARDING"
            case SUBMISSION_FAILED = "SUBMISSION_FAILED"
            case SUBMITTED = "SUBMITTED"
            case ACCOUNT_UPDATED = "ACCOUNT_UPDATED"
            case APPROVAL_PENDING = "APPROVAL_PENDING"
            case ACTIVE = "ACTIVE"
            case REJECTED = "REJECTED"
        }
        /// The account configuration API provides custom configurations about your trading account settings. These configurations control various allow you to modify settings to suit your trading needs.
        ///
        /// - Remark: Generated from `#/components/schemas/AccountConfigurations`.
        public struct AccountConfigurations: Codable, Hashable, Sendable {
            /// both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/dtbp_check`.
            @frozen public enum dtbp_checkPayload: String, Codable, Hashable, Sendable {
                case both = "both"
                case entry = "entry"
                case exit = "exit"
            }
            /// both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/dtbp_check`.
            public var dtbp_check: Components.Schemas.AccountConfigurations.dtbp_checkPayload?
            /// all or none. If none, emails for order fills are not sent.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/trade_confirm_email`.
            public var trade_confirm_email: Swift.String?
            /// If true, new orders are blocked.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/suspend_trade`.
            public var suspend_trade: Swift.Bool?
            /// If true, account becomes long-only mode.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/no_shorting`.
            public var no_shorting: Swift.Bool?
            /// If true, account is able to participate in fractional trading
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/fractional_trading`.
            public var fractional_trading: Swift.Bool?
            /// Can be "1" or "2"
            ///
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/max_margin_multiplier`.
            public var max_margin_multiplier: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountConfigurations/pdt_check`.
            public var pdt_check: Swift.String?
            /// Creates a new `AccountConfigurations`.
            ///
            /// - Parameters:
            ///   - dtbp_check: both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.
            ///   - trade_confirm_email: all or none. If none, emails for order fills are not sent.
            ///   - suspend_trade: If true, new orders are blocked.
            ///   - no_shorting: If true, account becomes long-only mode.
            ///   - fractional_trading: If true, account is able to participate in fractional trading
            ///   - max_margin_multiplier: Can be "1" or "2"
            ///   - pdt_check:
            public init(
                dtbp_check: Components.Schemas.AccountConfigurations.dtbp_checkPayload? = nil,
                trade_confirm_email: Swift.String? = nil,
                suspend_trade: Swift.Bool? = nil,
                no_shorting: Swift.Bool? = nil,
                fractional_trading: Swift.Bool? = nil,
                max_margin_multiplier: Swift.String? = nil,
                pdt_check: Swift.String? = nil
            ) {
                self.dtbp_check = dtbp_check
                self.trade_confirm_email = trade_confirm_email
                self.suspend_trade = suspend_trade
                self.no_shorting = no_shorting
                self.fractional_trading = fractional_trading
                self.max_margin_multiplier = max_margin_multiplier
                self.pdt_check = pdt_check
            }
            public enum CodingKeys: String, CodingKey {
                case dtbp_check
                case trade_confirm_email
                case suspend_trade
                case no_shorting
                case fractional_trading
                case max_margin_multiplier
                case pdt_check
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradingActivities`.
        public struct TradingActivities: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TradingActivities/activity_type`.
            public var activity_type: Components.Schemas.ActivityType?
            /// An id for the activity. Always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/id`.
            public var id: Swift.String?
            /// The cumulative quantity of shares involved in the execution.
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/cum_qty`.
            public var cum_qty: Swift.String?
            /// For partially_filled orders, the quantity of shares that are left to be filled.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/leaves_qty`.
            public var leaves_qty: Swift.String?
            /// The per-share price that the trade was executed at.
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/price`.
            public var price: Swift.String?
            /// The number of shares involved in the trade execution.
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/qty`.
            public var qty: Swift.String?
            /// buy or sell
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/side`.
            public var side: Swift.String?
            /// The symbol of the security being traded.
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/symbol`.
            public var symbol: Swift.String?
            /// The time at which the execution occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/transaction_time`.
            public var transaction_time: Foundation.Date?
            /// The id for the order that filled.
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/order_id`.
            public var order_id: Swift.String?
            /// fill or partial_fill
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case fill = "fill"
                case partial_fill = "partial_fill"
            }
            /// fill or partial_fill
            ///
            /// - Remark: Generated from `#/components/schemas/TradingActivities/type`.
            public var _type: Components.Schemas.TradingActivities._typePayload?
            /// - Remark: Generated from `#/components/schemas/TradingActivities/order_status`.
            public var order_status: Components.Schemas.OrderStatus?
            /// Creates a new `TradingActivities`.
            ///
            /// - Parameters:
            ///   - activity_type:
            ///   - id: An id for the activity. Always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.
            ///   - cum_qty: The cumulative quantity of shares involved in the execution.
            ///   - leaves_qty: For partially_filled orders, the quantity of shares that are left to be filled.
            ///   - price: The per-share price that the trade was executed at.
            ///   - qty: The number of shares involved in the trade execution.
            ///   - side: buy or sell
            ///   - symbol: The symbol of the security being traded.
            ///   - transaction_time: The time at which the execution occurred.
            ///   - order_id: The id for the order that filled.
            ///   - _type: fill or partial_fill
            ///   - order_status:
            public init(
                activity_type: Components.Schemas.ActivityType? = nil,
                id: Swift.String? = nil,
                cum_qty: Swift.String? = nil,
                leaves_qty: Swift.String? = nil,
                price: Swift.String? = nil,
                qty: Swift.String? = nil,
                side: Swift.String? = nil,
                symbol: Swift.String? = nil,
                transaction_time: Foundation.Date? = nil,
                order_id: Swift.String? = nil,
                _type: Components.Schemas.TradingActivities._typePayload? = nil,
                order_status: Components.Schemas.OrderStatus? = nil
            ) {
                self.activity_type = activity_type
                self.id = id
                self.cum_qty = cum_qty
                self.leaves_qty = leaves_qty
                self.price = price
                self.qty = qty
                self.side = side
                self.symbol = symbol
                self.transaction_time = transaction_time
                self.order_id = order_id
                self._type = _type
                self.order_status = order_status
            }
            public enum CodingKeys: String, CodingKey {
                case activity_type
                case id
                case cum_qty
                case leaves_qty
                case price
                case qty
                case side
                case symbol
                case transaction_time
                case order_id
                case _type = "type"
                case order_status
            }
        }
        /// - Remark: Generated from `#/components/schemas/NonTradeActivities`.
        public struct NonTradeActivities: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NonTradeActivities/activity_type`.
            public var activity_type: Components.Schemas.ActivityType?
            /// An ID for the activity, always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivities/id`.
            public var id: Swift.String?
            /// The date on which the activity occurred or on which the transaction associated with the activity settled.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivities/date`.
            public var date: Foundation.Date?
            /// The net amount of money (positive or negative) associated with the activity.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivities/net_amount`.
            public var net_amount: Swift.String?
            /// The symbol of the security involved with the activity. Not present for all activity types.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivities/symbol`.
            public var symbol: Swift.String?
            /// For dividend activities, the number of shares that contributed to the payment. Not present for other activity types.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivities/qty`.
            public var qty: Swift.String?
            /// For dividend activities, the average amount paid per share. Not present for other activity types.
            ///
            /// - Remark: Generated from `#/components/schemas/NonTradeActivities/per_share_amount`.
            public var per_share_amount: Swift.String?
            /// Creates a new `NonTradeActivities`.
            ///
            /// - Parameters:
            ///   - activity_type:
            ///   - id: An ID for the activity, always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.
            ///   - date: The date on which the activity occurred or on which the transaction associated with the activity settled.
            ///   - net_amount: The net amount of money (positive or negative) associated with the activity.
            ///   - symbol: The symbol of the security involved with the activity. Not present for all activity types.
            ///   - qty: For dividend activities, the number of shares that contributed to the payment. Not present for other activity types.
            ///   - per_share_amount: For dividend activities, the average amount paid per share. Not present for other activity types.
            public init(
                activity_type: Components.Schemas.ActivityType? = nil,
                id: Swift.String? = nil,
                date: Foundation.Date? = nil,
                net_amount: Swift.String? = nil,
                symbol: Swift.String? = nil,
                qty: Swift.String? = nil,
                per_share_amount: Swift.String? = nil
            ) {
                self.activity_type = activity_type
                self.id = id
                self.date = date
                self.net_amount = net_amount
                self.symbol = symbol
                self.qty = qty
                self.per_share_amount = per_share_amount
            }
            public enum CodingKeys: String, CodingKey {
                case activity_type
                case id
                case date
                case net_amount
                case symbol
                case qty
                case per_share_amount
            }
        }
        /// - FILL
        ///   Order fills (both partial and full fills)
        ///
        /// - TRANS
        ///   Cash transactions (both CSD and CSW)
        ///
        /// - MISC
        ///   Miscellaneous or rarely used activity types (All types except those in TRANS, DIV, or FILL)
        ///
        /// - ACATC
        ///   ACATS IN/OUT (Cash)
        ///
        /// - ACATS
        ///   ACATS IN/OUT (Securities)
        ///
        /// - CFEE
        ///   Crypto fee
        ///
        /// - CSD
        ///   Cash deposit(+)
        ///
        /// - CSW
        ///   Cash withdrawal(-)
        ///
        /// - DIV
        ///   Dividends
        ///
        /// - DIVCGL
        ///   Dividend (capital gain long term)
        ///
        /// - DIVCGS
        ///   Dividend (capital gain short term)
        ///
        /// - DIVFEE
        ///   Dividend fee
        ///
        /// - DIVFT
        ///   Dividend adjusted (Foreign Tax Withheld)
        ///
        /// - DIVNRA
        ///   Dividend adjusted (NRA Withheld)
        ///
        /// - DIVROC
        ///   Dividend return of capital
        ///
        /// - DIVTW
        ///   Dividend adjusted (Tefra Withheld)
        ///
        /// - DIVTXEX
        ///   Dividend (tax exempt)
        ///
        /// - FEE
        ///   Fee denominated in USD
        ///
        /// - INT
        ///   Interest (credit/margin)
        ///
        /// - INTNRA
        ///   Interest adjusted (NRA Withheld)
        ///
        /// - INTTW
        ///   Interest adjusted (Tefra Withheld)
        ///
        /// - JNL
        ///   Journal entry
        ///
        /// - JNLC
        ///   Journal entry (cash)
        ///
        /// - JNLS
        ///   Journal entry (stock)
        ///
        /// - MA
        ///   Merger/Acquisition
        ///
        /// - NC
        ///   Name change
        ///
        /// - OPASN
        ///   Option assignment
        ///
        /// - OPEXP
        ///   Option expiration
        ///
        /// - OPXRC
        ///   Option exercise
        ///
        /// - PTC
        ///   Pass Thru Charge
        ///
        /// - PTR
        ///   Pass Thru Rebate
        ///
        /// - REORG
        ///   Reorg CA
        ///
        /// - SC
        ///   Symbol change
        ///
        /// - SSO
        ///   Stock spinoff
        ///
        /// - SSP
        ///   Stock split
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityType`.
        @frozen public enum ActivityType: String, Codable, Hashable, Sendable {
            case FILL = "FILL"
            case TRANS = "TRANS"
            case MISC = "MISC"
            case ACATC = "ACATC"
            case ACATS = "ACATS"
            case CSD = "CSD"
            case CSW = "CSW"
            case DIV = "DIV"
            case DIVCGL = "DIVCGL"
            case DIVCGS = "DIVCGS"
            case DIVFEE = "DIVFEE"
            case DIVFT = "DIVFT"
            case DIVNRA = "DIVNRA"
            case DIVROC = "DIVROC"
            case DIVTW = "DIVTW"
            case DIVTXEX = "DIVTXEX"
            case INT = "INT"
            case INTNRA = "INTNRA"
            case INTTW = "INTTW"
            case JNL = "JNL"
            case JNLC = "JNLC"
            case JNLS = "JNLS"
            case MA = "MA"
            case NC = "NC"
            case OPASN = "OPASN"
            case OPEXP = "OPEXP"
            case OPXRC = "OPXRC"
            case PTC = "PTC"
            case PTR = "PTR"
            case REORG = "REORG"
            case SC = "SC"
            case SSO = "SSO"
            case SSP = "SSP"
            case CFEE = "CFEE"
            case FEE = "FEE"
        }
        /// The Orders API allows a user to monitor, place and cancel their orders with Alpaca.
        ///
        /// Each order has a unique identifier provided by the client. This client-side unique order ID will be automatically generated by the system if not provided by the client, and will be returned as part of the order object along with the rest of the fields described below. Once an order is placed, it can be queried using the client-side order ID to check the status.
        ///
        /// Updates on open orders at Alpaca will also be sent over the streaming interface, which is the recommended method of maintaining order state.
        ///
        /// - Remark: Generated from `#/components/schemas/Order`.
        public struct Order: Codable, Hashable, Sendable {
            /// Order ID
            ///
            /// - Remark: Generated from `#/components/schemas/Order/id`.
            public var id: Swift.String? {
                get  {
                    storage.value.id
                }
                _modify {
                    yield &storage.value.id
                }
            }
            /// Client unique order ID
            ///
            /// - Remark: Generated from `#/components/schemas/Order/client_order_id`.
            public var client_order_id: Swift.String? {
                get  {
                    storage.value.client_order_id
                }
                _modify {
                    yield &storage.value.client_order_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/created_at`.
            public var created_at: Foundation.Date? {
                get  {
                    storage.value.created_at
                }
                _modify {
                    yield &storage.value.created_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/updated_at`.
            public var updated_at: Foundation.Date? {
                get  {
                    storage.value.updated_at
                }
                _modify {
                    yield &storage.value.updated_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/submitted_at`.
            public var submitted_at: Foundation.Date? {
                get  {
                    storage.value.submitted_at
                }
                _modify {
                    yield &storage.value.submitted_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/filled_at`.
            public var filled_at: Foundation.Date? {
                get  {
                    storage.value.filled_at
                }
                _modify {
                    yield &storage.value.filled_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/expired_at`.
            public var expired_at: Foundation.Date? {
                get  {
                    storage.value.expired_at
                }
                _modify {
                    yield &storage.value.expired_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/canceled_at`.
            public var canceled_at: Foundation.Date? {
                get  {
                    storage.value.canceled_at
                }
                _modify {
                    yield &storage.value.canceled_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/failed_at`.
            public var failed_at: Foundation.Date? {
                get  {
                    storage.value.failed_at
                }
                _modify {
                    yield &storage.value.failed_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/replaced_at`.
            public var replaced_at: Foundation.Date? {
                get  {
                    storage.value.replaced_at
                }
                _modify {
                    yield &storage.value.replaced_at
                }
            }
            /// The order ID that this order was replaced by
            ///
            /// - Remark: Generated from `#/components/schemas/Order/replaced_by`.
            public var replaced_by: Swift.String? {
                get  {
                    storage.value.replaced_by
                }
                _modify {
                    yield &storage.value.replaced_by
                }
            }
            /// The order ID that this order replaces
            ///
            /// - Remark: Generated from `#/components/schemas/Order/replaces`.
            public var replaces: Swift.String? {
                get  {
                    storage.value.replaces
                }
                _modify {
                    yield &storage.value.replaces
                }
            }
            /// Asset ID
            ///
            /// - Remark: Generated from `#/components/schemas/Order/asset_id`.
            public var asset_id: Swift.String? {
                get  {
                    storage.value.asset_id
                }
                _modify {
                    yield &storage.value.asset_id
                }
            }
            /// Asset symbol
            ///
            /// - Remark: Generated from `#/components/schemas/Order/symbol`.
            public var symbol: Swift.String {
                get  {
                    storage.value.symbol
                }
                _modify {
                    yield &storage.value.symbol
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/asset_class`.
            public var asset_class: Components.Schemas.AssetClass? {
                get  {
                    storage.value.asset_class
                }
                _modify {
                    yield &storage.value.asset_class
                }
            }
            /// Ordered notional amount. If entered, qty will be null. Can take up to 9 decimal points.
            ///
            /// - Remark: Generated from `#/components/schemas/Order/notional`.
            public var notional: Swift.String? {
                get  {
                    storage.value.notional
                }
                _modify {
                    yield &storage.value.notional
                }
            }
            /// Ordered quantity. If entered, notional will be null. Can take up to 9 decimal points.
            ///
            /// - Remark: Generated from `#/components/schemas/Order/qty`.
            public var qty: Swift.String? {
                get  {
                    storage.value.qty
                }
                _modify {
                    yield &storage.value.qty
                }
            }
            /// Filled quantity
            ///
            /// - Remark: Generated from `#/components/schemas/Order/filled_qty`.
            public var filled_qty: Swift.String? {
                get  {
                    storage.value.filled_qty
                }
                _modify {
                    yield &storage.value.filled_qty
                }
            }
            /// Filled average price
            ///
            /// - Remark: Generated from `#/components/schemas/Order/filled_avg_price`.
            public var filled_avg_price: Swift.String? {
                get  {
                    storage.value.filled_avg_price
                }
                _modify {
                    yield &storage.value.filled_avg_price
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/order_class`.
            public var order_class: Components.Schemas.OrderClass? {
                get  {
                    storage.value.order_class
                }
                _modify {
                    yield &storage.value.order_class
                }
            }
            /// Deprecated in favour of the field "type" 
            ///
            /// - Remark: Generated from `#/components/schemas/Order/order_type`.
            @available(*, deprecated)
            public var order_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Order/type`.
            public var _type: Components.Schemas.OrderType {
                get  {
                    storage.value._type
                }
                _modify {
                    yield &storage.value._type
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/side`.
            public var side: Components.Schemas.OrderSide {
                get  {
                    storage.value.side
                }
                _modify {
                    yield &storage.value.side
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/time_in_force`.
            public var time_in_force: Components.Schemas.TimeInForce {
                get  {
                    storage.value.time_in_force
                }
                _modify {
                    yield &storage.value.time_in_force
                }
            }
            /// Limit price
            ///
            /// - Remark: Generated from `#/components/schemas/Order/limit_price`.
            public var limit_price: Swift.String? {
                get  {
                    storage.value.limit_price
                }
                _modify {
                    yield &storage.value.limit_price
                }
            }
            /// Stop price
            ///
            /// - Remark: Generated from `#/components/schemas/Order/stop_price`.
            public var stop_price: Swift.String? {
                get  {
                    storage.value.stop_price
                }
                _modify {
                    yield &storage.value.stop_price
                }
            }
            /// - Remark: Generated from `#/components/schemas/Order/status`.
            public var status: Components.Schemas.OrderStatus? {
                get  {
                    storage.value.status
                }
                _modify {
                    yield &storage.value.status
                }
            }
            /// If true, eligible for execution outside regular trading hours.
            ///
            /// - Remark: Generated from `#/components/schemas/Order/extended_hours`.
            public var extended_hours: Swift.Bool? {
                get  {
                    storage.value.extended_hours
                }
                _modify {
                    yield &storage.value.extended_hours
                }
            }
            /// When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.
            ///
            /// - Remark: Generated from `#/components/schemas/Order/legs`.
            public var legs: [Components.Schemas.Order]? {
                get  {
                    storage.value.legs
                }
                _modify {
                    yield &storage.value.legs
                }
            }
            /// The percent value away from the high water mark for trailing stop orders.
            ///
            /// - Remark: Generated from `#/components/schemas/Order/trail_percent`.
            public var trail_percent: Swift.String? {
                get  {
                    storage.value.trail_percent
                }
                _modify {
                    yield &storage.value.trail_percent
                }
            }
            /// The dollar value away from the high water mark for trailing stop orders.
            ///
            /// - Remark: Generated from `#/components/schemas/Order/trail_price`.
            public var trail_price: Swift.String? {
                get  {
                    storage.value.trail_price
                }
                _modify {
                    yield &storage.value.trail_price
                }
            }
            /// The highest (lowest) market price seen since the trailing stop order was submitted.
            ///
            /// - Remark: Generated from `#/components/schemas/Order/hwm`.
            public var hwm: Swift.String? {
                get  {
                    storage.value.hwm
                }
                _modify {
                    yield &storage.value.hwm
                }
            }
            /// Creates a new `Order`.
            ///
            /// - Parameters:
            ///   - id: Order ID
            ///   - client_order_id: Client unique order ID
            ///   - created_at:
            ///   - updated_at:
            ///   - submitted_at:
            ///   - filled_at:
            ///   - expired_at:
            ///   - canceled_at:
            ///   - failed_at:
            ///   - replaced_at:
            ///   - replaced_by: The order ID that this order was replaced by
            ///   - replaces: The order ID that this order replaces
            ///   - asset_id: Asset ID
            ///   - symbol: Asset symbol
            ///   - asset_class:
            ///   - notional: Ordered notional amount. If entered, qty will be null. Can take up to 9 decimal points.
            ///   - qty: Ordered quantity. If entered, notional will be null. Can take up to 9 decimal points.
            ///   - filled_qty: Filled quantity
            ///   - filled_avg_price: Filled average price
            ///   - order_class:
            ///   - order_type: Deprecated in favour of the field "type" 
            ///   - _type:
            ///   - side:
            ///   - time_in_force:
            ///   - limit_price: Limit price
            ///   - stop_price: Stop price
            ///   - status:
            ///   - extended_hours: If true, eligible for execution outside regular trading hours.
            ///   - legs: When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.
            ///   - trail_percent: The percent value away from the high water mark for trailing stop orders.
            ///   - trail_price: The dollar value away from the high water mark for trailing stop orders.
            ///   - hwm: The highest (lowest) market price seen since the trailing stop order was submitted.
            public init(
                id: Swift.String? = nil,
                client_order_id: Swift.String? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                submitted_at: Foundation.Date? = nil,
                filled_at: Foundation.Date? = nil,
                expired_at: Foundation.Date? = nil,
                canceled_at: Foundation.Date? = nil,
                failed_at: Foundation.Date? = nil,
                replaced_at: Foundation.Date? = nil,
                replaced_by: Swift.String? = nil,
                replaces: Swift.String? = nil,
                asset_id: Swift.String? = nil,
                symbol: Swift.String,
                asset_class: Components.Schemas.AssetClass? = nil,
                notional: Swift.String? = nil,
                qty: Swift.String? = nil,
                filled_qty: Swift.String? = nil,
                filled_avg_price: Swift.String? = nil,
                order_class: Components.Schemas.OrderClass? = nil,
                order_type: Swift.String? = nil,
                _type: Components.Schemas.OrderType,
                side: Components.Schemas.OrderSide,
                time_in_force: Components.Schemas.TimeInForce,
                limit_price: Swift.String? = nil,
                stop_price: Swift.String? = nil,
                status: Components.Schemas.OrderStatus? = nil,
                extended_hours: Swift.Bool? = nil,
                legs: [Components.Schemas.Order]? = nil,
                trail_percent: Swift.String? = nil,
                trail_price: Swift.String? = nil,
                hwm: Swift.String? = nil
            ) {
                storage = .init(value: .init(
                    id: id,
                    client_order_id: client_order_id,
                    created_at: created_at,
                    updated_at: updated_at,
                    submitted_at: submitted_at,
                    filled_at: filled_at,
                    expired_at: expired_at,
                    canceled_at: canceled_at,
                    failed_at: failed_at,
                    replaced_at: replaced_at,
                    replaced_by: replaced_by,
                    replaces: replaces,
                    asset_id: asset_id,
                    symbol: symbol,
                    asset_class: asset_class,
                    notional: notional,
                    qty: qty,
                    filled_qty: filled_qty,
                    filled_avg_price: filled_avg_price,
                    order_class: order_class,
                    _type: _type,
                    side: side,
                    time_in_force: time_in_force,
                    limit_price: limit_price,
                    stop_price: stop_price,
                    status: status,
                    extended_hours: extended_hours,
                    legs: legs,
                    trail_percent: trail_percent,
                    trail_price: trail_price,
                    hwm: hwm
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case client_order_id
                case created_at
                case updated_at
                case submitted_at
                case filled_at
                case expired_at
                case canceled_at
                case failed_at
                case replaced_at
                case replaced_by
                case replaces
                case asset_id
                case symbol
                case asset_class
                case notional
                case qty
                case filled_qty
                case filled_avg_price
                case order_class
                case order_type
                case _type = "type"
                case side
                case time_in_force
                case limit_price
                case stop_price
                case status
                case extended_hours
                case legs
                case trail_percent
                case trail_price
                case hwm
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// Order ID
                ///
                /// - Remark: Generated from `#/components/schemas/Order/id`.
                var id: Swift.String?
                /// Client unique order ID
                ///
                /// - Remark: Generated from `#/components/schemas/Order/client_order_id`.
                var client_order_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/created_at`.
                var created_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/updated_at`.
                var updated_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/submitted_at`.
                var submitted_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/filled_at`.
                var filled_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/expired_at`.
                var expired_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/canceled_at`.
                var canceled_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/failed_at`.
                var failed_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Order/replaced_at`.
                var replaced_at: Foundation.Date?
                /// The order ID that this order was replaced by
                ///
                /// - Remark: Generated from `#/components/schemas/Order/replaced_by`.
                var replaced_by: Swift.String?
                /// The order ID that this order replaces
                ///
                /// - Remark: Generated from `#/components/schemas/Order/replaces`.
                var replaces: Swift.String?
                /// Asset ID
                ///
                /// - Remark: Generated from `#/components/schemas/Order/asset_id`.
                var asset_id: Swift.String?
                /// Asset symbol
                ///
                /// - Remark: Generated from `#/components/schemas/Order/symbol`.
                var symbol: Swift.String
                /// - Remark: Generated from `#/components/schemas/Order/asset_class`.
                var asset_class: Components.Schemas.AssetClass?
                /// Ordered notional amount. If entered, qty will be null. Can take up to 9 decimal points.
                ///
                /// - Remark: Generated from `#/components/schemas/Order/notional`.
                var notional: Swift.String?
                /// Ordered quantity. If entered, notional will be null. Can take up to 9 decimal points.
                ///
                /// - Remark: Generated from `#/components/schemas/Order/qty`.
                var qty: Swift.String?
                /// Filled quantity
                ///
                /// - Remark: Generated from `#/components/schemas/Order/filled_qty`.
                var filled_qty: Swift.String?
                /// Filled average price
                ///
                /// - Remark: Generated from `#/components/schemas/Order/filled_avg_price`.
                var filled_avg_price: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/order_class`.
                var order_class: Components.Schemas.OrderClass?
                /// Deprecated in favour of the field "type" 
                ///
                /// - Remark: Generated from `#/components/schemas/Order/order_type`.
                @available(*, deprecated)
                var order_type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/type`.
                var _type: Components.Schemas.OrderType
                /// - Remark: Generated from `#/components/schemas/Order/side`.
                var side: Components.Schemas.OrderSide
                /// - Remark: Generated from `#/components/schemas/Order/time_in_force`.
                var time_in_force: Components.Schemas.TimeInForce
                /// Limit price
                ///
                /// - Remark: Generated from `#/components/schemas/Order/limit_price`.
                var limit_price: Swift.String?
                /// Stop price
                ///
                /// - Remark: Generated from `#/components/schemas/Order/stop_price`.
                var stop_price: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Order/status`.
                var status: Components.Schemas.OrderStatus?
                /// If true, eligible for execution outside regular trading hours.
                ///
                /// - Remark: Generated from `#/components/schemas/Order/extended_hours`.
                var extended_hours: Swift.Bool?
                /// When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.
                ///
                /// - Remark: Generated from `#/components/schemas/Order/legs`.
                var legs: [Components.Schemas.Order]?
                /// The percent value away from the high water mark for trailing stop orders.
                ///
                /// - Remark: Generated from `#/components/schemas/Order/trail_percent`.
                var trail_percent: Swift.String?
                /// The dollar value away from the high water mark for trailing stop orders.
                ///
                /// - Remark: Generated from `#/components/schemas/Order/trail_price`.
                var trail_price: Swift.String?
                /// The highest (lowest) market price seen since the trailing stop order was submitted.
                ///
                /// - Remark: Generated from `#/components/schemas/Order/hwm`.
                var hwm: Swift.String?
                init(
                    id: Swift.String? = nil,
                    client_order_id: Swift.String? = nil,
                    created_at: Foundation.Date? = nil,
                    updated_at: Foundation.Date? = nil,
                    submitted_at: Foundation.Date? = nil,
                    filled_at: Foundation.Date? = nil,
                    expired_at: Foundation.Date? = nil,
                    canceled_at: Foundation.Date? = nil,
                    failed_at: Foundation.Date? = nil,
                    replaced_at: Foundation.Date? = nil,
                    replaced_by: Swift.String? = nil,
                    replaces: Swift.String? = nil,
                    asset_id: Swift.String? = nil,
                    symbol: Swift.String,
                    asset_class: Components.Schemas.AssetClass? = nil,
                    notional: Swift.String? = nil,
                    qty: Swift.String? = nil,
                    filled_qty: Swift.String? = nil,
                    filled_avg_price: Swift.String? = nil,
                    order_class: Components.Schemas.OrderClass? = nil,
                    order_type: Swift.String? = nil,
                    _type: Components.Schemas.OrderType,
                    side: Components.Schemas.OrderSide,
                    time_in_force: Components.Schemas.TimeInForce,
                    limit_price: Swift.String? = nil,
                    stop_price: Swift.String? = nil,
                    status: Components.Schemas.OrderStatus? = nil,
                    extended_hours: Swift.Bool? = nil,
                    legs: [Components.Schemas.Order]? = nil,
                    trail_percent: Swift.String? = nil,
                    trail_price: Swift.String? = nil,
                    hwm: Swift.String? = nil
                ) {
                    self.id = id
                    self.client_order_id = client_order_id
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.submitted_at = submitted_at
                    self.filled_at = filled_at
                    self.expired_at = expired_at
                    self.canceled_at = canceled_at
                    self.failed_at = failed_at
                    self.replaced_at = replaced_at
                    self.replaced_by = replaced_by
                    self.replaces = replaces
                    self.asset_id = asset_id
                    self.symbol = symbol
                    self.asset_class = asset_class
                    self.notional = notional
                    self.qty = qty
                    self.filled_qty = filled_qty
                    self.filled_avg_price = filled_avg_price
                    self.order_class = order_class
                    self.order_type = order_type
                    self._type = _type
                    self.side = side
                    self.time_in_force = time_in_force
                    self.limit_price = limit_price
                    self.stop_price = stop_price
                    self.status = status
                    self.extended_hours = extended_hours
                    self.legs = legs
                    self.trail_percent = trail_percent
                    self.trail_price = trail_price
                    self.hwm = hwm
                }
                typealias CodingKeys = Components.Schemas.Order.CodingKeys
            }
        }
        /// Represents the types of orders Alpaca currently supports
        ///
        /// - market
        /// - limit
        /// - stop
        /// - stop_limit
        /// - trailing_stop
        ///
        /// - Remark: Generated from `#/components/schemas/OrderType`.
        @frozen public enum OrderType: String, Codable, Hashable, Sendable {
            case market = "market"
            case limit = "limit"
            case stop = "stop"
            case stop_limit = "stop_limit"
            case trailing_stop = "trailing_stop"
        }
        /// Represents which side this order was on:
        ///
        /// - buy
        /// - sell
        ///
        /// - Remark: Generated from `#/components/schemas/OrderSide`.
        @frozen public enum OrderSide: String, Codable, Hashable, Sendable {
            case buy = "buy"
            case sell = "sell"
        }
        /// This will either be the empty string "", "simple", "bracket", "oco", or "oto".
        ///
        /// - Remark: Generated from `#/components/schemas/OrderClass`.
        @frozen public enum OrderClass: String, Codable, Hashable, Sendable {
            case simple = "simple"
            case bracket = "bracket"
            case oco = "oco"
            case oto = "oto"
            case _empty = ""
        }
        /// An order executed through Alpaca can experience several status changes during its lifecycle. The most common statuses are described in detail below:
        ///
        /// - new
        ///   The order has been received by Alpaca, and routed to exchanges for execution. This is the usual initial state of an order.
        ///
        /// - partially_filled
        ///   The order has been partially filled.
        ///
        /// - filled
        ///   The order has been filled, and no further updates will occur for the order.
        ///
        /// - done_for_day
        ///   The order is done executing for the day, and will not receive further updates until the next trading day.
        ///
        /// - canceled
        ///   The order has been canceled, and no further updates will occur for the order. This can be either due to a cancel request by the user, or the order has been canceled by the exchanges due to its time-in-force.
        ///
        /// - expired
        ///   The order has expired, and no further updates will occur for the order.
        ///
        /// - replaced
        ///   The order was replaced by another order, or was updated due to a market event such as corporate action.
        ///
        /// - pending_cancel
        ///   The order is waiting to be canceled.
        ///
        /// - pending_replace
        ///   The order is waiting to be replaced by another order. The order will reject cancel request while in this state.
        ///
        /// Less common states are described below. Note that these states only occur on very rare occasions, and most users will likely never see their orders reach these states:
        ///
        /// - accepted
        ///   The order has been received by Alpaca, but hasn’t yet been routed to the execution venue. This could be seen often out side of trading session hours.
        ///
        /// - pending_new
        ///   The order has been received by Alpaca, and routed to the exchanges, but has not yet been accepted for execution. This state only occurs on rare occasions.
        ///
        /// - accepted_for_bidding
        ///   The order has been received by exchanges, and is evaluated for pricing. This state only occurs on rare occasions.
        ///
        /// - stopped
        ///   The order has been stopped, and a trade is guaranteed for the order, usually at a stated price or better, but has not yet occurred. This state only occurs on rare occasions.
        ///
        /// - rejected
        ///   The order has been rejected, and no further updates will occur for the order. This state occurs on rare occasions and may occur based on various conditions decided by the exchanges.
        ///
        /// - suspended
        ///   The order has been suspended, and is not eligible for trading. This state only occurs on rare occasions.
        ///
        /// - calculated
        ///   The order has been completed for the day (either filled or done for day), but remaining settlement calculations are still pending. This state only occurs on rare occasions.
        ///
        ///
        /// An order may be canceled through the API up until the point it reaches a state of either filled, canceled, or expired.
        ///
        /// - Remark: Generated from `#/components/schemas/OrderStatus`.
        @frozen public enum OrderStatus: String, Codable, Hashable, Sendable {
            case new = "new"
            case partially_filled = "partially_filled"
            case filled = "filled"
            case done_for_day = "done_for_day"
            case canceled = "canceled"
            case expired = "expired"
            case replaced = "replaced"
            case pending_cancel = "pending_cancel"
            case pending_replace = "pending_replace"
            case accepted = "accepted"
            case pending_new = "pending_new"
            case accepted_for_bidding = "accepted_for_bidding"
            case stopped = "stopped"
            case rejected = "rejected"
            case suspended = "suspended"
            case calculated = "calculated"
        }
        /// Note: For Crypto Trading, Alpaca supports the following Time-In-Force designations: day, gtc, ioc and fok. OPG and CLS are not supported.
        ///
        /// Alpaca supports the following Time-In-Force designations:
        ///
        /// - day
        ///   A day order is eligible for execution only on the day it is live. By default, the order is only valid during Regular Trading Hours (9:30am - 4:00pm ET). If unfilled after the closing auction, it is automatically canceled. If submitted after the close, it is queued and submitted the following trading day. However, if marked as eligible for extended hours, the order can also execute during supported extended hours.
        ///
        /// - gtc
        ///   The order is good until canceled. Non-marketable GTC limit orders are subject to price adjustments to offset corporate actions affecting the issue. We do not currently support Do Not Reduce(DNR) orders to opt out of such price adjustments.
        ///
        /// - opg
        ///   Use this TIF with a market/limit order type to submit “market on open” (MOO) and “limit on open” (LOO) orders. This order is eligible to execute only in the market opening auction. Any unfilled orders after the open will be cancelled. OPG orders submitted after 9:28am but before 7:00pm ET will be rejected. OPG orders submitted after 7:00pm will be queued and routed to the following day’s opening auction. On open/on close orders are routed to the primary exchange. Such orders do not necessarily execute exactly at 9:30am / 4:00pm ET but execute per the exchange’s auction rules.
        ///
        /// - cls
        ///   Use this TIF with a market/limit order type to submit “market on close” (MOC) and “limit on close” (LOC) orders. This order is eligible to execute only in the market closing auction. Any unfilled orders after the close will be cancelled. CLS orders submitted after 3:50pm but before 7:00pm ET will be rejected. CLS orders submitted after 7:00pm will be queued and routed to the following day’s closing auction. Only available with API v2.
        ///
        /// - ioc
        ///   An Immediate Or Cancel (IOC) order requires all or part of the order to be executed immediately. Any unfilled portion of the order is canceled. Only available with API v2. Most market makers who receive IOC orders will attempt to fill the order on a principal basis only, and cancel any unfilled balance. On occasion, this can result in the entire order being cancelled if the market maker does not have any existing inventory of the security in question.
        ///
        /// - fok
        ///   A Fill or Kill (FOK) order is only executed if the entire order quantity can be filled, otherwise the order is canceled. Only available with API v2.
        ///
        /// - Remark: Generated from `#/components/schemas/TimeInForce`.
        @frozen public enum TimeInForce: String, Codable, Hashable, Sendable {
            case day = "day"
            case gtc = "gtc"
            case opg = "opg"
            case cls = "cls"
            case ioc = "ioc"
            case fok = "fok"
        }
        /// The assets API serves as the master list of assets available for trade and data consumption from Alpaca. Assets are sorted by asset class, exchange and symbol. Some assets are only available for data consumption via Polygon, and are not tradable with Alpaca. These assets will be marked with the flag tradable=false.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Assets`.
        public struct Assets: Codable, Hashable, Sendable {
            /// Asset ID
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Assets/class`.
            public var _class: Components.Schemas.AssetClass
            /// - Remark: Generated from `#/components/schemas/Assets/exchange`.
            public var exchange: Components.Schemas.Exchange
            /// The symbol of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/symbol`.
            public var symbol: Swift.String
            /// The official name of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/name`.
            public var name: Swift.String
            /// active or inactive
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case inactive = "inactive"
            }
            /// active or inactive
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/status`.
            public var status: Components.Schemas.Assets.statusPayload
            /// Asset is tradable on Alpaca or not
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/tradable`.
            public var tradable: Swift.Bool
            /// Asset is marginable or not
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/marginable`.
            public var marginable: Swift.Bool
            /// Asset is shortable or not
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/shortable`.
            public var shortable: Swift.Bool
            /// Asset is easy-to-borrow or not (filtering for easy_to_borrow = True is the best way to check whether the name is currently available to short at Alpaca).
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/easy_to_borrow`.
            public var easy_to_borrow: Swift.Bool
            /// Asset is fractionable or not
            ///
            /// - Remark: Generated from `#/components/schemas/Assets/fractionable`.
            public var fractionable: Swift.Bool
            /// Creates a new `Assets`.
            ///
            /// - Parameters:
            ///   - id: Asset ID
            ///   - _class:
            ///   - exchange:
            ///   - symbol: The symbol of the asset
            ///   - name: The official name of the asset
            ///   - status: active or inactive
            ///   - tradable: Asset is tradable on Alpaca or not
            ///   - marginable: Asset is marginable or not
            ///   - shortable: Asset is shortable or not
            ///   - easy_to_borrow: Asset is easy-to-borrow or not (filtering for easy_to_borrow = True is the best way to check whether the name is currently available to short at Alpaca).
            ///   - fractionable: Asset is fractionable or not
            public init(
                id: Swift.String,
                _class: Components.Schemas.AssetClass,
                exchange: Components.Schemas.Exchange,
                symbol: Swift.String,
                name: Swift.String,
                status: Components.Schemas.Assets.statusPayload,
                tradable: Swift.Bool,
                marginable: Swift.Bool,
                shortable: Swift.Bool,
                easy_to_borrow: Swift.Bool,
                fractionable: Swift.Bool
            ) {
                self.id = id
                self._class = _class
                self.exchange = exchange
                self.symbol = symbol
                self.name = name
                self.status = status
                self.tradable = tradable
                self.marginable = marginable
                self.shortable = shortable
                self.easy_to_borrow = easy_to_borrow
                self.fractionable = fractionable
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _class = "class"
                case exchange
                case symbol
                case name
                case status
                case tradable
                case marginable
                case shortable
                case easy_to_borrow
                case fractionable
            }
        }
        /// Represents what class of asset this is. Currently only supports `us_equity` or `crypto`
        ///
        /// - Remark: Generated from `#/components/schemas/AssetClass`.
        @frozen public enum AssetClass: String, Codable, Hashable, Sendable {
            case us_equity = "us_equity"
            case crypto = "crypto"
        }
        /// The positions API provides information about an account’s current open positions. The response will include information such as cost basis, shares traded, and market value, which will be updated live as price information is updated. Once a position is closed, it will no longer be queryable through this API.
        ///
        /// - Remark: Generated from `#/components/schemas/Position`.
        public struct Position: Codable, Hashable, Sendable {
            /// Asset ID
            ///
            /// - Remark: Generated from `#/components/schemas/Position/asset_id`.
            public var asset_id: Swift.String
            /// Symbol name of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/Position/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/Position/exchange`.
            public var exchange: Components.Schemas.Exchange
            /// - Remark: Generated from `#/components/schemas/Position/asset_class`.
            public var asset_class: Components.Schemas.AssetClass
            /// Average entry price of the position
            ///
            /// - Remark: Generated from `#/components/schemas/Position/avg_entry_price`.
            public var avg_entry_price: Swift.String
            /// The number of shares
            ///
            /// - Remark: Generated from `#/components/schemas/Position/qty`.
            public var qty: Swift.String
            /// Total number of shares available minus open orders
            ///
            /// - Remark: Generated from `#/components/schemas/Position/qty_available`.
            public var qty_available: Swift.String?
            /// “long”
            ///
            /// - Remark: Generated from `#/components/schemas/Position/side`.
            public var side: Swift.String
            /// Total dollar amount of the position
            ///
            /// - Remark: Generated from `#/components/schemas/Position/market_value`.
            public var market_value: Swift.String
            /// Total cost basis in dollar
            ///
            /// - Remark: Generated from `#/components/schemas/Position/cost_basis`.
            public var cost_basis: Swift.String
            /// Unrealized profit/loss in dollars
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_pl`.
            public var unrealized_pl: Swift.String
            /// Unrealized profit/loss percent (by a factor of 1)
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_plpc`.
            public var unrealized_plpc: Swift.String
            /// Unrealized profit/loss in dollars for the day
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_intraday_pl`.
            public var unrealized_intraday_pl: Swift.String
            /// Unrealized profit/loss percent (by a factor of 1)
            ///
            /// - Remark: Generated from `#/components/schemas/Position/unrealized_intraday_plpc`.
            public var unrealized_intraday_plpc: Swift.String
            /// Current asset price per share
            ///
            /// - Remark: Generated from `#/components/schemas/Position/current_price`.
            public var current_price: Swift.String
            /// Last day’s asset price per share based on the closing value of the last trading day
            ///
            /// - Remark: Generated from `#/components/schemas/Position/lastday_price`.
            public var lastday_price: Swift.String
            /// Percent change from last day price (by a factor of 1)
            ///
            /// - Remark: Generated from `#/components/schemas/Position/change_today`.
            public var change_today: Swift.String
            /// - Remark: Generated from `#/components/schemas/Position/asset_marginable`.
            public var asset_marginable: Swift.Bool
            /// Creates a new `Position`.
            ///
            /// - Parameters:
            ///   - asset_id: Asset ID
            ///   - symbol: Symbol name of the asset
            ///   - exchange:
            ///   - asset_class:
            ///   - avg_entry_price: Average entry price of the position
            ///   - qty: The number of shares
            ///   - qty_available: Total number of shares available minus open orders
            ///   - side: “long”
            ///   - market_value: Total dollar amount of the position
            ///   - cost_basis: Total cost basis in dollar
            ///   - unrealized_pl: Unrealized profit/loss in dollars
            ///   - unrealized_plpc: Unrealized profit/loss percent (by a factor of 1)
            ///   - unrealized_intraday_pl: Unrealized profit/loss in dollars for the day
            ///   - unrealized_intraday_plpc: Unrealized profit/loss percent (by a factor of 1)
            ///   - current_price: Current asset price per share
            ///   - lastday_price: Last day’s asset price per share based on the closing value of the last trading day
            ///   - change_today: Percent change from last day price (by a factor of 1)
            ///   - asset_marginable:
            public init(
                asset_id: Swift.String,
                symbol: Swift.String,
                exchange: Components.Schemas.Exchange,
                asset_class: Components.Schemas.AssetClass,
                avg_entry_price: Swift.String,
                qty: Swift.String,
                qty_available: Swift.String? = nil,
                side: Swift.String,
                market_value: Swift.String,
                cost_basis: Swift.String,
                unrealized_pl: Swift.String,
                unrealized_plpc: Swift.String,
                unrealized_intraday_pl: Swift.String,
                unrealized_intraday_plpc: Swift.String,
                current_price: Swift.String,
                lastday_price: Swift.String,
                change_today: Swift.String,
                asset_marginable: Swift.Bool
            ) {
                self.asset_id = asset_id
                self.symbol = symbol
                self.exchange = exchange
                self.asset_class = asset_class
                self.avg_entry_price = avg_entry_price
                self.qty = qty
                self.qty_available = qty_available
                self.side = side
                self.market_value = market_value
                self.cost_basis = cost_basis
                self.unrealized_pl = unrealized_pl
                self.unrealized_plpc = unrealized_plpc
                self.unrealized_intraday_pl = unrealized_intraday_pl
                self.unrealized_intraday_plpc = unrealized_intraday_plpc
                self.current_price = current_price
                self.lastday_price = lastday_price
                self.change_today = change_today
                self.asset_marginable = asset_marginable
            }
            public enum CodingKeys: String, CodingKey {
                case asset_id
                case symbol
                case exchange
                case asset_class
                case avg_entry_price
                case qty
                case qty_available
                case side
                case market_value
                case cost_basis
                case unrealized_pl
                case unrealized_plpc
                case unrealized_intraday_pl
                case unrealized_intraday_plpc
                case current_price
                case lastday_price
                case change_today
                case asset_marginable
            }
        }
        /// The watchlist API provides CRUD operation for the account’s watchlist. An account can have multiple watchlists and each is uniquely identified by id but can also be addressed by user-defined name. Each watchlist is an ordered list of assets.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Watchlist`.
        public struct Watchlist: Codable, Hashable, Sendable {
            /// watchlist id
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/id`.
            public var id: Swift.String
            /// account ID
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/account_id`.
            public var account_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Watchlist/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Watchlist/updated_at`.
            public var updated_at: Foundation.Date
            /// user-defined watchlist name (up to 64 characters)
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/name`.
            public var name: Swift.String
            /// the content of this watchlist, in the order as registered by the client
            ///
            /// - Remark: Generated from `#/components/schemas/Watchlist/assets`.
            public var assets: [Components.Schemas.Assets]?
            /// Creates a new `Watchlist`.
            ///
            /// - Parameters:
            ///   - id: watchlist id
            ///   - account_id: account ID
            ///   - created_at:
            ///   - updated_at:
            ///   - name: user-defined watchlist name (up to 64 characters)
            ///   - assets: the content of this watchlist, in the order as registered by the client
            public init(
                id: Swift.String,
                account_id: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                name: Swift.String,
                assets: [Components.Schemas.Assets]? = nil
            ) {
                self.id = id
                self.account_id = account_id
                self.created_at = created_at
                self.updated_at = updated_at
                self.name = name
                self.assets = assets
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account_id
                case created_at
                case updated_at
                case name
                case assets
            }
        }
        /// - Remark: Generated from `#/components/schemas/Calendar`.
        public struct Calendar: Codable, Hashable, Sendable {
            /// Date string in “%Y-%m-%d” format
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/date`.
            public var date: Swift.String
            /// The time the market opens at on this date in “%H:%M” format
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/open`.
            public var open: Swift.String
            /// The time the market closes at on this date in “%H:%M” format
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/close`.
            public var close: Swift.String
            /// - Remark: Generated from `#/components/schemas/Calendar/session_open`.
            public var session_open: Swift.String
            /// - Remark: Generated from `#/components/schemas/Calendar/session_close`.
            public var session_close: Swift.String
            /// Creates a new `Calendar`.
            ///
            /// - Parameters:
            ///   - date: Date string in “%Y-%m-%d” format
            ///   - open: The time the market opens at on this date in “%H:%M” format
            ///   - close: The time the market closes at on this date in “%H:%M” format
            ///   - session_open:
            ///   - session_close:
            public init(
                date: Swift.String,
                open: Swift.String,
                close: Swift.String,
                session_open: Swift.String,
                session_close: Swift.String
            ) {
                self.date = date
                self.open = open
                self.close = close
                self.session_open = session_open
                self.session_close = session_close
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case open
                case close
                case session_open
                case session_close
            }
        }
        /// - Remark: Generated from `#/components/schemas/Clock`.
        public struct Clock: Codable, Hashable, Sendable {
            /// Current timestamp
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/timestamp`.
            public var timestamp: Foundation.Date?
            /// Whether or not the market is open
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/is_open`.
            public var is_open: Swift.Bool?
            /// Next Market open timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/next_open`.
            public var next_open: Foundation.Date?
            /// Next market close timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/Clock/next_close`.
            public var next_close: Foundation.Date?
            /// Creates a new `Clock`.
            ///
            /// - Parameters:
            ///   - timestamp: Current timestamp
            ///   - is_open: Whether or not the market is open
            ///   - next_open: Next Market open timestamp
            ///   - next_close: Next market close timestamp
            public init(
                timestamp: Foundation.Date? = nil,
                is_open: Swift.Bool? = nil,
                next_open: Foundation.Date? = nil,
                next_close: Foundation.Date? = nil
            ) {
                self.timestamp = timestamp
                self.is_open = is_open
                self.next_open = next_open
                self.next_close = next_close
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case is_open
                case next_open
                case next_close
            }
        }
        /// - Remark: Generated from `#/components/schemas/PortfolioHistory`.
        public struct PortfolioHistory: Codable, Hashable, Sendable {
            /// time of each data element, left-labeled (the beginning of time window)
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/timestamp`.
            public var timestamp: [Swift.Int]?
            /// equity value of the account in dollar amount as of the end of each time window
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/equity`.
            public var equity: [Swift.Double]?
            /// profit/loss in dollar from the base value
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/profit_loss`.
            public var profit_loss: [Swift.Double]?
            /// profit/loss in percentage from the base value
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/profit_loss_pct`.
            public var profit_loss_pct: [Swift.Double]?
            /// basis in dollar of the profit loss calculation
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/base_value`.
            public var base_value: Swift.Double?
            /// time window size of each data element
            ///
            /// - Remark: Generated from `#/components/schemas/PortfolioHistory/timeframe`.
            public var timeframe: Swift.String?
            /// Creates a new `PortfolioHistory`.
            ///
            /// - Parameters:
            ///   - timestamp: time of each data element, left-labeled (the beginning of time window)
            ///   - equity: equity value of the account in dollar amount as of the end of each time window
            ///   - profit_loss: profit/loss in dollar from the base value
            ///   - profit_loss_pct: profit/loss in percentage from the base value
            ///   - base_value: basis in dollar of the profit loss calculation
            ///   - timeframe: time window size of each data element
            public init(
                timestamp: [Swift.Int]? = nil,
                equity: [Swift.Double]? = nil,
                profit_loss: [Swift.Double]? = nil,
                profit_loss_pct: [Swift.Double]? = nil,
                base_value: Swift.Double? = nil,
                timeframe: Swift.String? = nil
            ) {
                self.timestamp = timestamp
                self.equity = equity
                self.profit_loss = profit_loss
                self.profit_loss_pct = profit_loss_pct
                self.base_value = base_value
                self.timeframe = timeframe
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case equity
                case profit_loss
                case profit_loss_pct
                case base_value
                case timeframe
            }
        }
        /// Represents the current exchanges Alpaca supports. List is currently:
        ///
        /// - AMEX
        /// - ARCA
        /// - BATS
        /// - NYSE
        /// - NASDAQ
        /// - NYSEARCA
        /// - OTC
        ///
        /// - Remark: Generated from `#/components/schemas/Exchange`.
        @frozen public enum Exchange: String, Codable, Hashable, Sendable {
            case AMEX = "AMEX"
            case ARCA = "ARCA"
            case BATS = "BATS"
            case NYSE = "NYSE"
            case NASDAQ = "NASDAQ"
            case NYSEARCA = "NYSEARCA"
            case OTC = "OTC"
        }
        /// Represents the result of a request to cancel and order
        ///
        /// - Remark: Generated from `#/components/schemas/CanceledOrderResponse`.
        public struct CanceledOrderResponse: Codable, Hashable, Sendable {
            /// orderId
            ///
            /// - Remark: Generated from `#/components/schemas/CanceledOrderResponse/id`.
            public var id: Swift.String?
            /// http response code
            ///
            /// - Remark: Generated from `#/components/schemas/CanceledOrderResponse/status`.
            public var status: Swift.Int?
            /// Creates a new `CanceledOrderResponse`.
            ///
            /// - Parameters:
            ///   - id: orderId
            ///   - status: http response code
            public init(
                id: Swift.String? = nil,
                status: Swift.Int? = nil
            ) {
                self.id = id
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case status
            }
        }
        /// Represents a request to patch an order.
        ///
        /// - Remark: Generated from `#/components/schemas/PatchOrderRequest`.
        public struct PatchOrderRequest: Codable, Hashable, Sendable {
            /// number of shares to trade
            ///
            /// - Remark: Generated from `#/components/schemas/PatchOrderRequest/qty`.
            public var qty: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PatchOrderRequest/time_in_force`.
            public var time_in_force: Components.Schemas.TimeInForce?
            /// required if original order type is limit or stop_limit
            ///
            /// - Remark: Generated from `#/components/schemas/PatchOrderRequest/limit_price`.
            public var limit_price: Swift.String?
            /// required if original order type is limit or stop_limit
            ///
            /// - Remark: Generated from `#/components/schemas/PatchOrderRequest/stop_price`.
            public var stop_price: Swift.String?
            /// the new value of the trail_price or trail_percent value (works only for type=“trailing_stop”)
            ///
            /// - Remark: Generated from `#/components/schemas/PatchOrderRequest/trail`.
            public var trail: Swift.String?
            /// A unique identifier for the order. Automatically generated if not sent.
            ///
            /// - Remark: Generated from `#/components/schemas/PatchOrderRequest/client_order_id`.
            public var client_order_id: Swift.String?
            /// Creates a new `PatchOrderRequest`.
            ///
            /// - Parameters:
            ///   - qty: number of shares to trade
            ///   - time_in_force:
            ///   - limit_price: required if original order type is limit or stop_limit
            ///   - stop_price: required if original order type is limit or stop_limit
            ///   - trail: the new value of the trail_price or trail_percent value (works only for type=“trailing_stop”)
            ///   - client_order_id: A unique identifier for the order. Automatically generated if not sent.
            public init(
                qty: Swift.String? = nil,
                time_in_force: Components.Schemas.TimeInForce? = nil,
                limit_price: Swift.String? = nil,
                stop_price: Swift.String? = nil,
                trail: Swift.String? = nil,
                client_order_id: Swift.String? = nil
            ) {
                self.qty = qty
                self.time_in_force = time_in_force
                self.limit_price = limit_price
                self.stop_price = stop_price
                self.trail = trail
                self.client_order_id = client_order_id
            }
            public enum CodingKeys: String, CodingKey {
                case qty
                case time_in_force
                case limit_price
                case stop_price
                case trail
                case client_order_id
            }
        }
        /// Represents the result of asking the api to close a position. 
        ///
        /// - Remark: Generated from `#/components/schemas/PositionClosedReponse`.
        public struct PositionClosedReponse: Codable, Hashable, Sendable {
            /// Symbol name of the asset
            ///
            /// - Remark: Generated from `#/components/schemas/PositionClosedReponse/symbol`.
            public var symbol: Swift.String
            /// Http status code for the attempt to close this position
            ///
            /// - Remark: Generated from `#/components/schemas/PositionClosedReponse/status`.
            public var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/PositionClosedReponse/body`.
            public var body: Components.Schemas.Order?
            /// Creates a new `PositionClosedReponse`.
            ///
            /// - Parameters:
            ///   - symbol: Symbol name of the asset
            ///   - status: Http status code for the attempt to close this position
            ///   - body:
            public init(
                symbol: Swift.String,
                status: Swift.String,
                body: Components.Schemas.Order? = nil
            ) {
                self.symbol = symbol
                self.status = status
                self.body = body
            }
            public enum CodingKeys: String, CodingKey {
                case symbol
                case status
                case body
            }
        }
        /// Request format used for creating a new watchlist or updating an existing watchlist with a set of assets and name.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateWatchlistRequest`.
        public struct UpdateWatchlistRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateWatchlistRequest/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/UpdateWatchlistRequest/symbols`.
            public var symbols: [Swift.String?]?
            /// Creates a new `UpdateWatchlistRequest`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - symbols:
            public init(
                name: Swift.String,
                symbols: [Swift.String?]? = nil
            ) {
                self.name = name
                self.symbols = symbols
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case symbols
            }
        }
        /// Append an asset for the symbol to the end of watchlist asset list
        ///
        /// - Remark: Generated from `#/components/schemas/AddAssetToWatchlistRequest`.
        public struct AddAssetToWatchlistRequest: Codable, Hashable, Sendable {
            /// symbol name to append to watchlist
            ///
            /// - Remark: Generated from `#/components/schemas/AddAssetToWatchlistRequest/symbol`.
            public var symbol: Swift.String?
            /// Creates a new `AddAssetToWatchlistRequest`.
            ///
            /// - Parameters:
            ///   - symbol: symbol name to append to watchlist
            public init(symbol: Swift.String? = nil) {
                self.symbol = symbol
            }
            public enum CodingKeys: String, CodingKey {
                case symbol
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get account
    ///
    /// Returns the account associated with the API key.
    ///
    /// - Remark: HTTP `GET /v2/account`.
    /// - Remark: Generated from `#/paths//v2/account/get(getAccount)`.
    public enum getAccount {
        public static let id: Swift.String = "getAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/account/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getAccount.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/account/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/account/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Account)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Account {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v2/account/get(getAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// All Orders
    ///
    /// Retrieves a list of orders for the account, filtered by the supplied query parameters.
    ///
    /// - Remark: HTTP `GET /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/get(getAllOrders)`.
    public enum getAllOrders {
        public static let id: Swift.String = "getAllOrders"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/orders/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Order status to be queried. open, closed or all. Defaults to open.
                ///
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/status`.
                public var status: Operations.getAllOrders.Input.Query.statusPayload?
                /// The maximum number of orders in response. Defaults to 50 and max is 500.
                ///
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/limit`.
                public var limit: Swift.Int?
                /// The response will include only ones submitted after this timestamp (exclusive.)
                ///
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/after`.
                public var after: Swift.String?
                /// The response will include only ones submitted until this timestamp (exclusive.)
                ///
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/until`.
                public var until: Swift.String?
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/direction`.
                public var direction: Operations.getAllOrders.Input.Query.directionPayload?
                /// If true, the result will roll up multi-leg orders under the legs field of primary order.
                ///
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/nested`.
                public var nested: Swift.Bool?
                /// A comma-separated list of symbols to filter by (ex. “AAPL,TSLA,MSFT”). A currency pair is required for crypto orders (ex. “BTCUSD,BCHUSD,LTCUSD,ETCUSD”).
                ///
                /// - Remark: Generated from `#/paths/v2/orders/GET/query/symbols`.
                public var symbols: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - status: Order status to be queried. open, closed or all. Defaults to open.
                ///   - limit: The maximum number of orders in response. Defaults to 50 and max is 500.
                ///   - after: The response will include only ones submitted after this timestamp (exclusive.)
                ///   - until: The response will include only ones submitted until this timestamp (exclusive.)
                ///   - direction: The chronological order of response based on the submission time. asc or desc. Defaults to desc.
                ///   - nested: If true, the result will roll up multi-leg orders under the legs field of primary order.
                ///   - symbols: A comma-separated list of symbols to filter by (ex. “AAPL,TSLA,MSFT”). A currency pair is required for crypto orders (ex. “BTCUSD,BCHUSD,LTCUSD,ETCUSD”).
                public init(
                    status: Operations.getAllOrders.Input.Query.statusPayload? = nil,
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil,
                    until: Swift.String? = nil,
                    direction: Operations.getAllOrders.Input.Query.directionPayload? = nil,
                    nested: Swift.Bool? = nil,
                    symbols: Swift.String? = nil
                ) {
                    self.status = status
                    self.limit = limit
                    self.after = after
                    self.until = until
                    self.direction = direction
                    self.nested = nested
                    self.symbols = symbols
                }
            }
            public var query: Operations.getAllOrders.Input.Query
            /// - Remark: Generated from `#/paths/v2/orders/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllOrders.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllOrders.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAllOrders.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAllOrders.Input.Query = .init(),
                headers: Operations.getAllOrders.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/orders/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Order])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Order] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllOrders.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllOrders.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// An array of Order objects
            ///
            /// - Remark: Generated from `#/paths//v2/orders/get(getAllOrders)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllOrders.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllOrders.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Order
    ///
    /// Places a new order for the given account. An order request may be rejected if the account is not authorized for trading, or if the tradable balance is insufficient to fill the order..
    ///
    /// - Remark: HTTP `POST /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/post(postOrder)`.
    public enum postOrder {
        public static let id: Swift.String = "postOrder"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/orders/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postOrder.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postOrder.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postOrder.Input.Headers
            /// - Remark: Generated from `#/paths/v2/orders/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Order)
            }
            public var body: Operations.postOrder.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.postOrder.Input.Headers = .init(),
                body: Operations.postOrder.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/orders/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.postOrder.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.postOrder.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/orders/post(postOrder)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.postOrder.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.postOrder.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Forbidden
            ///
            /// Buying power or shares is not sufficient.
            ///
            /// - Remark: Generated from `#/paths//v2/orders/post(postOrder)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.postOrder.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.postOrder.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Unprocessable
            ///
            /// Input parameters are not recognized.
            ///
            /// - Remark: Generated from `#/paths//v2/orders/post(postOrder)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.postOrder.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.postOrder.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// All Orders
    ///
    /// Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v2/orders`.
    /// - Remark: Generated from `#/paths//v2/orders/delete(deleteAllOrders)`.
    public enum deleteAllOrders {
        public static let id: Swift.String = "deleteAllOrders"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/orders/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAllOrders.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAllOrders.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteAllOrders.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.deleteAllOrders.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Code207: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/DELETE/responses/207/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/orders/DELETE/responses/207/content/application\/json`.
                    case json([Components.Schemas.CanceledOrderResponse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CanceledOrderResponse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteAllOrders.Output.Code207.Body
                /// Creates a new `Code207`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteAllOrders.Output.Code207.Body) {
                    self.body = body
                }
            }
            /// Multi-Status with body.
            ///
            /// an array of objects that include the order id and http status code for each status request.
            ///
            /// - Remark: Generated from `#/paths//v2/orders/delete(deleteAllOrders)/responses/207`.
            ///
            /// HTTP response code: `207 code207`.
            case code207(Operations.deleteAllOrders.Output.Code207)
            /// The associated value of the enum case if `self` is `.code207`.
            ///
            /// - Throws: An error if `self` is not `.code207`.
            /// - SeeAlso: `.code207`.
            public var code207: Operations.deleteAllOrders.Output.Code207 {
                get throws {
                    switch self {
                    case let .code207(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "code207",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                public init() {}
            }
            /// Failed to cancel order.
            ///
            /// - Remark: Generated from `#/paths//v2/orders/delete(deleteAllOrders)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.deleteAllOrders.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.deleteAllOrders.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Order by Order ID
    ///
    /// Retrieves a single order for the given order_id.
    ///
    /// - Remark: HTTP `GET /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/get(getOrderByOrderID)`.
    public enum getOrderByOrderID {
        public static let id: Swift.String = "getOrderByOrderID"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/orders/{order_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// order id
                ///
                /// - Remark: Generated from `#/paths/v2/orders/{order_id}/GET/path/order_id`.
                public var order_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - order_id: order id
                public init(order_id: Swift.String) {
                    self.order_id = order_id
                }
            }
            public var path: Operations.getOrderByOrderID.Input.Path
            /// - Remark: Generated from `#/paths/v2/orders/{order_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If true, the result will roll up multi-leg orders under the legs field of primary order.
                ///
                /// - Remark: Generated from `#/paths/v2/orders/{order_id}/GET/query/nested`.
                public var nested: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nested: If true, the result will roll up multi-leg orders under the legs field of primary order.
                public init(nested: Swift.Bool? = nil) {
                    self.nested = nested
                }
            }
            public var query: Operations.getOrderByOrderID.Input.Query
            /// - Remark: Generated from `#/paths/v2/orders/{order_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOrderByOrderID.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOrderByOrderID.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getOrderByOrderID.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getOrderByOrderID.Input.Path,
                query: Operations.getOrderByOrderID.Input.Query = .init(),
                headers: Operations.getOrderByOrderID.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/{order_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/orders/{order_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getOrderByOrderID.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getOrderByOrderID.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/orders/{order_id}/get(getOrderByOrderID)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getOrderByOrderID.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getOrderByOrderID.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Order
    ///
    /// Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.
    ///
    /// A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel.
    ///
    /// While an order is being replaced, buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.
    ///
    ///
    /// - Remark: HTTP `PATCH /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/patch(patchOrderByOrderId)`.
    public enum patchOrderByOrderId {
        public static let id: Swift.String = "patchOrderByOrderId"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/orders/{order_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// order id
                ///
                /// - Remark: Generated from `#/paths/v2/orders/{order_id}/PATCH/path/order_id`.
                public var order_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - order_id: order id
                public init(order_id: Swift.String) {
                    self.order_id = order_id
                }
            }
            public var path: Operations.patchOrderByOrderId.Input.Path
            /// - Remark: Generated from `#/paths/v2/orders/{order_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchOrderByOrderId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchOrderByOrderId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.patchOrderByOrderId.Input.Headers
            /// - Remark: Generated from `#/paths/v2/orders/{order_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/{order_id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.PatchOrderRequest)
            }
            public var body: Operations.patchOrderByOrderId.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.patchOrderByOrderId.Input.Path,
                headers: Operations.patchOrderByOrderId.Input.Headers = .init(),
                body: Operations.patchOrderByOrderId.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/orders/{order_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/orders/{order_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.patchOrderByOrderId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.patchOrderByOrderId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// The new Order object with the new order ID.
            ///
            /// - Remark: Generated from `#/paths//v2/orders/{order_id}/patch(patchOrderByOrderId)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.patchOrderByOrderId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.patchOrderByOrderId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Order by Order ID
    ///
    /// Attempts to cancel an Open Order. If the order is no longer cancelable, the request will be rejected with status 422; otherwise accepted with return status 204.
    ///
    /// - Remark: HTTP `DELETE /v2/orders/{order_id}`.
    /// - Remark: Generated from `#/paths//v2/orders/{order_id}/delete(deleteOrderByOrderID)`.
    public enum deleteOrderByOrderID {
        public static let id: Swift.String = "deleteOrderByOrderID"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/orders/{order_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// order id
                ///
                /// - Remark: Generated from `#/paths/v2/orders/{order_id}/DELETE/path/order_id`.
                public var order_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - order_id: order id
                public init(order_id: Swift.String) {
                    self.order_id = order_id
                }
            }
            public var path: Operations.deleteOrderByOrderID.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.deleteOrderByOrderID.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content
            ///
            /// - Remark: Generated from `#/paths//v2/orders/{order_id}/delete(deleteOrderByOrderID)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteOrderByOrderID.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteOrderByOrderID.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// The order status is not cancelable.
            ///
            /// - Remark: Generated from `#/paths//v2/orders/{order_id}/delete(deleteOrderByOrderID)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.deleteOrderByOrderID.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.deleteOrderByOrderID.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// All Open Positions
    ///
    /// The positions API provides information about an account’s current open positions. The response will include information such as cost basis, shares traded, and market value, which will be updated live as price information is updated. Once a position is closed, it will no longer be queryable through this API
    ///
    /// Retrieves a list of the account’s open positions
    ///
    /// - Remark: HTTP `GET /v2/positions`.
    /// - Remark: Generated from `#/paths//v2/positions/get(getAllOpenPositions)`.
    public enum getAllOpenPositions {
        public static let id: Swift.String = "getAllOpenPositions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/positions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllOpenPositions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllOpenPositions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAllOpenPositions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getAllOpenPositions.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/positions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/positions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Position])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Position] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllOpenPositions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllOpenPositions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/positions/get(getAllOpenPositions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllOpenPositions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllOpenPositions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// All Positions
    ///
    /// Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.
    ///
    /// - Remark: HTTP `DELETE /v2/positions`.
    /// - Remark: Generated from `#/paths//v2/positions/delete(deleteAllOpenPositions)`.
    public enum deleteAllOpenPositions {
        public static let id: Swift.String = "deleteAllOpenPositions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/positions/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// If true is specified, cancel all open orders before liquidating all positions.
                ///
                /// - Remark: Generated from `#/paths/v2/positions/DELETE/query/cancel_orders`.
                public var cancel_orders: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cancel_orders: If true is specified, cancel all open orders before liquidating all positions.
                public init(cancel_orders: Swift.Bool? = nil) {
                    self.cancel_orders = cancel_orders
                }
            }
            public var query: Operations.deleteAllOpenPositions.Input.Query
            /// - Remark: Generated from `#/paths/v2/positions/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAllOpenPositions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAllOpenPositions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteAllOpenPositions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.deleteAllOpenPositions.Input.Query = .init(),
                headers: Operations.deleteAllOpenPositions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Code207: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/positions/DELETE/responses/207/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/positions/DELETE/responses/207/content/application\/json`.
                    case json([Components.Schemas.PositionClosedReponse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.PositionClosedReponse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteAllOpenPositions.Output.Code207.Body
                /// Creates a new `Code207`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteAllOpenPositions.Output.Code207.Body) {
                    self.body = body
                }
            }
            /// Multi-Status with body.
            ///
            /// an array of PositionClosed responses
            ///
            /// - Remark: Generated from `#/paths//v2/positions/delete(deleteAllOpenPositions)/responses/207`.
            ///
            /// HTTP response code: `207 code207`.
            case code207(Operations.deleteAllOpenPositions.Output.Code207)
            /// The associated value of the enum case if `self` is `.code207`.
            ///
            /// - Throws: An error if `self` is not `.code207`.
            /// - SeeAlso: `.code207`.
            public var code207: Operations.deleteAllOpenPositions.Output.Code207 {
                get throws {
                    switch self {
                    case let .code207(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "code207",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                public init() {}
            }
            /// Failed to liquidate
            ///
            /// - Remark: Generated from `#/paths//v2/positions/delete(deleteAllOpenPositions)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.deleteAllOpenPositions.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.deleteAllOpenPositions.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Open Position
    ///
    /// Retrieves the account’s open position for the given symbol or assetId.
    ///
    /// - Remark: HTTP `GET /v2/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/get(getOpenPosition)`.
    public enum getOpenPosition {
        public static let id: Swift.String = "getOpenPosition"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// symbol or assetId
                ///
                /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/GET/path/symbol_or_asset_id`.
                public var symbol_or_asset_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - symbol_or_asset_id: symbol or assetId
                public init(symbol_or_asset_id: Swift.String) {
                    self.symbol_or_asset_id = symbol_or_asset_id
                }
            }
            public var path: Operations.getOpenPosition.Input.Path
            /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOpenPosition.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getOpenPosition.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getOpenPosition.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getOpenPosition.Input.Path,
                headers: Operations.getOpenPosition.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Position)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Position {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getOpenPosition.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getOpenPosition.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/get(getOpenPosition)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getOpenPosition.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getOpenPosition.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Position
    ///
    /// Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.
    ///
    /// - Remark: HTTP `DELETE /v2/positions/{symbol_or_asset_id}`.
    /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/delete(deleteOpenPosition)`.
    public enum deleteOpenPosition {
        public static let id: Swift.String = "deleteOpenPosition"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// symbol or assetId
                ///
                /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/path/symbol_or_asset_id`.
                public var symbol_or_asset_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - symbol_or_asset_id: symbol or assetId
                public init(symbol_or_asset_id: Swift.String) {
                    self.symbol_or_asset_id = symbol_or_asset_id
                }
            }
            public var path: Operations.deleteOpenPosition.Input.Path
            /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// the number of shares to liquidate. Can accept up to 9 decimal points. Cannot work with percentage
                ///
                /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/query/qty`.
                public var qty: Swift.Double?
                /// percentage of position to liquidate. Must be between 0 and 100. Would only sell fractional if position is originally fractional. Can accept up to 9 decimal points. Cannot work with qty
                ///
                /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/query/percentage`.
                public var percentage: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - qty: the number of shares to liquidate. Can accept up to 9 decimal points. Cannot work with percentage
                ///   - percentage: percentage of position to liquidate. Must be between 0 and 100. Would only sell fractional if position is originally fractional. Can accept up to 9 decimal points. Cannot work with qty
                public init(
                    qty: Swift.Double? = nil,
                    percentage: Swift.Double? = nil
                ) {
                    self.qty = qty
                    self.percentage = percentage
                }
            }
            public var query: Operations.deleteOpenPosition.Input.Query
            /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteOpenPosition.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteOpenPosition.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteOpenPosition.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.deleteOpenPosition.Input.Path,
                query: Operations.deleteOpenPosition.Input.Query = .init(),
                headers: Operations.deleteOpenPosition.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/positions/{symbol_or_asset_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteOpenPosition.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteOpenPosition.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// Returns the order created to close out this position
            ///
            /// - Remark: Generated from `#/paths//v2/positions/{symbol_or_asset_id}/delete(deleteOpenPosition)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteOpenPosition.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteOpenPosition.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Account Portfolio History
    ///
    /// Returns timeseries data about equity and profit/loss (P/L) of the account in requested timespan.
    ///
    /// - Remark: HTTP `GET /v2/account/portfolio/history`.
    /// - Remark: Generated from `#/paths//v2/account/portfolio/history/get(getAccountPortfolioHistory)`.
    public enum getAccountPortfolioHistory {
        public static let id: Swift.String = "getAccountPortfolioHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The duration of the data in <number> + <unit>, such as 1D, where <unit> can be D for day, W for week, M for month and A for year. Defaults to 1M.
                ///
                /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/query/period`.
                public var period: Swift.String?
                /// The resolution of time window. 1Min, 5Min, 15Min, 1H, or 1D. If omitted, 1Min for less than 7 days period, 15Min for less than 30 days, or otherwise 1D.
                ///
                /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/query/timeframe`.
                public var timeframe: Swift.String?
                /// The date the data is returned up to, in “YYYY-MM-DD” format. Defaults to the current market date (rolls over at the market open if extended_hours is false, otherwise at 7am ET)
                ///
                /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/query/date_end`.
                public var date_end: Swift.String?
                /// If true, include extended hours in the result. This is effective only for timeframe less than 1D.
                ///
                /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/query/extended_hours`.
                public var extended_hours: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - period: The duration of the data in <number> + <unit>, such as 1D, where <unit> can be D for day, W for week, M for month and A for year. Defaults to 1M.
                ///   - timeframe: The resolution of time window. 1Min, 5Min, 15Min, 1H, or 1D. If omitted, 1Min for less than 7 days period, 15Min for less than 30 days, or otherwise 1D.
                ///   - date_end: The date the data is returned up to, in “YYYY-MM-DD” format. Defaults to the current market date (rolls over at the market open if extended_hours is false, otherwise at 7am ET)
                ///   - extended_hours: If true, include extended hours in the result. This is effective only for timeframe less than 1D.
                public init(
                    period: Swift.String? = nil,
                    timeframe: Swift.String? = nil,
                    date_end: Swift.String? = nil,
                    extended_hours: Swift.String? = nil
                ) {
                    self.period = period
                    self.timeframe = timeframe
                    self.date_end = date_end
                    self.extended_hours = extended_hours
                }
            }
            public var query: Operations.getAccountPortfolioHistory.Input.Query
            /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountPortfolioHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountPortfolioHistory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountPortfolioHistory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAccountPortfolioHistory.Input.Query = .init(),
                headers: Operations.getAccountPortfolioHistory.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/account/portfolio/history/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PortfolioHistory)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PortfolioHistory {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountPortfolioHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountPortfolioHistory.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/account/portfolio/history/get(getAccountPortfolioHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountPortfolioHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountPortfolioHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Watchlists
    ///
    /// Returns the list of watchlists registered under the account.
    ///
    /// - Remark: HTTP `GET /v2/watchlists`.
    /// - Remark: Generated from `#/paths//v2/watchlists/get(getWatchlists)`.
    public enum getWatchlists {
        public static let id: Swift.String = "getWatchlists"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlists.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlists.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getWatchlists.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getWatchlists.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Watchlist])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Watchlist] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getWatchlists.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getWatchlists.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists/get(getWatchlists)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getWatchlists.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getWatchlists.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Watchlist
    ///
    /// Create a new watchlist with initial set of assets.
    ///
    /// - Remark: HTTP `POST /v2/watchlists`.
    /// - Remark: Generated from `#/paths//v2/watchlists/post(postWatchlist)`.
    public enum postWatchlist {
        public static let id: Swift.String = "postWatchlist"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postWatchlist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postWatchlist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postWatchlist.Input.Headers
            /// - Remark: Generated from `#/paths/v2/watchlists/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UpdateWatchlistRequest)
            }
            public var body: Operations.postWatchlist.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.postWatchlist.Input.Headers = .init(),
                body: Operations.postWatchlist.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.postWatchlist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.postWatchlist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists/post(postWatchlist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.postWatchlist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.postWatchlist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Watchlist by ID
    ///
    /// Returns a watchlist identified by the ID.
    ///
    /// - Remark: HTTP `GET /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/get(getWatchlistById)`.
    public enum getWatchlistById {
        public static let id: Swift.String = "getWatchlistById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// watchlist id
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/GET/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - watchlist_id: watchlist id
                public init(watchlist_id: Swift.String) {
                    self.watchlist_id = watchlist_id
                }
            }
            public var path: Operations.getWatchlistById.Input.Path
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlistById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlistById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getWatchlistById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getWatchlistById.Input.Path,
                headers: Operations.getWatchlistById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getWatchlistById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getWatchlistById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/get(getWatchlistById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getWatchlistById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getWatchlistById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add Asset to Watchlist
    ///
    /// Append an asset for the symbol to the end of watchlist asset list
    ///
    /// - Remark: HTTP `POST /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/post(addAssetToWatchlist)`.
    public enum addAssetToWatchlist {
        public static let id: Swift.String = "addAssetToWatchlist"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// watchlist id
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/POST/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - watchlist_id: watchlist id
                public init(watchlist_id: Swift.String) {
                    self.watchlist_id = watchlist_id
                }
            }
            public var path: Operations.addAssetToWatchlist.Input.Path
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addAssetToWatchlist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addAssetToWatchlist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.addAssetToWatchlist.Input.Headers
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AddAssetToWatchlistRequest)
            }
            public var body: Operations.addAssetToWatchlist.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.addAssetToWatchlist.Input.Path,
                headers: Operations.addAssetToWatchlist.Input.Headers = .init(),
                body: Operations.addAssetToWatchlist.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addAssetToWatchlist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addAssetToWatchlist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/post(addAssetToWatchlist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addAssetToWatchlist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addAssetToWatchlist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update Watchlist By Id
    ///
    /// Update the name and/or content of watchlist
    ///
    /// - Remark: HTTP `PUT /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/put(updateWatchlistById)`.
    public enum updateWatchlistById {
        public static let id: Swift.String = "updateWatchlistById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// watchlist id
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/PUT/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - watchlist_id: watchlist id
                public init(watchlist_id: Swift.String) {
                    self.watchlist_id = watchlist_id
                }
            }
            public var path: Operations.updateWatchlistById.Input.Path
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateWatchlistById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateWatchlistById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.updateWatchlistById.Input.Headers
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.UpdateWatchlistRequest)
            }
            public var body: Operations.updateWatchlistById.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.updateWatchlistById.Input.Path,
                headers: Operations.updateWatchlistById.Input.Headers = .init(),
                body: Operations.updateWatchlistById.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateWatchlistById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateWatchlistById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/put(updateWatchlistById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateWatchlistById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.updateWatchlistById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete Watchlist By Id
    ///
    /// Delete a watchlist. This is a permanent deletion.
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists/{watchlist_id}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/delete(deleteWatchlistById)`.
    public enum deleteWatchlistById {
        public static let id: Swift.String = "deleteWatchlistById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// watchlist id
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/DELETE/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - watchlist_id: watchlist id
                public init(watchlist_id: Swift.String) {
                    self.watchlist_id = watchlist_id
                }
            }
            public var path: Operations.deleteWatchlistById.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.deleteWatchlistById.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/delete(deleteWatchlistById)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteWatchlistById.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteWatchlistById.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get Watchlist by Name
    ///
    /// Returns a watchlist by name
    ///
    /// - Remark: HTTP `GET /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/get(getWatchlistByName)`.
    public enum getWatchlistByName {
        public static let id: Swift.String = "getWatchlistByName"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/GET/query`.
            public struct Query: Sendable, Hashable {
                /// name of the watchlist
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: name of the watchlist
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.getWatchlistByName.Input.Query
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlistByName.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWatchlistByName.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getWatchlistByName.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getWatchlistByName.Input.Query,
                headers: Operations.getWatchlistByName.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists:by_name/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getWatchlistByName.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getWatchlistByName.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists:by_name/get(getWatchlistByName)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getWatchlistByName.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getWatchlistByName.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add Asset to Watchlist By Name
    ///
    /// Append an asset for the symbol to the end of watchlist asset list
    ///
    /// - Remark: HTTP `POST /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/post(addAssetToWatchlistByName)`.
    public enum addAssetToWatchlistByName {
        public static let id: Swift.String = "addAssetToWatchlistByName"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/POST/query`.
            public struct Query: Sendable, Hashable {
                /// name of the watchlist
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/POST/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: name of the watchlist
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.addAssetToWatchlistByName.Input.Query
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addAssetToWatchlistByName.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addAssetToWatchlistByName.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.addAssetToWatchlistByName.Input.Headers
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AddAssetToWatchlistRequest)
            }
            public var body: Operations.addAssetToWatchlistByName.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.addAssetToWatchlistByName.Input.Query,
                headers: Operations.addAssetToWatchlistByName.Input.Headers = .init(),
                body: Operations.addAssetToWatchlistByName.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists:by_name/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addAssetToWatchlistByName.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addAssetToWatchlistByName.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists:by_name/post(addAssetToWatchlistByName)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addAssetToWatchlistByName.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addAssetToWatchlistByName.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update Watchlist By Name
    ///
    /// Update the name and/or content of watchlist
    ///
    /// - Remark: HTTP `PUT /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/put(updateWatchlistByName)`.
    public enum updateWatchlistByName {
        public static let id: Swift.String = "updateWatchlistByName"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// name of the watchlist
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/PUT/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: name of the watchlist
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.updateWatchlistByName.Input.Query
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateWatchlistByName.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateWatchlistByName.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.updateWatchlistByName.Input.Headers
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.UpdateWatchlistRequest)
            }
            public var body: Operations.updateWatchlistByName.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.updateWatchlistByName.Input.Query,
                headers: Operations.updateWatchlistByName.Input.Headers = .init(),
                body: Operations.updateWatchlistByName.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists:by_name/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateWatchlistByName.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateWatchlistByName.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists:by_name/put(updateWatchlistByName)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateWatchlistByName.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.updateWatchlistByName.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete Watchlist By Name
    ///
    /// Delete a watchlist. This is a permanent deletion.
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists:by_name`.
    /// - Remark: Generated from `#/paths//v2/watchlists:by_name/delete(deleteWatchlistByName)`.
    public enum deleteWatchlistByName {
        public static let id: Swift.String = "deleteWatchlistByName"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists:by_name/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// name of the watchlist
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists:by_name/DELETE/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: name of the watchlist
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.deleteWatchlistByName.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.deleteWatchlistByName.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists:by_name/delete(deleteWatchlistByName)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteWatchlistByName.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteWatchlistByName.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Symbol from Watchlist
    ///
    /// Delete one entry for an asset by symbol name
    ///
    /// - Remark: HTTP `DELETE /v2/watchlists/{watchlist_id}/{symbol}`.
    /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/{symbol}/delete(removeAssetFromWatchlist)`.
    public enum removeAssetFromWatchlist {
        public static let id: Swift.String = "removeAssetFromWatchlist"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/{symbol}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Watchlist ID
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/{symbol}/DELETE/path/watchlist_id`.
                public var watchlist_id: Swift.String
                /// symbol name to remove from the watchlist content
                ///
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/{symbol}/DELETE/path/symbol`.
                public var symbol: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - watchlist_id: Watchlist ID
                ///   - symbol: symbol name to remove from the watchlist content
                public init(
                    watchlist_id: Swift.String,
                    symbol: Swift.String
                ) {
                    self.watchlist_id = watchlist_id
                    self.symbol = symbol
                }
            }
            public var path: Operations.removeAssetFromWatchlist.Input.Path
            /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/{symbol}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.removeAssetFromWatchlist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.removeAssetFromWatchlist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.removeAssetFromWatchlist.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.removeAssetFromWatchlist.Input.Path,
                headers: Operations.removeAssetFromWatchlist.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/{symbol}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/watchlists/{watchlist_id}/{symbol}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.Watchlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Watchlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.removeAssetFromWatchlist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.removeAssetFromWatchlist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returns the updated watchlist
            ///
            /// - Remark: Generated from `#/paths//v2/watchlists/{watchlist_id}/{symbol}/delete(removeAssetFromWatchlist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.removeAssetFromWatchlist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.removeAssetFromWatchlist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Account Configurations
    ///
    /// gets the current account configuration values
    ///
    /// - Remark: HTTP `GET /v2/account/configurations`.
    /// - Remark: Generated from `#/paths//v2/account/configurations/get(getAccountConfig)`.
    public enum getAccountConfig {
        public static let id: Swift.String = "getAccountConfig"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/account/configurations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountConfig.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountConfig.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountConfig.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getAccountConfig.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/account/configurations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/account/configurations/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountConfigurations)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountConfigurations {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountConfig.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountConfig.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/account/configurations/get(getAccountConfig)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountConfig.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountConfig.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Account Configurations
    ///
    /// Updates and returns the current account configuration values
    ///
    /// - Remark: HTTP `PATCH /v2/account/configurations`.
    /// - Remark: Generated from `#/paths//v2/account/configurations/patch(patchAccountConfig)`.
    public enum patchAccountConfig {
        public static let id: Swift.String = "patchAccountConfig"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/account/configurations/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchAccountConfig.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchAccountConfig.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.patchAccountConfig.Input.Headers
            /// - Remark: Generated from `#/paths/v2/account/configurations/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/account/configurations/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.AccountConfigurations)
            }
            public var body: Operations.patchAccountConfig.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.patchAccountConfig.Input.Headers = .init(),
                body: Operations.patchAccountConfig.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/account/configurations/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/account/configurations/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountConfigurations)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountConfigurations {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.patchAccountConfig.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.patchAccountConfig.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v2/account/configurations/patch(patchAccountConfig)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.patchAccountConfig.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.patchAccountConfig.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get account activities of one type
    ///
    /// Returns account activity entries for many types of activities.
    ///
    /// - Remark: HTTP `GET /v2/account/activities`.
    /// - Remark: Generated from `#/paths//v2/account/activities/get(getAccountActivities)`.
    public enum getAccountActivities {
        public static let id: Swift.String = "getAccountActivities"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/account/activities/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The date for which you want to see activities.
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/date`.
                public var date: Foundation.Date?
                /// The response will contain only activities submitted before this date. (Cannot be used with date.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/until`.
                public var until: Foundation.Date?
                /// The response will contain only activities submitted after this date. (Cannot be used with date.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/after`.
                public var after: Foundation.Date?
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// asc or desc (default desc if unspecified.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/direction`.
                public var direction: Operations.getAccountActivities.Input.Query.directionPayload?
                /// The maximum number of entries to return in the response. (See the section on paging above.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/page_size`.
                public var page_size: Swift.Int?
                /// The ID of the end of your current page of results. 
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/page_token`.
                public var page_token: Swift.String?
                /// A comma-separated list of the activity types to include in the response. If unspecified, activities of all types will be returned. See ActivityType model for values
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/query/activity_types`.
                public var activity_types: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - date: The date for which you want to see activities.
                ///   - until: The response will contain only activities submitted before this date. (Cannot be used with date.)
                ///   - after: The response will contain only activities submitted after this date. (Cannot be used with date.)
                ///   - direction: asc or desc (default desc if unspecified.)
                ///   - page_size: The maximum number of entries to return in the response. (See the section on paging above.)
                ///   - page_token: The ID of the end of your current page of results. 
                ///   - activity_types: A comma-separated list of the activity types to include in the response. If unspecified, activities of all types will be returned. See ActivityType model for values
                public init(
                    date: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    after: Foundation.Date? = nil,
                    direction: Operations.getAccountActivities.Input.Query.directionPayload? = nil,
                    page_size: Swift.Int? = nil,
                    page_token: Swift.String? = nil,
                    activity_types: Swift.String? = nil
                ) {
                    self.date = date
                    self.until = until
                    self.after = after
                    self.direction = direction
                    self.page_size = page_size
                    self.page_token = page_token
                    self.activity_types = activity_types
                }
            }
            public var query: Operations.getAccountActivities.Input.Query
            /// - Remark: Generated from `#/paths/v2/account/activities/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountActivities.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAccountActivities.Input.Query = .init(),
                headers: Operations.getAccountActivities.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/account/activities/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// Will be a mix of TradingActivity or NonTradeActivity objects based on what is passed in the activity_types parameter
                    ///
                    /// - Remark: Generated from `#/paths/v2/account/activities/GET/responses/200/content/jsonPayload`.
                    public struct jsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/account/activities/GET/responses/200/content/jsonPayload/value1`.
                        public var value1: Components.Schemas.TradingActivities?
                        /// - Remark: Generated from `#/paths/v2/account/activities/GET/responses/200/content/jsonPayload/value2`.
                        public var value2: Components.Schemas.NonTradeActivities?
                        /// Creates a new `jsonPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Components.Schemas.TradingActivities? = nil,
                            value2: Components.Schemas.NonTradeActivities? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    value1,
                                    value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try value1?.encode(to: encoder)
                            try value2?.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/account/activities/GET/responses/200/content/json`.
                    public typealias jsonPayload = [Operations.getAccountActivities.Output.Ok.Body.jsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/v2/account/activities/GET/responses/200/content/application\/json`.
                    case json(Operations.getAccountActivities.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAccountActivities.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountActivities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountActivities.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// returns an array of Account activities
            ///
            /// - Remark: Generated from `#/paths//v2/account/activities/get(getAccountActivities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountActivities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountActivities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get account activities of one type
    ///
    /// Returns account activity entries for a specific type of activity.
    ///
    /// - Remark: HTTP `GET /v2/account/activities/{activity_type}`.
    /// - Remark: Generated from `#/paths//v2/account/activities/{activity_type}/get(getAccountActivitiesByActivityType)`.
    public enum getAccountActivitiesByActivityType {
        public static let id: Swift.String = "getAccountActivitiesByActivityType"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The activity type you want to view entries for. A list of valid activity types can be found at the bottom of this page.
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/path/activity_type`.
                public var activity_type: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - activity_type: The activity type you want to view entries for. A list of valid activity types can be found at the bottom of this page.
                public init(activity_type: Swift.String) {
                    self.activity_type = activity_type
                }
            }
            public var path: Operations.getAccountActivitiesByActivityType.Input.Path
            /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The date for which you want to see activities.
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query/date`.
                public var date: Foundation.Date?
                /// The response will contain only activities submitted before this date. (Cannot be used with date.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query/until`.
                public var until: Foundation.Date?
                /// The response will contain only activities submitted after this date. (Cannot be used with date.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query/after`.
                public var after: Foundation.Date?
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// asc or desc (default desc if unspecified.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query/direction`.
                public var direction: Operations.getAccountActivitiesByActivityType.Input.Query.directionPayload?
                /// The maximum number of entries to return in the response. (See the section on paging above.)
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query/page_size`.
                public var page_size: Swift.Int?
                /// The ID of the end of your current page of results. 
                ///
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/query/page_token`.
                public var page_token: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - date: The date for which you want to see activities.
                ///   - until: The response will contain only activities submitted before this date. (Cannot be used with date.)
                ///   - after: The response will contain only activities submitted after this date. (Cannot be used with date.)
                ///   - direction: asc or desc (default desc if unspecified.)
                ///   - page_size: The maximum number of entries to return in the response. (See the section on paging above.)
                ///   - page_token: The ID of the end of your current page of results. 
                public init(
                    date: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    after: Foundation.Date? = nil,
                    direction: Operations.getAccountActivitiesByActivityType.Input.Query.directionPayload? = nil,
                    page_size: Swift.Int? = nil,
                    page_token: Swift.String? = nil
                ) {
                    self.date = date
                    self.until = until
                    self.after = after
                    self.direction = direction
                    self.page_size = page_size
                    self.page_token = page_token
                }
            }
            public var query: Operations.getAccountActivitiesByActivityType.Input.Query
            /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivitiesByActivityType.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountActivitiesByActivityType.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountActivitiesByActivityType.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountActivitiesByActivityType.Input.Path,
                query: Operations.getAccountActivitiesByActivityType.Input.Query = .init(),
                headers: Operations.getAccountActivitiesByActivityType.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// Will be one of a TradingActivity or NonTradeActivity based on activity_type used in path
                    ///
                    /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/responses/200/content/jsonPayload`.
                    @frozen public enum jsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/responses/200/content/jsonPayload/case1`.
                        case TradingActivities(Components.Schemas.TradingActivities)
                        /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/responses/200/content/jsonPayload/case2`.
                        case NonTradeActivities(Components.Schemas.NonTradeActivities)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .TradingActivities(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .NonTradeActivities(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .TradingActivities(value):
                                try value.encode(to: encoder)
                            case let .NonTradeActivities(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/responses/200/content/json`.
                    public typealias jsonPayload = [Operations.getAccountActivitiesByActivityType.Output.Ok.Body.jsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/v2/account/activities/{activity_type}/GET/responses/200/content/application\/json`.
                    case json(Operations.getAccountActivitiesByActivityType.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAccountActivitiesByActivityType.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountActivitiesByActivityType.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountActivitiesByActivityType.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// returns an array of Account activities
            ///
            /// - Remark: Generated from `#/paths//v2/account/activities/{activity_type}/get(getAccountActivitiesByActivityType)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountActivitiesByActivityType.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountActivitiesByActivityType.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Market Calendar info
    ///
    /// Returns the market calendar.
    ///
    /// - Remark: HTTP `GET /v2/calendar`.
    /// - Remark: Generated from `#/paths//v2/calendar/get(getCalendar)`.
    public enum getCalendar {
        public static let id: Swift.String = "getCalendar"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/calendar/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The first date to retrieve data for (inclusive)
                ///
                /// - Remark: Generated from `#/paths/v2/calendar/GET/query/start`.
                public var start: Foundation.Date?
                /// The last date to retrieve data for (inclusive)
                ///
                /// - Remark: Generated from `#/paths/v2/calendar/GET/query/end`.
                public var end: Foundation.Date?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - start: The first date to retrieve data for (inclusive)
                ///   - end: The last date to retrieve data for (inclusive)
                public init(
                    start: Foundation.Date? = nil,
                    end: Foundation.Date? = nil
                ) {
                    self.start = start
                    self.end = end
                }
            }
            public var query: Operations.getCalendar.Input.Query
            /// - Remark: Generated from `#/paths/v2/calendar/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCalendar.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCalendar.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getCalendar.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getCalendar.Input.Query = .init(),
                headers: Operations.getCalendar.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/calendar/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/calendar/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Calendar])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Calendar] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getCalendar.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getCalendar.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v2/calendar/get(getCalendar)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCalendar.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getCalendar.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Market Clock info
    ///
    /// The clock API serves the current market timestamp, whether or not the market is currently open, as well as the times of the next market open and close.
    ///
    /// Returns the market clock.
    ///
    /// - Remark: HTTP `GET /v2/clock`.
    /// - Remark: Generated from `#/paths//v2/clock/get(getClock)`.
    public enum getClock {
        public static let id: Swift.String = "getClock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/clock/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getClock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getClock.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getClock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getClock.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/clock/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/clock/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Clock)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Clock {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getClock.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getClock.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v2/clock/get(getClock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getClock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getClock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
